
BLE_Beacon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006140  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  08006280  08006280  00016280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006620  08006620  00016620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006628  08006628  00016628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800662c  0800662c  0001662c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  20000004  08006630  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  2000009c  080066c8  0002009c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000031  20000138  08006761  00020138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  2000016c  08006792  0002016c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000141c  20000180  080067a3  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00001404  2000159c  080067a3  0002159c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002017d  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001a8  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000888  200301d0  200301d0  00030000  2**2
                  ALLOC
 16 .debug_line   00025c0e  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_info   000451e4  00000000  00000000  00045dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 0000841c  00000000  00000000  0008af9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00001e58  00000000  00000000  000933c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000f9176  00000000  00000000  00095218  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 00002888  00000000  00000000  0018e390  2**3
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_loc    000166b0  00000000  00000000  00190c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0002d699  00000000  00000000  001a72c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  001d4961  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000060c0  00000000  00000000  001d49dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000180 	.word	0x20000180
 800015c:	00000000 	.word	0x00000000
 8000160:	08006268 	.word	0x08006268

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000184 	.word	0x20000184
 800017c:	08006268 	.word	0x08006268

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b972 	b.w	800047c <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	4604      	mov	r4, r0
 80001b8:	4688      	mov	r8, r1
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d14b      	bne.n	8000256 <__udivmoddi4+0xa6>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4615      	mov	r5, r2
 80001c2:	d967      	bls.n	8000294 <__udivmoddi4+0xe4>
 80001c4:	fab2 f282 	clz	r2, r2
 80001c8:	b14a      	cbz	r2, 80001de <__udivmoddi4+0x2e>
 80001ca:	f1c2 0720 	rsb	r7, r2, #32
 80001ce:	fa01 f302 	lsl.w	r3, r1, r2
 80001d2:	fa20 f707 	lsr.w	r7, r0, r7
 80001d6:	4095      	lsls	r5, r2
 80001d8:	ea47 0803 	orr.w	r8, r7, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001e2:	0c23      	lsrs	r3, r4, #16
 80001e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80001e8:	fa1f fc85 	uxth.w	ip, r5
 80001ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80001f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f4:	fb07 f10c 	mul.w	r1, r7, ip
 80001f8:	4299      	cmp	r1, r3
 80001fa:	d909      	bls.n	8000210 <__udivmoddi4+0x60>
 80001fc:	18eb      	adds	r3, r5, r3
 80001fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000202:	f080 811b 	bcs.w	800043c <__udivmoddi4+0x28c>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 8118 	bls.w	800043c <__udivmoddi4+0x28c>
 800020c:	3f02      	subs	r7, #2
 800020e:	442b      	add	r3, r5
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0fe 	udiv	r0, r3, lr
 8000218:	fb0e 3310 	mls	r3, lr, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 fc0c 	mul.w	ip, r0, ip
 8000224:	45a4      	cmp	ip, r4
 8000226:	d909      	bls.n	800023c <__udivmoddi4+0x8c>
 8000228:	192c      	adds	r4, r5, r4
 800022a:	f100 33ff 	add.w	r3, r0, #4294967295
 800022e:	f080 8107 	bcs.w	8000440 <__udivmoddi4+0x290>
 8000232:	45a4      	cmp	ip, r4
 8000234:	f240 8104 	bls.w	8000440 <__udivmoddi4+0x290>
 8000238:	3802      	subs	r0, #2
 800023a:	442c      	add	r4, r5
 800023c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000240:	eba4 040c 	sub.w	r4, r4, ip
 8000244:	2700      	movs	r7, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa0>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	4639      	mov	r1, r7
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d909      	bls.n	800026e <__udivmoddi4+0xbe>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80eb 	beq.w	8000436 <__udivmoddi4+0x286>
 8000260:	2700      	movs	r7, #0
 8000262:	e9c6 0100 	strd	r0, r1, [r6]
 8000266:	4638      	mov	r0, r7
 8000268:	4639      	mov	r1, r7
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f783 	clz	r7, r3
 8000272:	2f00      	cmp	r7, #0
 8000274:	d147      	bne.n	8000306 <__udivmoddi4+0x156>
 8000276:	428b      	cmp	r3, r1
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd0>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fa 	bhi.w	8000474 <__udivmoddi4+0x2c4>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb61 0303 	sbc.w	r3, r1, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e0      	beq.n	8000250 <__udivmoddi4+0xa0>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7dd      	b.n	8000250 <__udivmoddi4+0xa0>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xe8>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 808f 	bne.w	80003c0 <__udivmoddi4+0x210>
 80002a2:	1b49      	subs	r1, r1, r5
 80002a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a8:	fa1f f885 	uxth.w	r8, r5
 80002ac:	2701      	movs	r7, #1
 80002ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80002b2:	0c23      	lsrs	r3, r4, #16
 80002b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb08 f10c 	mul.w	r1, r8, ip
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d907      	bls.n	80002d4 <__udivmoddi4+0x124>
 80002c4:	18eb      	adds	r3, r5, r3
 80002c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x122>
 80002cc:	4299      	cmp	r1, r3
 80002ce:	f200 80cd 	bhi.w	800046c <__udivmoddi4+0x2bc>
 80002d2:	4684      	mov	ip, r0
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	b2a3      	uxth	r3, r4
 80002d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80002e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002e4:	fb08 f800 	mul.w	r8, r8, r0
 80002e8:	45a0      	cmp	r8, r4
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0x14c>
 80002ec:	192c      	adds	r4, r5, r4
 80002ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14a>
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	f200 80b6 	bhi.w	8000466 <__udivmoddi4+0x2b6>
 80002fa:	4618      	mov	r0, r3
 80002fc:	eba4 0408 	sub.w	r4, r4, r8
 8000300:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000304:	e79f      	b.n	8000246 <__udivmoddi4+0x96>
 8000306:	f1c7 0c20 	rsb	ip, r7, #32
 800030a:	40bb      	lsls	r3, r7
 800030c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000310:	ea4e 0e03 	orr.w	lr, lr, r3
 8000314:	fa01 f407 	lsl.w	r4, r1, r7
 8000318:	fa20 f50c 	lsr.w	r5, r0, ip
 800031c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000320:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000324:	4325      	orrs	r5, r4
 8000326:	fbb3 f9f8 	udiv	r9, r3, r8
 800032a:	0c2c      	lsrs	r4, r5, #16
 800032c:	fb08 3319 	mls	r3, r8, r9, r3
 8000330:	fa1f fa8e 	uxth.w	sl, lr
 8000334:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000338:	fb09 f40a 	mul.w	r4, r9, sl
 800033c:	429c      	cmp	r4, r3
 800033e:	fa02 f207 	lsl.w	r2, r2, r7
 8000342:	fa00 f107 	lsl.w	r1, r0, r7
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b0>
 8000348:	eb1e 0303 	adds.w	r3, lr, r3
 800034c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000350:	f080 8087 	bcs.w	8000462 <__udivmoddi4+0x2b2>
 8000354:	429c      	cmp	r4, r3
 8000356:	f240 8084 	bls.w	8000462 <__udivmoddi4+0x2b2>
 800035a:	f1a9 0902 	sub.w	r9, r9, #2
 800035e:	4473      	add	r3, lr
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	b2ad      	uxth	r5, r5
 8000364:	fbb3 f0f8 	udiv	r0, r3, r8
 8000368:	fb08 3310 	mls	r3, r8, r0, r3
 800036c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000370:	fb00 fa0a 	mul.w	sl, r0, sl
 8000374:	45a2      	cmp	sl, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1da>
 8000378:	eb1e 0404 	adds.w	r4, lr, r4
 800037c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000380:	d26b      	bcs.n	800045a <__udivmoddi4+0x2aa>
 8000382:	45a2      	cmp	sl, r4
 8000384:	d969      	bls.n	800045a <__udivmoddi4+0x2aa>
 8000386:	3802      	subs	r0, #2
 8000388:	4474      	add	r4, lr
 800038a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038e:	fba0 8902 	umull	r8, r9, r0, r2
 8000392:	eba4 040a 	sub.w	r4, r4, sl
 8000396:	454c      	cmp	r4, r9
 8000398:	46c2      	mov	sl, r8
 800039a:	464b      	mov	r3, r9
 800039c:	d354      	bcc.n	8000448 <__udivmoddi4+0x298>
 800039e:	d051      	beq.n	8000444 <__udivmoddi4+0x294>
 80003a0:	2e00      	cmp	r6, #0
 80003a2:	d069      	beq.n	8000478 <__udivmoddi4+0x2c8>
 80003a4:	ebb1 050a 	subs.w	r5, r1, sl
 80003a8:	eb64 0403 	sbc.w	r4, r4, r3
 80003ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003b0:	40fd      	lsrs	r5, r7
 80003b2:	40fc      	lsrs	r4, r7
 80003b4:	ea4c 0505 	orr.w	r5, ip, r5
 80003b8:	e9c6 5400 	strd	r5, r4, [r6]
 80003bc:	2700      	movs	r7, #0
 80003be:	e747      	b.n	8000250 <__udivmoddi4+0xa0>
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f703 	lsr.w	r7, r0, r3
 80003c8:	4095      	lsls	r5, r2
 80003ca:	fa01 f002 	lsl.w	r0, r1, r2
 80003ce:	fa21 f303 	lsr.w	r3, r1, r3
 80003d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d6:	4338      	orrs	r0, r7
 80003d8:	0c01      	lsrs	r1, r0, #16
 80003da:	fbb3 f7fe 	udiv	r7, r3, lr
 80003de:	fa1f f885 	uxth.w	r8, r5
 80003e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80003e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ea:	fb07 f308 	mul.w	r3, r7, r8
 80003ee:	428b      	cmp	r3, r1
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x256>
 80003f6:	1869      	adds	r1, r5, r1
 80003f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80003fc:	d22f      	bcs.n	800045e <__udivmoddi4+0x2ae>
 80003fe:	428b      	cmp	r3, r1
 8000400:	d92d      	bls.n	800045e <__udivmoddi4+0x2ae>
 8000402:	3f02      	subs	r7, #2
 8000404:	4429      	add	r1, r5
 8000406:	1acb      	subs	r3, r1, r3
 8000408:	b281      	uxth	r1, r0
 800040a:	fbb3 f0fe 	udiv	r0, r3, lr
 800040e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000412:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000416:	fb00 f308 	mul.w	r3, r0, r8
 800041a:	428b      	cmp	r3, r1
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x27e>
 800041e:	1869      	adds	r1, r5, r1
 8000420:	f100 3cff 	add.w	ip, r0, #4294967295
 8000424:	d217      	bcs.n	8000456 <__udivmoddi4+0x2a6>
 8000426:	428b      	cmp	r3, r1
 8000428:	d915      	bls.n	8000456 <__udivmoddi4+0x2a6>
 800042a:	3802      	subs	r0, #2
 800042c:	4429      	add	r1, r5
 800042e:	1ac9      	subs	r1, r1, r3
 8000430:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000434:	e73b      	b.n	80002ae <__udivmoddi4+0xfe>
 8000436:	4637      	mov	r7, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e709      	b.n	8000250 <__udivmoddi4+0xa0>
 800043c:	4607      	mov	r7, r0
 800043e:	e6e7      	b.n	8000210 <__udivmoddi4+0x60>
 8000440:	4618      	mov	r0, r3
 8000442:	e6fb      	b.n	800023c <__udivmoddi4+0x8c>
 8000444:	4541      	cmp	r1, r8
 8000446:	d2ab      	bcs.n	80003a0 <__udivmoddi4+0x1f0>
 8000448:	ebb8 0a02 	subs.w	sl, r8, r2
 800044c:	eb69 020e 	sbc.w	r2, r9, lr
 8000450:	3801      	subs	r0, #1
 8000452:	4613      	mov	r3, r2
 8000454:	e7a4      	b.n	80003a0 <__udivmoddi4+0x1f0>
 8000456:	4660      	mov	r0, ip
 8000458:	e7e9      	b.n	800042e <__udivmoddi4+0x27e>
 800045a:	4618      	mov	r0, r3
 800045c:	e795      	b.n	800038a <__udivmoddi4+0x1da>
 800045e:	4667      	mov	r7, ip
 8000460:	e7d1      	b.n	8000406 <__udivmoddi4+0x256>
 8000462:	4681      	mov	r9, r0
 8000464:	e77c      	b.n	8000360 <__udivmoddi4+0x1b0>
 8000466:	3802      	subs	r0, #2
 8000468:	442c      	add	r4, r5
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0x14c>
 800046c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000470:	442b      	add	r3, r5
 8000472:	e72f      	b.n	80002d4 <__udivmoddi4+0x124>
 8000474:	4638      	mov	r0, r7
 8000476:	e708      	b.n	800028a <__udivmoddi4+0xda>
 8000478:	4637      	mov	r7, r6
 800047a:	e6e9      	b.n	8000250 <__udivmoddi4+0xa0>

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000480:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000482:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000484:	3304      	adds	r3, #4

08000486 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000486:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000488:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800048a:	d3f9      	bcc.n	8000480 <CopyDataInit>
  bx lr
 800048c:	4770      	bx	lr

0800048e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800048e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000490:	3004      	adds	r0, #4

08000492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000492:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000494:	d3fb      	bcc.n	800048e <FillZerobss>
  bx lr
 8000496:	4770      	bx	lr

08000498 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000498:	480c      	ldr	r0, [pc, #48]	; (80004cc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800049a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800049c:	480c      	ldr	r0, [pc, #48]	; (80004d0 <LoopForever+0x8>)
 800049e:	490d      	ldr	r1, [pc, #52]	; (80004d4 <LoopForever+0xc>)
 80004a0:	4a0d      	ldr	r2, [pc, #52]	; (80004d8 <LoopForever+0x10>)
 80004a2:	2300      	movs	r3, #0
 80004a4:	f7ff ffef 	bl	8000486 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80004a8:	480c      	ldr	r0, [pc, #48]	; (80004dc <LoopForever+0x14>)
 80004aa:	490d      	ldr	r1, [pc, #52]	; (80004e0 <LoopForever+0x18>)
 80004ac:	2300      	movs	r3, #0
 80004ae:	f7ff fff0 	bl	8000492 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80004b2:	480c      	ldr	r0, [pc, #48]	; (80004e4 <LoopForever+0x1c>)
 80004b4:	490c      	ldr	r1, [pc, #48]	; (80004e8 <LoopForever+0x20>)
 80004b6:	2300      	movs	r3, #0
 80004b8:	f7ff ffeb 	bl	8000492 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004bc:	f001 fbf0 	bl	8001ca0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80004c0:	f005 fa32 	bl	8005928 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80004c4:	f000 fec6 	bl	8001254 <main>

080004c8 <LoopForever>:

LoopForever:
  b LoopForever
 80004c8:	e7fe      	b.n	80004c8 <LoopForever>
 80004ca:	0000      	.short	0x0000
  ldr   r0, =_estack
 80004cc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80004d0:	20000004 	.word	0x20000004
 80004d4:	2000009c 	.word	0x2000009c
 80004d8:	08006630 	.word	0x08006630
  INIT_BSS _sbss, _ebss
 80004dc:	20000180 	.word	0x20000180
 80004e0:	2000159c 	.word	0x2000159c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80004e4:	200301d0 	.word	0x200301d0
 80004e8:	20030a58 	.word	0x20030a58

080004ec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004ec:	e7fe      	b.n	80004ec <ADC1_IRQHandler>

080004ee <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004ee:	b570      	push	{r4, r5, r6, lr}
 80004f0:	460e      	mov	r6, r1
 80004f2:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f4:	460c      	mov	r4, r1
 80004f6:	1ba3      	subs	r3, r4, r6
 80004f8:	429d      	cmp	r5, r3
 80004fa:	dc01      	bgt.n	8000500 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80004fc:	4628      	mov	r0, r5
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8000500:	f3af 8000 	nop.w
 8000504:	f804 0b01 	strb.w	r0, [r4], #1
 8000508:	e7f5      	b.n	80004f6 <_read+0x8>
	...

0800050c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800050c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800050e:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <_sbrk+0x2c>)
 8000510:	6819      	ldr	r1, [r3, #0]
{
 8000512:	4602      	mov	r2, r0
	if (heap_end == 0)
 8000514:	b909      	cbnz	r1, 800051a <_sbrk+0xe>
		heap_end = &end;
 8000516:	4909      	ldr	r1, [pc, #36]	; (800053c <_sbrk+0x30>)
 8000518:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800051a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800051c:	4669      	mov	r1, sp
 800051e:	4402      	add	r2, r0
 8000520:	428a      	cmp	r2, r1
 8000522:	d906      	bls.n	8000532 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000524:	f005 f9fa 	bl	800591c <__errno>
 8000528:	230c      	movs	r3, #12
 800052a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800052c:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8000530:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8000532:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8000534:	e7fc      	b.n	8000530 <_sbrk+0x24>
 8000536:	bf00      	nop
 8000538:	2000019c 	.word	0x2000019c
 800053c:	200015a0 	.word	0x200015a0

08000540 <_close>:

int _close(int file)
{
	return -1;
}
 8000540:	f04f 30ff 	mov.w	r0, #4294967295
 8000544:	4770      	bx	lr

08000546 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000546:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800054a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800054c:	2000      	movs	r0, #0
 800054e:	4770      	bx	lr

08000550 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000550:	2001      	movs	r0, #1
 8000552:	4770      	bx	lr

08000554 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000554:	2000      	movs	r0, #0
 8000556:	4770      	bx	lr

08000558 <LL_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 800055c:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 800055e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000560:	4302      	orrs	r2, r0
 8000562:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	4018      	ands	r0, r3
 8000568:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 800056a:	9b01      	ldr	r3, [sp, #4]
}
 800056c:	b002      	add	sp, #8
 800056e:	4770      	bx	lr

08000570 <LL_C2_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8000574:	b082      	sub	sp, #8
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000576:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800057a:	4302      	orrs	r2, r0
 800057c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000580:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000584:	4018      	ands	r0, r3
 8000586:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000588:	9b01      	ldr	r3, [sp, #4]
}
 800058a:	b002      	add	sp, #8
 800058c:	4770      	bx	lr
	...

08000590 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000592:	b087      	sub	sp, #28
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000594:	f001 fc5c 	bl	8001e50 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000598:	f001 fc62 	bl	8001e60 <HAL_DBGMCU_EnableDBGStopMode>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 800059c:	4a34      	ldr	r2, [pc, #208]	; (8000670 <APPD_Init+0xe0>)

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
  {
    if( aGpioConfigList[local_loop].enable != 0)
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 800059e:	4f35      	ldr	r7, [pc, #212]	; (8000674 <APPD_Init+0xe4>)
 80005a0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80005a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  DbgTraceInit();
 80005ac:	f004 fb2c 	bl	8004c08 <DbgTraceInit>
  GPIO_InitTypeDef gpio_config = {0};
 80005b0:	2214      	movs	r2, #20
 80005b2:	2100      	movs	r1, #0
 80005b4:	a801      	add	r0, sp, #4
 80005b6:	f005 f9e6 	bl	8005986 <memset>
 80005ba:	2300      	movs	r3, #0
    if( aGpioConfigList[local_loop].enable != 0)
 80005bc:	482e      	ldr	r0, [pc, #184]	; (8000678 <APPD_Init+0xe8>)
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80005be:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 800067c <APPD_Init+0xec>
  gpioc_pin_list = 0;
 80005c2:	461c      	mov	r4, r3
  gpiob_pin_list = 0;
 80005c4:	461d      	mov	r5, r3
  gpioa_pin_list = 0;
 80005c6:	461e      	mov	r6, r3
    if( aGpioConfigList[local_loop].enable != 0)
 80005c8:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 80005cc:	7991      	ldrb	r1, [r2, #6]
 80005ce:	b151      	cbz	r1, 80005e6 <APPD_Init+0x56>
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80005d0:	f850 1033 	ldr.w	r1, [r0, r3, lsl #3]
 80005d4:	42b9      	cmp	r1, r7
 80005d6:	d044      	beq.n	8000662 <APPD_Init+0xd2>
 80005d8:	4561      	cmp	r1, ip
 80005da:	d045      	beq.n	8000668 <APPD_Init+0xd8>
 80005dc:	f1b1 4f90 	cmp.w	r1, #1207959552	; 0x48000000
 80005e0:	d101      	bne.n	80005e6 <APPD_Init+0x56>
      {
        case (uint32_t)GPIOA:
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 80005e2:	8892      	ldrh	r2, [r2, #4]
 80005e4:	4316      	orrs	r6, r2
 80005e6:	3301      	adds	r3, #1
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80005e8:	2b22      	cmp	r3, #34	; 0x22
 80005ea:	d1ed      	bne.n	80005c8 <APPD_Init+0x38>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80005ec:	2101      	movs	r1, #1
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ee:	2303      	movs	r3, #3
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80005f0:	9102      	str	r1, [sp, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f2:	9304      	str	r3, [sp, #16]

  if(gpioa_pin_list != 0)
 80005f4:	b18e      	cbz	r6, 800061a <APPD_Init+0x8a>
  {
    gpio_config.Pin = gpioa_pin_list;
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	4608      	mov	r0, r1
    gpio_config.Pin = gpioa_pin_list;
 80005f8:	9601      	str	r6, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	f7ff ffad 	bl	8000558 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80005fe:	4608      	mov	r0, r1
 8000600:	f7ff ffb6 	bl	8000570 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000604:	a901      	add	r1, sp, #4
 8000606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060a:	f001 fe6d 	bl	80022e8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	4631      	mov	r1, r6
 8000612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000616:	f001 ff1d 	bl	8002454 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 800061a:	b17d      	cbz	r5, 800063c <APPD_Init+0xac>
  {
    gpio_config.Pin = gpiob_pin_list;
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800061c:	2002      	movs	r0, #2
    gpio_config.Pin = gpiob_pin_list;
 800061e:	9501      	str	r5, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000620:	f7ff ff9a 	bl	8000558 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000624:	2002      	movs	r0, #2
 8000626:	f7ff ffa3 	bl	8000570 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 800062a:	a901      	add	r1, sp, #4
 800062c:	4811      	ldr	r0, [pc, #68]	; (8000674 <APPD_Init+0xe4>)
 800062e:	f001 fe5b 	bl	80022e8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	4629      	mov	r1, r5
 8000636:	480f      	ldr	r0, [pc, #60]	; (8000674 <APPD_Init+0xe4>)
 8000638:	f001 ff0c 	bl	8002454 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800063c:	b17c      	cbz	r4, 800065e <APPD_Init+0xce>
  {
    gpio_config.Pin = gpioc_pin_list;
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	2004      	movs	r0, #4
    gpio_config.Pin = gpioc_pin_list;
 8000640:	9401      	str	r4, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000642:	f7ff ff89 	bl	8000558 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000646:	2004      	movs	r0, #4
 8000648:	f7ff ff92 	bl	8000570 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 800064c:	a901      	add	r1, sp, #4
 800064e:	480b      	ldr	r0, [pc, #44]	; (800067c <APPD_Init+0xec>)
 8000650:	f001 fe4a 	bl	80022e8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	4621      	mov	r1, r4
 8000658:	4808      	ldr	r0, [pc, #32]	; (800067c <APPD_Init+0xec>)
 800065a:	f001 fefb 	bl	8002454 <HAL_GPIO_WritePin>
}
 800065e:	b007      	add	sp, #28
 8000660:	bdf0      	pop	{r4, r5, r6, r7, pc}
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000662:	8892      	ldrh	r2, [r2, #4]
 8000664:	4315      	orrs	r5, r2
 8000666:	e7be      	b.n	80005e6 <APPD_Init+0x56>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000668:	8892      	ldrh	r2, [r2, #4]
 800066a:	4314      	orrs	r4, r2
 800066c:	e7bb      	b.n	80005e6 <APPD_Init+0x56>
 800066e:	bf00      	nop
 8000670:	58000800 	.word	0x58000800
 8000674:	48000400 	.word	0x48000400
 8000678:	08006280 	.word	0x08006280
 800067c:	48000800 	.word	0x48000800

08000680 <APPD_EnableCPU2>:
{
 8000680:	b570      	push	{r4, r5, r6, lr}
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <APPD_EnableCPU2+0x34>)
{
 8000684:	b088      	sub	sp, #32
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000686:	aa01      	add	r2, sp, #4
 8000688:	f103 0618 	add.w	r6, r3, #24
 800068c:	4615      	mov	r5, r2
 800068e:	6818      	ldr	r0, [r3, #0]
 8000690:	6859      	ldr	r1, [r3, #4]
 8000692:	4614      	mov	r4, r2
 8000694:	c403      	stmia	r4!, {r0, r1}
 8000696:	3308      	adds	r3, #8
 8000698:	42b3      	cmp	r3, r6
 800069a:	4622      	mov	r2, r4
 800069c:	d1f7      	bne.n	800068e <APPD_EnableCPU2+0xe>
 800069e:	8819      	ldrh	r1, [r3, #0]
 80006a0:	789b      	ldrb	r3, [r3, #2]
 80006a2:	8021      	strh	r1, [r4, #0]
 80006a4:	70a3      	strb	r3, [r4, #2]
  TL_TRACES_Init( );
 80006a6:	f005 f809 	bl	80056bc <TL_TRACES_Init>
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80006aa:	4628      	mov	r0, r5
 80006ac:	f004 fbf2 	bl	8004e94 <SHCI_C2_DEBUG_Init>
}
 80006b0:	b008      	add	sp, #32
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	08006390 	.word	0x08006390

080006b8 <DbgOutputInit>:
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 80006b8:	f000 bd82 	b.w	80011c0 <MX_USART1_UART_Init>

080006bc <DbgOutputTraces>:
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80006bc:	4613      	mov	r3, r2
 80006be:	460a      	mov	r2, r1
 80006c0:	4601      	mov	r1, r0
 80006c2:	2000      	movs	r0, #0
 80006c4:	f000 bc8e 	b.w	8000fe4 <HW_UART_Transmit_DMA>

080006c8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
  UNUSED(status);
  return;
}
 80006c8:	4770      	bx	lr

080006ca <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80006ca:	b508      	push	{r3, lr}
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 80006cc:	f7ff ffd8 	bl	8000680 <APPD_EnableCPU2>

  APP_BLE_Init( );
 80006d0:	f001 f844 	bl	800175c <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80006d4:	2100      	movs	r1, #0
 80006d6:	2001      	movs	r0, #1
  return;
}
 80006d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80006dc:	f005 b81a 	b.w	8005714 <UTIL_LPM_SetOffMode>

080006e0 <APPE_Init>:
{
 80006e0:	b510      	push	{r4, lr}
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80006e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006e6:	b088      	sub	sp, #32
 80006e8:	6893      	ldr	r3, [r2, #8]
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80006ea:	4c20      	ldr	r4, [pc, #128]	; (800076c <APPE_Init+0x8c>)
 80006ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006f0:	6093      	str	r3, [r2, #8]
  UTIL_LPM_Init( );
 80006f2:	f005 f807 	bl	8005704 <UTIL_LPM_Init>
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80006f6:	491e      	ldr	r1, [pc, #120]	; (8000770 <APPE_Init+0x90>)
 80006f8:	2000      	movs	r0, #0
 80006fa:	f000 fa95 	bl	8000c28 <HW_TS_Init>
  APPD_Init();
 80006fe:	f7ff ff47 	bl	8000590 <APPD_Init>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000702:	2101      	movs	r1, #1
 8000704:	4608      	mov	r0, r1
 8000706:	f005 f805 	bl	8005714 <UTIL_LPM_SetOffMode>
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 800070a:	2000      	movs	r0, #0
 800070c:	f001 fa38 	bl	8001b80 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000710:	2001      	movs	r0, #1
 8000712:	f001 fa35 	bl	8001b80 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000716:	2002      	movs	r0, #2
 8000718:	f001 fa32 	bl	8001b80 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 800071c:	2001      	movs	r0, #1
 800071e:	f001 fa57 	bl	8001bd0 <BSP_LED_On>
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000722:	2101      	movs	r1, #1
 8000724:	2000      	movs	r0, #0
 8000726:	f001 fa6f 	bl	8001c08 <BSP_PB_Init>
  TL_Init();
 800072a:	f004 fee7 	bl	80054fc <TL_Init>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 800072e:	4a11      	ldr	r2, [pc, #68]	; (8000774 <APPE_Init+0x94>)
 8000730:	2100      	movs	r1, #0
 8000732:	2004      	movs	r0, #4
 8000734:	f005 f820 	bl	8005778 <UTIL_SEQ_RegTask>
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000738:	4669      	mov	r1, sp
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <APPE_Init+0x98>)
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800073c:	480f      	ldr	r0, [pc, #60]	; (800077c <APPE_Init+0x9c>)
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800073e:	9400      	str	r4, [sp, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000740:	9301      	str	r3, [sp, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000742:	f004 fbcf 	bl	8004ee4 <shci_init>
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000746:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 800074a:	9302      	str	r3, [sp, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800074c:	f504 7306 	add.w	r3, r4, #536	; 0x218
 8000750:	9303      	str	r3, [sp, #12]
  TL_MM_Init( &tl_mm_config );
 8000752:	a802      	add	r0, sp, #8
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000754:	f240 533c 	movw	r3, #1340	; 0x53c
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000758:	f504 7449 	add.w	r4, r4, #804	; 0x324
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800075c:	9305      	str	r3, [sp, #20]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800075e:	9404      	str	r4, [sp, #16]
  TL_MM_Init( &tl_mm_config );
 8000760:	f004 ff7e 	bl	8005660 <TL_MM_Init>
  TL_Enable();
 8000764:	f004 fec8 	bl	80054f8 <TL_Enable>
}
 8000768:	b008      	add	sp, #32
 800076a:	bd10      	pop	{r4, pc}
 800076c:	200301d8 	.word	0x200301d8
 8000770:	20001510 	.word	0x20001510
 8000774:	08004f31 	.word	0x08004f31
 8000778:	080006c9 	.word	0x080006c9
 800077c:	080006cb 	.word	0x080006cb

08000780 <UTIL_SEQ_Idle>:
{
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
}
 8000780:	4770      	bx	lr

08000782 <UTIL_SEQ_EvtIdle>:
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000782:	f04f 30ff 	mov.w	r0, #4294967295
 8000786:	f005 b843 	b.w	8005810 <UTIL_SEQ_Run>

0800078a <shci_notify_asynch_evt>:
}

void shci_notify_asynch_evt(void* pdata)
{
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800078a:	2100      	movs	r1, #0
 800078c:	2004      	movs	r0, #4
 800078e:	f005 b803 	b.w	8005798 <UTIL_SEQ_SetTask>

08000792 <shci_cmd_resp_release>:
  return;
}

void shci_cmd_resp_release(uint32_t flag)
{
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000792:	2002      	movs	r0, #2
 8000794:	f005 b82e 	b.w	80057f4 <UTIL_SEQ_SetEvt>

08000798 <shci_cmd_resp_wait>:
  return;
}

void shci_cmd_resp_wait(uint32_t timeout)
{
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000798:	2002      	movs	r0, #2
 800079a:	f005 b8a5 	b.w	80058e8 <UTIL_SEQ_WaitEvt>

0800079e <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800079e:	b148      	cbz	r0, 80007b4 <null_ptr_check+0x16>
 80007a0:	68c3      	ldr	r3, [r0, #12]
 80007a2:	b13b      	cbz	r3, 80007b4 <null_ptr_check+0x16>
 80007a4:	6903      	ldr	r3, [r0, #16]
 80007a6:	b12b      	cbz	r3, 80007b4 <null_ptr_check+0x16>
 80007a8:	6940      	ldr	r0, [r0, #20]
 80007aa:	fab0 f080 	clz	r0, r0
 80007ae:	0940      	lsrs	r0, r0, #5
 80007b0:	4240      	negs	r0, r0
 80007b2:	4770      	bx	lr
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295
        /* Device structure is fine */
        rslt = BME280_OK;
    }

    return rslt;
}
 80007b8:	4770      	bx	lr

080007ba <bme280_get_regs>:
{
 80007ba:	b570      	push	{r4, r5, r6, lr}
 80007bc:	4605      	mov	r5, r0
    rslt = null_ptr_check(dev);
 80007be:	4618      	mov	r0, r3
{
 80007c0:	461c      	mov	r4, r3
    rslt = null_ptr_check(dev);
 80007c2:	f7ff ffec 	bl	800079e <null_ptr_check>
    if ((rslt == BME280_OK) && (reg_data != NULL))
 80007c6:	b980      	cbnz	r0, 80007ea <bme280_get_regs+0x30>
 80007c8:	b179      	cbz	r1, 80007ea <bme280_get_regs+0x30>
        if (dev->intf != BME280_I2C_INTF)
 80007ca:	7a23      	ldrb	r3, [r4, #8]
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80007cc:	68e6      	ldr	r6, [r4, #12]
        if (dev->intf != BME280_I2C_INTF)
 80007ce:	2b01      	cmp	r3, #1
            reg_addr = reg_addr | 0x80;
 80007d0:	bf18      	it	ne
 80007d2:	f045 0580 	orrne.w	r5, r5, #128	; 0x80
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80007d6:	6863      	ldr	r3, [r4, #4]
 80007d8:	4628      	mov	r0, r5
 80007da:	47b0      	blx	r6
            rslt = BME280_E_COMM_FAIL;
 80007dc:	2800      	cmp	r0, #0
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80007de:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            rslt = BME280_E_COMM_FAIL;
 80007e2:	bf18      	it	ne
 80007e4:	f06f 0003 	mvnne.w	r0, #3
}
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BME280_E_NULL_PTR;
 80007ea:	f04f 30ff 	mov.w	r0, #4294967295
 80007ee:	e7fb      	b.n	80007e8 <bme280_get_regs+0x2e>

080007f0 <bme280_set_regs>:
{
 80007f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007f2:	2a0a      	cmp	r2, #10
 80007f4:	b087      	sub	sp, #28
 80007f6:	4606      	mov	r6, r0
    rslt = null_ptr_check(dev);
 80007f8:	4618      	mov	r0, r3
 80007fa:	4614      	mov	r4, r2
{
 80007fc:	460f      	mov	r7, r1
 80007fe:	bf28      	it	cs
 8000800:	240a      	movcs	r4, #10
 8000802:	461d      	mov	r5, r3
    rslt = null_ptr_check(dev);
 8000804:	f7ff ffcb 	bl	800079e <null_ptr_check>
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000808:	bb88      	cbnz	r0, 800086e <bme280_set_regs+0x7e>
 800080a:	b386      	cbz	r6, 800086e <bme280_set_regs+0x7e>
 800080c:	b379      	cbz	r1, 800086e <bme280_set_regs+0x7e>
        if (len != 0)
 800080e:	b38a      	cbz	r2, 8000874 <bme280_set_regs+0x84>
            temp_buff[0] = reg_data[0];
 8000810:	780b      	ldrb	r3, [r1, #0]
 8000812:	f88d 3004 	strb.w	r3, [sp, #4]
            if (dev->intf != BME280_I2C_INTF)
 8000816:	7a2b      	ldrb	r3, [r5, #8]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d009      	beq.n	8000830 <bme280_set_regs+0x40>
 800081c:	4633      	mov	r3, r6
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800081e:	7819      	ldrb	r1, [r3, #0]
 8000820:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000824:	f803 1b01 	strb.w	r1, [r3], #1
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000828:	1b99      	subs	r1, r3, r6
 800082a:	b2c9      	uxtb	r1, r1
 800082c:	42a1      	cmp	r1, r4
 800082e:	d3f6      	bcc.n	800081e <bme280_set_regs+0x2e>
            if (len > 1)
 8000830:	2a01      	cmp	r2, #1
 8000832:	a901      	add	r1, sp, #4
 8000834:	d00f      	beq.n	8000856 <bme280_set_regs+0x66>
 8000836:	2301      	movs	r3, #1
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8000838:	eb01 0243 	add.w	r2, r1, r3, lsl #1
 800083c:	5cf0      	ldrb	r0, [r6, r3]
 800083e:	f802 0c01 	strb.w	r0, [r2, #-1]
        temp_buff[index * 2] = reg_data[index];
 8000842:	5cfa      	ldrb	r2, [r7, r3]
 8000844:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
 8000848:	3301      	adds	r3, #1
    for (index = 1; index < len; index++)
 800084a:	b2da      	uxtb	r2, r3
 800084c:	42a2      	cmp	r2, r4
 800084e:	d3f3      	bcc.n	8000838 <bme280_set_regs+0x48>
                temp_len = ((len * 2) - 1);
 8000850:	0062      	lsls	r2, r4, #1
 8000852:	3a01      	subs	r2, #1
 8000854:	b292      	uxth	r2, r2
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8000856:	692c      	ldr	r4, [r5, #16]
 8000858:	686b      	ldr	r3, [r5, #4]
 800085a:	7830      	ldrb	r0, [r6, #0]
 800085c:	47a0      	blx	r4
                rslt = BME280_E_COMM_FAIL;
 800085e:	2800      	cmp	r0, #0
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8000860:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
                rslt = BME280_E_COMM_FAIL;
 8000864:	bf18      	it	ne
 8000866:	f06f 0003 	mvnne.w	r0, #3
}
 800086a:	b007      	add	sp, #28
 800086c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rslt = BME280_E_NULL_PTR;
 800086e:	f04f 30ff 	mov.w	r0, #4294967295
 8000872:	e7fa      	b.n	800086a <bme280_set_regs+0x7a>
            rslt = BME280_E_INVALID_LEN;
 8000874:	f06f 0002 	mvn.w	r0, #2
 8000878:	e7f7      	b.n	800086a <bme280_set_regs+0x7a>

0800087a <bme280_soft_reset>:
{
 800087a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t reg_addr = BME280_RESET_ADDR;
 800087c:	23e0      	movs	r3, #224	; 0xe0
 800087e:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8_t status_reg = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8000888:	23b6      	movs	r3, #182	; 0xb6
{
 800088a:	4605      	mov	r5, r0
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 800088c:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_ptr_check(dev);
 8000890:	f7ff ff85 	bl	800079e <null_ptr_check>
    if (rslt == BME280_OK)
 8000894:	bb28      	cbnz	r0, 80008e2 <bme280_soft_reset+0x68>
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000896:	462b      	mov	r3, r5
 8000898:	2201      	movs	r2, #1
 800089a:	f10d 0107 	add.w	r1, sp, #7
 800089e:	f10d 0005 	add.w	r0, sp, #5
 80008a2:	f7ff ffa5 	bl	80007f0 <bme280_set_regs>
        if (rslt == BME280_OK)
 80008a6:	b9e0      	cbnz	r0, 80008e2 <bme280_soft_reset+0x68>
 80008a8:	2406      	movs	r4, #6
                dev->delay_us(2000, dev->intf_ptr);
 80008aa:	696b      	ldr	r3, [r5, #20]
 80008ac:	6869      	ldr	r1, [r5, #4]
 80008ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008b2:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 80008b4:	462b      	mov	r3, r5
 80008b6:	2201      	movs	r2, #1
 80008b8:	f10d 0106 	add.w	r1, sp, #6
 80008bc:	20f3      	movs	r0, #243	; 0xf3
 80008be:	f7ff ff7c 	bl	80007ba <bme280_get_regs>
 80008c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 80008c6:	b938      	cbnz	r0, 80008d8 <bme280_soft_reset+0x5e>
 80008c8:	3c01      	subs	r4, #1
 80008ca:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80008ce:	f003 0201 	and.w	r2, r3, #1
 80008d2:	d001      	beq.n	80008d8 <bme280_soft_reset+0x5e>
 80008d4:	2a00      	cmp	r2, #0
 80008d6:	d1e8      	bne.n	80008aa <bme280_soft_reset+0x30>
                rslt = BME280_E_NVM_COPY_FAILED;
 80008d8:	f013 0f01 	tst.w	r3, #1
 80008dc:	bf18      	it	ne
 80008de:	f06f 0005 	mvnne.w	r0, #5
}
 80008e2:	b003      	add	sp, #12
 80008e4:	bd30      	pop	{r4, r5, pc}

080008e6 <bme280_init>:
{
 80008e6:	b530      	push	{r4, r5, lr}
 80008e8:	b089      	sub	sp, #36	; 0x24
    uint8_t chip_id = 0;
 80008ea:	2300      	movs	r3, #0
{
 80008ec:	4604      	mov	r4, r0
    uint8_t chip_id = 0;
 80008ee:	f88d 3003 	strb.w	r3, [sp, #3]
    rslt = null_ptr_check(dev);
 80008f2:	f7ff ff54 	bl	800079e <null_ptr_check>
    if (rslt == BME280_OK)
 80008f6:	2800      	cmp	r0, #0
 80008f8:	f040 80a1 	bne.w	8000a3e <bme280_init+0x158>
 80008fc:	2505      	movs	r5, #5
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 80008fe:	4623      	mov	r3, r4
 8000900:	2201      	movs	r2, #1
 8000902:	f10d 0103 	add.w	r1, sp, #3
 8000906:	20d0      	movs	r0, #208	; 0xd0
 8000908:	f7ff ff57 	bl	80007ba <bme280_get_regs>
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 800090c:	2800      	cmp	r0, #0
 800090e:	f040 8098 	bne.w	8000a42 <bme280_init+0x15c>
 8000912:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000916:	2b60      	cmp	r3, #96	; 0x60
 8000918:	f040 8093 	bne.w	8000a42 <bme280_init+0x15c>
                dev->chip_id = chip_id;
 800091c:	7023      	strb	r3, [r4, #0]
                rslt = bme280_soft_reset(dev);
 800091e:	4620      	mov	r0, r4
 8000920:	f7ff ffab 	bl	800087a <bme280_soft_reset>
                if (rslt == BME280_OK)
 8000924:	2800      	cmp	r0, #0
 8000926:	f040 808a 	bne.w	8000a3e <bme280_init+0x158>
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 800092a:	4601      	mov	r1, r0
 800092c:	221a      	movs	r2, #26
 800092e:	a801      	add	r0, sp, #4
 8000930:	f005 f829 	bl	8005986 <memset>
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8000934:	4623      	mov	r3, r4
 8000936:	221a      	movs	r2, #26
 8000938:	a901      	add	r1, sp, #4
 800093a:	2088      	movs	r0, #136	; 0x88
 800093c:	f7ff ff3d 	bl	80007ba <bme280_get_regs>
    if (rslt == BME280_OK)
 8000940:	2800      	cmp	r0, #0
 8000942:	d17c      	bne.n	8000a3e <bme280_init+0x158>
    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8000944:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000948:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800094c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000950:	8323      	strh	r3, [r4, #24]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8000952:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000956:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800095a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800095e:	8363      	strh	r3, [r4, #26]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8000960:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8000964:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8000968:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800096c:	83a3      	strh	r3, [r4, #28]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 800096e:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8000972:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8000976:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800097a:	83e3      	strh	r3, [r4, #30]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800097c:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8000980:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8000984:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000988:	8423      	strh	r3, [r4, #32]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 800098a:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800098e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8000992:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000996:	8463      	strh	r3, [r4, #34]	; 0x22
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8000998:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800099c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80009a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80009a4:	84a3      	strh	r3, [r4, #36]	; 0x24
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80009a6:	f89d 2013 	ldrb.w	r2, [sp, #19]
 80009aa:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80009ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80009b2:	84e3      	strh	r3, [r4, #38]	; 0x26
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80009b4:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80009b8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80009bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80009c0:	8523      	strh	r3, [r4, #40]	; 0x28
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80009c2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80009c6:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80009ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80009ce:	8563      	strh	r3, [r4, #42]	; 0x2a
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 80009d0:	f89d 2019 	ldrb.w	r2, [sp, #25]
 80009d4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80009d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80009dc:	85a3      	strh	r3, [r4, #44]	; 0x2c
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 80009de:	f89d 201b 	ldrb.w	r2, [sp, #27]
 80009e2:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80009e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80009ea:	85e3      	strh	r3, [r4, #46]	; 0x2e
    calib_data->dig_h1 = reg_data[25];
 80009ec:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80009f0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80009f4:	2207      	movs	r2, #7
 80009f6:	4623      	mov	r3, r4
 80009f8:	a901      	add	r1, sp, #4
 80009fa:	20e1      	movs	r0, #225	; 0xe1
 80009fc:	f7ff fedd 	bl	80007ba <bme280_get_regs>
        if (rslt == BME280_OK)
 8000a00:	b9e8      	cbnz	r0, 8000a3e <bme280_init+0x158>
    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8000a02:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000a06:	f89d 3004 	ldrb.w	r3, [sp, #4]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8000a0a:	f99d 1007 	ldrsb.w	r1, [sp, #7]
    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8000a0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a12:	8663      	strh	r3, [r4, #50]	; 0x32
    calib_data->dig_h3 = reg_data[2];
 8000a14:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000a18:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8000a1c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8000a20:	f003 020f 	and.w	r2, r3, #15
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 8000a24:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8000a28:	86e2      	strh	r2, [r4, #54]	; 0x36
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8000a2a:	f99d 2009 	ldrsb.w	r2, [sp, #9]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 8000a2e:	091b      	lsrs	r3, r3, #4
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 8000a30:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000a34:	8723      	strh	r3, [r4, #56]	; 0x38
    calib_data->dig_h6 = (int8_t)reg_data[6];
 8000a36:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8000a3a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8000a3e:	b009      	add	sp, #36	; 0x24
 8000a40:	bd30      	pop	{r4, r5, pc}
            dev->delay_us(1000, dev->intf_ptr);
 8000a42:	6963      	ldr	r3, [r4, #20]
 8000a44:	6861      	ldr	r1, [r4, #4]
 8000a46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a4a:	3d01      	subs	r5, #1
 8000a4c:	4798      	blx	r3
        while (try_count)
 8000a4e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8000a52:	f47f af54 	bne.w	80008fe <bme280_init+0x18>
            rslt = BME280_E_DEV_NOT_FOUND;
 8000a56:	f06f 0001 	mvn.w	r0, #1
 8000a5a:	e7f0      	b.n	8000a3e <bme280_init+0x158>

08000a5c <ReadRtcSsrValue>:
static uint32_t ReadRtcSsrValue(void)
{
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a5c:	4a05      	ldr	r2, [pc, #20]	; (8000a74 <ReadRtcSsrValue+0x18>)
 8000a5e:	6a90      	ldr	r0, [r2, #40]	; 0x28

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a60:	6a93      	ldr	r3, [r2, #40]	; 0x28
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a62:	b280      	uxth	r0, r0
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a64:	b29b      	uxth	r3, r3

  while(first_read != second_read)
 8000a66:	4298      	cmp	r0, r3
 8000a68:	d100      	bne.n	8000a6c <ReadRtcSsrValue+0x10>

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
  }

  return second_read;
}
 8000a6a:	4770      	bx	lr
    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a6c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000a6e:	4618      	mov	r0, r3
 8000a70:	b28b      	uxth	r3, r1
 8000a72:	e7f8      	b.n	8000a66 <ReadRtcSsrValue+0xa>
 8000a74:	40002800 	.word	0x40002800

08000a78 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000a78:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <UnlinkTimer+0x60>)
 8000a7c:	781a      	ldrb	r2, [r3, #0]
 8000a7e:	4282      	cmp	r2, r0
 8000a80:	f04f 0418 	mov.w	r4, #24
 8000a84:	d115      	bne.n	8000ab2 <UnlinkTimer+0x3a>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000a86:	781a      	ldrb	r2, [r3, #0]
 8000a88:	b2d2      	uxtb	r2, r2
 8000a8a:	705a      	strb	r2, [r3, #1]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000a8c:	fb04 3200 	mla	r2, r4, r0, r3
 8000a90:	7e52      	ldrb	r2, [r2, #25]
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000a96:	2218      	movs	r2, #24
 8000a98:	fb02 3000 	mla	r0, r2, r0, r3
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	7402      	strb	r2, [r0, #16]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000aa0:	781a      	ldrb	r2, [r3, #0]
 8000aa2:	2a06      	cmp	r2, #6
 8000aa4:	d104      	bne.n	8000ab0 <UnlinkTimer+0x38>
 8000aa6:	b919      	cbnz	r1, 8000ab0 <UnlinkTimer+0x38>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  return;
}
 8000ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    previous_id = aTimerContext[TimerID].PreviousID;
 8000ab2:	fb04 3500 	mla	r5, r4, r0, r3
 8000ab6:	7e2e      	ldrb	r6, [r5, #24]
    next_id = aTimerContext[TimerID].NextID;
 8000ab8:	7e6a      	ldrb	r2, [r5, #25]
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000aba:	7e6f      	ldrb	r7, [r5, #25]
 8000abc:	fb04 3606 	mla	r6, r4, r6, r3
    next_id = aTimerContext[TimerID].NextID;
 8000ac0:	b2d2      	uxtb	r2, r2
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000ac2:	b2ff      	uxtb	r7, r7
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ac4:	2a06      	cmp	r2, #6
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000ac6:	7677      	strb	r7, [r6, #25]
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000ac8:	bf1f      	itttt	ne
 8000aca:	7e2d      	ldrbne	r5, [r5, #24]
 8000acc:	fb04 3202 	mlane	r2, r4, r2, r3
 8000ad0:	b2ed      	uxtbne	r5, r5
 8000ad2:	7615      	strbne	r5, [r2, #24]
 8000ad4:	e7df      	b.n	8000a96 <UnlinkTimer+0x1e>
 8000ad6:	bf00      	nop
 8000ad8:	2000009c 	.word	0x2000009c

08000adc <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000adc:	b510      	push	{r4, lr}
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000ade:	4c0d      	ldr	r4, [pc, #52]	; (8000b14 <ReturnTimeElapsed+0x38>)
 8000ae0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	d013      	beq.n	8000b10 <ReturnTimeElapsed+0x34>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000ae8:	f7ff ffb8 	bl	8000a5c <ReadRtcSsrValue>

    if (SSRValueOnLastSetup >= return_value)
 8000aec:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000af0:	4283      	cmp	r3, r0
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <ReturnTimeElapsed+0x3c>)
      return_value = SSRValueOnLastSetup - return_value;
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000af4:	bf3b      	ittet	cc
 8000af6:	f8d4 1094 	ldrcc.w	r1, [r4, #148]	; 0x94
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000afa:	881a      	ldrhcc	r2, [r3, #0]
      return_value = SSRValueOnLastSetup - return_value;
 8000afc:	f8d4 2094 	ldrcs.w	r2, [r4, #148]	; 0x94
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000b00:	1852      	addcc	r2, r2, r1
 8000b02:	1a10      	subs	r0, r2, r0

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000b04:	789a      	ldrb	r2, [r3, #2]
    return_value = return_value >> WakeupTimerDivider;
 8000b06:	78db      	ldrb	r3, [r3, #3]
    return_value = return_value*AsynchPrescalerUserConfig;
 8000b08:	4350      	muls	r0, r2
    return_value = return_value >> WakeupTimerDivider;
 8000b0a:	40d8      	lsrs	r0, r3
  {
    return_value = 0;
  }

  return (uint16_t)return_value;
}
 8000b0c:	b280      	uxth	r0, r0
 8000b0e:	bd10      	pop	{r4, pc}
    return_value = 0;
 8000b10:	2000      	movs	r0, #0
 8000b12:	e7fb      	b.n	8000b0c <ReturnTimeElapsed+0x30>
 8000b14:	2000009c 	.word	0x2000009c
 8000b18:	200001a4 	.word	0x200001a4

08000b1c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b20:	4e3d      	ldr	r6, [pc, #244]	; (8000c18 <RescheduleTimerList+0xfc>)

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000b22:	4b3e      	ldr	r3, [pc, #248]	; (8000c1c <RescheduleTimerList+0x100>)
 8000b24:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8000b28:	689a      	ldr	r2, [r3, #8]
 8000b2a:	f8d8 3000 	ldr.w	r3, [r8]
 8000b2e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000b32:	d003      	beq.n	8000b3c <RescheduleTimerList+0x20>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000b34:	68da      	ldr	r2, [r3, #12]
 8000b36:	f012 0f04 	tst.w	r2, #4
 8000b3a:	e7fa      	b.n	8000b32 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000b3c:	689a      	ldr	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000b3e:	4d38      	ldr	r5, [pc, #224]	; (8000c20 <RescheduleTimerList+0x104>)
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b44:	609a      	str	r2, [r3, #8]
  localTimerID = CurrentRunningTimerID;
 8000b46:	782f      	ldrb	r7, [r5, #0]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000b48:	2318      	movs	r3, #24
  localTimerID = CurrentRunningTimerID;
 8000b4a:	b2ff      	uxtb	r7, r7
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000b4c:	fb03 5307 	mla	r3, r3, r7, r5
 8000b50:	68dc      	ldr	r4, [r3, #12]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000b52:	f7ff ffc3 	bl	8000adc <ReturnTimeElapsed>

  if(timecountleft < time_elapsed )
 8000b56:	42a0      	cmp	r0, r4
 8000b58:	d907      	bls.n	8000b6a <RescheduleTimerList+0x4e>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	f885 3098 	strb.w	r3, [r5, #152]	; 0x98
    wakeup_timer_value = 0;
 8000b60:	2300      	movs	r3, #0
  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000b62:	2418      	movs	r4, #24
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000b64:	f04f 0c00 	mov.w	ip, #0
 8000b68:	e01b      	b.n	8000ba2 <RescheduleTimerList+0x86>
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000b6a:	8933      	ldrh	r3, [r6, #8]
 8000b6c:	4403      	add	r3, r0
 8000b6e:	42a3      	cmp	r3, r4
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000b70:	bf39      	ittee	cc
 8000b72:	8933      	ldrhcc	r3, [r6, #8]
      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000b74:	2200      	movcc	r2, #0
      wakeup_timer_value = timecountleft - time_elapsed;
 8000b76:	1a23      	subcs	r3, r4, r0
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000b78:	2201      	movcs	r2, #1
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000b7a:	bf34      	ite	cc
 8000b7c:	b29b      	uxthcc	r3, r3
      wakeup_timer_value = timecountleft - time_elapsed;
 8000b7e:	b29b      	uxthcs	r3, r3
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000b80:	f885 2098 	strb.w	r2, [r5, #152]	; 0x98
 8000b84:	e7ed      	b.n	8000b62 <RescheduleTimerList+0x46>
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000b86:	fb04 5207 	mla	r2, r4, r7, r5
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000b8a:	fb04 5707 	mla	r7, r4, r7, r5
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000b8e:	68d1      	ldr	r1, [r2, #12]
 8000b90:	4288      	cmp	r0, r1
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000b92:	bf97      	itett	ls
 8000b94:	68d1      	ldrls	r1, [r2, #12]
      aTimerContext[localTimerID].CountLeft = 0;
 8000b96:	f8c2 c00c 	strhi.w	ip, [r2, #12]
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000b9a:	1a09      	subls	r1, r1, r0
 8000b9c:	60d1      	strls	r1, [r2, #12]
    localTimerID = aTimerContext[localTimerID].NextID;
 8000b9e:	7e7f      	ldrb	r7, [r7, #25]
 8000ba0:	b2ff      	uxtb	r7, r7
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ba2:	2f06      	cmp	r7, #6
 8000ba4:	d1ef      	bne.n	8000b86 <RescheduleTimerList+0x6a>
  if(Value == 0)
 8000ba6:	b943      	cbnz	r3, 8000bba <RescheduleTimerList+0x9e>
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ba8:	f7ff ff58 	bl	8000a5c <ReadRtcSsrValue>
 8000bac:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000bb0:	2003      	movs	r0, #3
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);

  return ;
}
 8000bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000bb6:	f001 b9d9 	b.w	8001f6c <HAL_NVIC_SetPendingIRQ>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d802      	bhi.n	8000bc4 <RescheduleTimerList+0xa8>
 8000bbe:	78f2      	ldrb	r2, [r6, #3]
 8000bc0:	2a01      	cmp	r2, #1
 8000bc2:	d026      	beq.n	8000c12 <RescheduleTimerList+0xf6>
      Value -= 1;
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	b29c      	uxth	r4, r3
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8000bcc:	68da      	ldr	r2, [r3, #12]
 8000bce:	0752      	lsls	r2, r2, #29
 8000bd0:	d5fc      	bpl.n	8000bcc <RescheduleTimerList+0xb0>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000bd2:	68d9      	ldr	r1, [r3, #12]
 8000bd4:	b2c9      	uxtb	r1, r1
 8000bd6:	f461 6190 	orn	r1, r1, #1152	; 0x480
 8000bda:	60d9      	str	r1, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <RescheduleTimerList+0x108>)
 8000bde:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000be2:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000be4:	2003      	movs	r0, #3
 8000be6:	f001 f9d1 	bl	8001f8c <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <RescheduleTimerList+0x100>)
 8000bec:	695a      	ldr	r2, [r3, #20]
 8000bee:	0c12      	lsrs	r2, r2, #16
 8000bf0:	0412      	lsls	r2, r2, #16
 8000bf2:	4322      	orrs	r2, r4
 8000bf4:	615a      	str	r2, [r3, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000bf6:	f7ff ff31 	bl	8000a5c <ReadRtcSsrValue>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000bfa:	6873      	ldr	r3, [r6, #4]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000bfc:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	6893      	ldr	r3, [r2, #8]
 8000c04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c08:	6093      	str	r3, [r2, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000c0a:	f3af 8000 	nop.w
}
 8000c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000c12:	4614      	mov	r4, r2
 8000c14:	e7d8      	b.n	8000bc8 <RescheduleTimerList+0xac>
 8000c16:	bf00      	nop
 8000c18:	200001a4 	.word	0x200001a4
 8000c1c:	40002800 	.word	0x40002800
 8000c20:	2000009c 	.word	0x2000009c
 8000c24:	58000800 	.word	0x58000800

08000c28 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000c28:	b570      	push	{r4, r5, r6, lr}
   * Get RTC handler
   */
  phrtc = hrtc;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000c2a:	680d      	ldr	r5, [r1, #0]

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000c2c:	4e3e      	ldr	r6, [pc, #248]	; (8000d28 <HW_TS_Init+0x100>)
  phrtc = hrtc;
 8000c2e:	4c3f      	ldr	r4, [pc, #252]	; (8000d2c <HW_TS_Init+0x104>)
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000c30:	23ca      	movs	r3, #202	; 0xca
 8000c32:	626b      	str	r3, [r5, #36]	; 0x24
 8000c34:	2353      	movs	r3, #83	; 0x53
 8000c36:	626b      	str	r3, [r5, #36]	; 0x24
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000c38:	68b3      	ldr	r3, [r6, #8]
  phrtc = hrtc;
 8000c3a:	6061      	str	r1, [r4, #4]
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000c3c:	f043 0320 	orr.w	r3, r3, #32
 8000c40:	60b3      	str	r3, [r6, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000c42:	68b3      	ldr	r3, [r6, #8]
 8000c44:	f003 0307 	and.w	r3, r3, #7
 8000c48:	f1c3 0304 	rsb	r3, r3, #4
 8000c4c:	b2d9      	uxtb	r1, r3
 8000c4e:	70e1      	strb	r1, [r4, #3]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000c50:	6932      	ldr	r2, [r6, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c52:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
 8000c56:	fa93 f3a3 	rbit	r3, r3
 8000c5a:	fab3 f383 	clz	r3, r3
 8000c5e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8000c62:	40da      	lsrs	r2, r3
 8000c64:	3201      	adds	r2, #1
 8000c66:	b2d2      	uxtb	r2, r2
 8000c68:	70a2      	strb	r2, [r4, #2]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000c6a:	6933      	ldr	r3, [r6, #16]
 8000c6c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000c70:	3301      	adds	r3, #1
 8000c72:	8023      	strh	r3, [r4, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000c74:	3b01      	subs	r3, #1
 8000c76:	4353      	muls	r3, r2
 8000c78:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000c7c:	40cb      	lsrs	r3, r1

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000c7e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c82:	4293      	cmp	r3, r2
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000c84:	bf88      	it	hi
 8000c86:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000c8a:	4a29      	ldr	r2, [pc, #164]	; (8000d30 <HW_TS_Init+0x108>)
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000c8c:	bf98      	it	ls
 8000c8e:	b29b      	uxthls	r3, r3
 8000c90:	8123      	strh	r3, [r4, #8]
 8000c92:	6813      	ldr	r3, [r2, #0]
 8000c94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c98:	6013      	str	r3, [r2, #0]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000c9a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8000c9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ca2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	d137      	bne.n	8000d1a <HW_TS_Init+0xf2>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000caa:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <HW_TS_Init+0x10c>)
 8000cac:	2101      	movs	r1, #1
 8000cae:	f883 1098 	strb.w	r1, [r3, #152]	; 0x98
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000cb2:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000cba:	2106      	movs	r1, #6
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000cbc:	7418      	strb	r0, [r3, #16]
 8000cbe:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
 8000cc2:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
 8000cc6:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
 8000cca:	f883 0070 	strb.w	r0, [r3, #112]	; 0x70
 8000cce:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000cd2:	7019      	strb	r1, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000cd4:	68ab      	ldr	r3, [r5, #8]
 8000cd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000cda:	60ab      	str	r3, [r5, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000cdc:	68eb      	ldr	r3, [r5, #12]
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8000ce4:	60eb      	str	r3, [r5, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000ce6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000cea:	60d3      	str	r3, [r2, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000cec:	2003      	movs	r0, #3
 8000cee:	f001 f94d 	bl	8001f8c <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000cf2:	6863      	ldr	r3, [r4, #4]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	6893      	ldr	r3, [r2, #8]
 8000cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cfc:	6093      	str	r3, [r2, #8]
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000cfe:	6863      	ldr	r3, [r4, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	22ff      	movs	r2, #255	; 0xff

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000d04:	2103      	movs	r1, #3
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000d06:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000d08:	4608      	mov	r0, r1
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f001 f8c2 	bl	8001e94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000d10:	2003      	movs	r0, #3

  return;
}
 8000d12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000d16:	f001 b8f1 	b.w	8001efc <HAL_NVIC_EnableIRQ>
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000d1a:	68eb      	ldr	r3, [r5, #12]
 8000d1c:	055b      	lsls	r3, r3, #21
 8000d1e:	d5ee      	bpl.n	8000cfe <HW_TS_Init+0xd6>
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f001 f923 	bl	8001f6c <HAL_NVIC_SetPendingIRQ>
 8000d26:	e7ea      	b.n	8000cfe <HW_TS_Init+0xd6>
 8000d28:	40002800 	.word	0x40002800
 8000d2c:	200001a4 	.word	0x200001a4
 8000d30:	58000800 	.word	0x58000800
 8000d34:	2000009c 	.word	0x2000009c

08000d38 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8000d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d3c:	4680      	mov	r8, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d3e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8000d42:	b672      	cpsid	i
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d44:	4c23      	ldr	r4, [pc, #140]	; (8000dd4 <HW_TS_Stop+0x9c>)

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000d46:	4e24      	ldr	r6, [pc, #144]	; (8000dd8 <HW_TS_Stop+0xa0>)
  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000d48:	2003      	movs	r0, #3
 8000d4a:	f001 f8e5 	bl	8001f18 <HAL_NVIC_DisableIRQ>
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d4e:	6867      	ldr	r7, [r4, #4]
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	22ca      	movs	r2, #202	; 0xca
 8000d54:	625a      	str	r2, [r3, #36]	; 0x24
 8000d56:	2253      	movs	r2, #83	; 0x53
 8000d58:	625a      	str	r2, [r3, #36]	; 0x24
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000d5a:	2318      	movs	r3, #24
 8000d5c:	fb03 6308 	mla	r3, r3, r8, r6
 8000d60:	7c1b      	ldrb	r3, [r3, #16]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d124      	bne.n	8000db0 <HW_TS_Stop+0x78>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8000d66:	2100      	movs	r1, #0
 8000d68:	4640      	mov	r0, r8
 8000d6a:	f7ff fe85 	bl	8000a78 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8000d6e:	7833      	ldrb	r3, [r6, #0]
 8000d70:	b2db      	uxtb	r3, r3

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d127      	bne.n	8000dc6 <HW_TS_Stop+0x8e>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <HW_TS_Stop+0xa4>)
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000d80:	d003      	beq.n	8000d8a <HW_TS_Stop+0x52>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000d82:	68da      	ldr	r2, [r3, #12]
 8000d84:	f012 0f04 	tst.w	r2, #4
 8000d88:	e7fa      	b.n	8000d80 <HW_TS_Stop+0x48>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d90:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000d92:	68da      	ldr	r2, [r3, #12]
 8000d94:	0752      	lsls	r2, r2, #29
 8000d96:	d5fc      	bpl.n	8000d92 <HW_TS_Stop+0x5a>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000da0:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <HW_TS_Stop+0xa8>)
 8000da4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000da8:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000daa:	2003      	movs	r0, #3
 8000dac:	f001 f8ee 	bl	8001f8c <HAL_NVIC_ClearPendingIRQ>
      RescheduleTimerList();
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000db0:	6863      	ldr	r3, [r4, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	22ff      	movs	r2, #255	; 0xff
 8000db6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000db8:	2003      	movs	r0, #3
 8000dba:	f001 f89f 	bl	8001efc <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000dbe:	f385 8810 	msr	PRIMASK, r5
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 8000dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000dc6:	7872      	ldrb	r2, [r6, #1]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d0f1      	beq.n	8000db0 <HW_TS_Stop+0x78>
      RescheduleTimerList();
 8000dcc:	f7ff fea6 	bl	8000b1c <RescheduleTimerList>
 8000dd0:	e7ee      	b.n	8000db0 <HW_TS_Stop+0x78>
 8000dd2:	bf00      	nop
 8000dd4:	200001a4 	.word	0x200001a4
 8000dd8:	2000009c 	.word	0x2000009c
 8000ddc:	40002800 	.word	0x40002800
 8000de0:	58000800 	.word	0x58000800

08000de4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8000de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000de8:	4c4b      	ldr	r4, [pc, #300]	; (8000f18 <HW_TS_Start+0x134>)
 8000dea:	2318      	movs	r3, #24
 8000dec:	fb03 4300 	mla	r3, r3, r0, r4
{
 8000df0:	4605      	mov	r5, r0
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000df2:	7c1b      	ldrb	r3, [r3, #16]
 8000df4:	2b02      	cmp	r3, #2
{
 8000df6:	460f      	mov	r7, r1
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000df8:	d101      	bne.n	8000dfe <HW_TS_Start+0x1a>
  {
    HW_TS_Stop( timer_id );
 8000dfa:	f7ff ff9d 	bl	8000d38 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000dfe:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8000e02:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000e04:	2003      	movs	r0, #3
 8000e06:	f001 f887 	bl	8001f18 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e0a:	4a44      	ldr	r2, [pc, #272]	; (8000f1c <HW_TS_Start+0x138>)
 8000e0c:	6853      	ldr	r3, [r2, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	21ca      	movs	r1, #202	; 0xca

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8000e12:	2618      	movs	r6, #24
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e14:	6259      	str	r1, [r3, #36]	; 0x24
  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8000e16:	fb06 4905 	mla	r9, r6, r5, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e1a:	2153      	movs	r1, #83	; 0x53
 8000e1c:	6259      	str	r1, [r3, #36]	; 0x24
  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	f889 3010 	strb.w	r3, [r9, #16]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8000e24:	f8c9 700c 	str.w	r7, [r9, #12]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8000e28:	f8c9 7008 	str.w	r7, [r9, #8]
  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e2c:	7823      	ldrb	r3, [r4, #0]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b06      	cmp	r3, #6
 8000e32:	4617      	mov	r7, r2
 8000e34:	d11b      	bne.n	8000e6e <HW_TS_Start+0x8a>
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000e36:	7822      	ldrb	r2, [r4, #0]
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	7062      	strb	r2, [r4, #1]
    CurrentRunningTimerID = TimerID;
 8000e3c:	7025      	strb	r5, [r4, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000e3e:	f889 3019 	strb.w	r3, [r9, #25]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
 8000e46:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    time_elapsed = 0;
 8000e4a:	2000      	movs	r0, #0

  time_elapsed =  linkTimer(timer_id);

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8000e4c:	7823      	ldrb	r3, [r4, #0]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000e4e:	7862      	ldrb	r2, [r4, #1]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d05a      	beq.n	8000f0a <HW_TS_Start+0x126>
  {
    RescheduleTimerList();
 8000e54:	f7ff fe62 	bl	8000b1c <RescheduleTimerList>
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	22ff      	movs	r2, #255	; 0xff
 8000e5e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000e60:	2003      	movs	r0, #3
 8000e62:	f001 f84b 	bl	8001efc <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e66:	f388 8810 	msr	PRIMASK, r8
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 8000e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    time_elapsed = ReturnTimeElapsed();
 8000e6e:	f7ff fe35 	bl	8000adc <ReturnTimeElapsed>
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000e72:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8000e76:	4403      	add	r3, r0
 8000e78:	f8c9 300c 	str.w	r3, [r9, #12]
    time_left = aTimerContext[TimerID].CountLeft;
 8000e7c:	f8d9 100c 	ldr.w	r1, [r9, #12]
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000e80:	7823      	ldrb	r3, [r4, #0]
 8000e82:	fb06 4303 	mla	r3, r6, r3, r4
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	d323      	bcc.n	8000ed4 <HW_TS_Start+0xf0>
      timer_id_lookup = CurrentRunningTimerID;
 8000e8c:	7823      	ldrb	r3, [r4, #0]
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000e8e:	b2db      	uxtb	r3, r3
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000e90:	fb06 4203 	mla	r2, r6, r3, r4
 8000e94:	7e52      	ldrb	r2, [r2, #25]
 8000e96:	b2d2      	uxtb	r2, r2
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000e98:	2a06      	cmp	r2, #6
 8000e9a:	d004      	beq.n	8000ea6 <HW_TS_Start+0xc2>
 8000e9c:	fb06 4202 	mla	r2, r6, r2, r4
 8000ea0:	68d2      	ldr	r2, [r2, #12]
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d212      	bcs.n	8000ecc <HW_TS_Start+0xe8>
  next_id = aTimerContext[RefTimerID].NextID;
 8000ea6:	2118      	movs	r1, #24
 8000ea8:	fb01 4203 	mla	r2, r1, r3, r4
 8000eac:	7e52      	ldrb	r2, [r2, #25]
 8000eae:	b2d2      	uxtb	r2, r2
  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000eb0:	2a06      	cmp	r2, #6
    aTimerContext[next_id].PreviousID = TimerID;
 8000eb2:	bf1c      	itt	ne
 8000eb4:	fb01 4102 	mlane	r1, r1, r2, r4
 8000eb8:	760d      	strbne	r5, [r1, #24]
  aTimerContext[TimerID].NextID = next_id;
 8000eba:	2118      	movs	r1, #24
 8000ebc:	fb01 4605 	mla	r6, r1, r5, r4
 8000ec0:	7672      	strb	r2, [r6, #25]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000ec2:	7633      	strb	r3, [r6, #24]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000ec4:	fb01 4303 	mla	r3, r1, r3, r4
 8000ec8:	765d      	strb	r5, [r3, #25]
 8000eca:	e7bf      	b.n	8000e4c <HW_TS_Start+0x68>
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000ecc:	fb06 4303 	mla	r3, r6, r3, r4
 8000ed0:	7e5b      	ldrb	r3, [r3, #25]
 8000ed2:	e7dc      	b.n	8000e8e <HW_TS_Start+0xaa>
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000ed4:	7822      	ldrb	r2, [r4, #0]
  if(RefTimerID != CurrentRunningTimerID)
 8000ed6:	7823      	ldrb	r3, [r4, #0]
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000ed8:	b2d2      	uxtb	r2, r2
  if(RefTimerID != CurrentRunningTimerID)
 8000eda:	429a      	cmp	r2, r3
 8000edc:	fb06 f302 	mul.w	r3, r6, r2
 8000ee0:	d00f      	beq.n	8000f02 <HW_TS_Start+0x11e>
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000ee2:	4423      	add	r3, r4
 8000ee4:	7e19      	ldrb	r1, [r3, #24]
 8000ee6:	b2c9      	uxtb	r1, r1
    aTimerContext[previous_id].NextID = TimerID;
 8000ee8:	fb06 4601 	mla	r6, r6, r1, r4
 8000eec:	7675      	strb	r5, [r6, #25]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000eee:	f889 2019 	strb.w	r2, [r9, #25]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000ef2:	f889 1018 	strb.w	r1, [r9, #24]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000ef6:	761d      	strb	r5, [r3, #24]
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000ef8:	7823      	ldrb	r3, [r4, #0]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	7063      	strb	r3, [r4, #1]
      CurrentRunningTimerID = TimerID;
 8000efe:	7025      	strb	r5, [r4, #0]
 8000f00:	e7a4      	b.n	8000e4c <HW_TS_Start+0x68>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000f02:	f889 2019 	strb.w	r2, [r9, #25]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000f06:	4423      	add	r3, r4
 8000f08:	e7f5      	b.n	8000ef6 <HW_TS_Start+0x112>
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8000f0a:	2318      	movs	r3, #24
 8000f0c:	fb03 4405 	mla	r4, r3, r5, r4
 8000f10:	68e3      	ldr	r3, [r4, #12]
 8000f12:	1a18      	subs	r0, r3, r0
 8000f14:	60e0      	str	r0, [r4, #12]
 8000f16:	e79f      	b.n	8000e58 <HW_TS_Start+0x74>
 8000f18:	2000009c 	.word	0x2000009c
 8000f1c:	200001a4 	.word	0x200001a4

08000f20 <HW_TS_RTC_Int_AppNot>:
  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
  pTimerCallBack();
 8000f20:	4710      	bx	r2
	...

08000f24 <HW_TS_RTC_Wakeup_Handler>:
{
 8000f24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f28:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2c:	b672      	cpsid	i
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f2e:	4e2a      	ldr	r6, [pc, #168]	; (8000fd8 <HW_TS_RTC_Wakeup_Handler+0xb4>)
 8000f30:	6873      	ldr	r3, [r6, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f04f 0bca 	mov.w	fp, #202	; 0xca
 8000f38:	f04f 0853 	mov.w	r8, #83	; 0x53
 8000f3c:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
 8000f40:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000f44:	689a      	ldr	r2, [r3, #8]
 8000f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f4a:	609a      	str	r2, [r3, #8]
  local_current_running_timer_id = CurrentRunningTimerID;
 8000f4c:	4a23      	ldr	r2, [pc, #140]	; (8000fdc <HW_TS_RTC_Wakeup_Handler+0xb8>)
 8000f4e:	7814      	ldrb	r4, [r2, #0]
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000f50:	2518      	movs	r5, #24
  local_current_running_timer_id = CurrentRunningTimerID;
 8000f52:	b2e4      	uxtb	r4, r4
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000f54:	fb05 2504 	mla	r5, r5, r4, r2
 8000f58:	7c29      	ldrb	r1, [r5, #16]
 8000f5a:	2902      	cmp	r1, #2
 8000f5c:	d12f      	bne.n	8000fbe <HW_TS_RTC_Wakeup_Handler+0x9a>
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000f5e:	f8d5 a004 	ldr.w	sl, [r5, #4]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000f62:	f8d5 9014 	ldr.w	r9, [r5, #20]
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000f66:	f892 3098 	ldrb.w	r3, [r2, #152]	; 0x98
 8000f6a:	b31b      	cbz	r3, 8000fb4 <HW_TS_RTC_Wakeup_Handler+0x90>
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000f6c:	7c69      	ldrb	r1, [r5, #17]
 8000f6e:	b2c9      	uxtb	r1, r1
 8000f70:	2901      	cmp	r1, #1
 8000f72:	d119      	bne.n	8000fa8 <HW_TS_RTC_Wakeup_Handler+0x84>
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000f74:	4620      	mov	r0, r4
 8000f76:	f7ff fd7f 	bl	8000a78 <UnlinkTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f7a:	f387 8810 	msr	PRIMASK, r7
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000f7e:	68a9      	ldr	r1, [r5, #8]
 8000f80:	4620      	mov	r0, r4
 8000f82:	f7ff ff2f 	bl	8000de4 <HW_TS_Start>
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f86:	6873      	ldr	r3, [r6, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000f8a:	4652      	mov	r2, sl
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f8c:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000f90:	4621      	mov	r1, r4
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f92:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000f96:	4648      	mov	r0, r9
 8000f98:	f7ff ffc2 	bl	8000f20 <HW_TS_RTC_Int_AppNot>
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000f9c:	6873      	ldr	r3, [r6, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	22ff      	movs	r2, #255	; 0xff
 8000fa2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000fa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fa8:	f387 8810 	msr	PRIMASK, r7
        HW_TS_Stop(local_current_running_timer_id);
 8000fac:	4620      	mov	r0, r4
 8000fae:	f7ff fec3 	bl	8000d38 <HW_TS_Stop>
 8000fb2:	e7e8      	b.n	8000f86 <HW_TS_RTC_Wakeup_Handler+0x62>
      RescheduleTimerList();
 8000fb4:	f7ff fdb2 	bl	8000b1c <RescheduleTimerList>
 8000fb8:	f387 8810 	msr	PRIMASK, r7
 8000fbc:	e7ee      	b.n	8000f9c <HW_TS_RTC_Wakeup_Handler+0x78>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000fbe:	68da      	ldr	r2, [r3, #12]
 8000fc0:	0752      	lsls	r2, r2, #29
 8000fc2:	d5fc      	bpl.n	8000fbe <HW_TS_RTC_Wakeup_Handler+0x9a>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000fc4:	68da      	ldr	r2, [r3, #12]
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000fcc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <HW_TS_RTC_Wakeup_Handler+0xbc>)
 8000fd0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	e7ef      	b.n	8000fb8 <HW_TS_RTC_Wakeup_Handler+0x94>
 8000fd8:	200001a4 	.word	0x200001a4
 8000fdc:	2000009c 	.word	0x2000009c
 8000fe0:	58000800 	.word	0x58000800

08000fe4 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8000fe4:	b508      	push	{r3, lr}
    HAL_StatusTypeDef hal_status = HAL_OK;
    hw_status_t hw_status = hw_uart_ok;

    switch (hw_uart_id)
 8000fe6:	b108      	cbz	r0, 8000fec <HW_UART_Transmit_DMA+0x8>
    hw_status_t hw_status = hw_uart_ok;
 8000fe8:	2000      	movs	r0, #0
        default:
            break;
    }

    return hw_status;
}
 8000fea:	bd08      	pop	{r3, pc}
            HW_huart1TxCb = cb;
 8000fec:	4806      	ldr	r0, [pc, #24]	; (8001008 <HW_UART_Transmit_DMA+0x24>)
 8000fee:	6003      	str	r3, [r0, #0]
            huart1.Instance = USART1;
 8000ff0:	4806      	ldr	r0, [pc, #24]	; (800100c <HW_UART_Transmit_DMA+0x28>)
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <HW_UART_Transmit_DMA+0x2c>)
 8000ff4:	6003      	str	r3, [r0, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8000ff6:	f002 fcad 	bl	8003954 <HAL_UART_Transmit_DMA>
    switch (hal_status)
 8000ffa:	2802      	cmp	r0, #2
 8000ffc:	d0f5      	beq.n	8000fea <HW_UART_Transmit_DMA+0x6>
 8000ffe:	2803      	cmp	r0, #3
 8001000:	d0f3      	beq.n	8000fea <HW_UART_Transmit_DMA+0x6>
 8001002:	2801      	cmp	r0, #1
 8001004:	d1f0      	bne.n	8000fe8 <HW_UART_Transmit_DMA+0x4>
 8001006:	e7f0      	b.n	8000fea <HW_UART_Transmit_DMA+0x6>
 8001008:	20001300 	.word	0x20001300
 800100c:	20001484 	.word	0x20001484
 8001010:	40013800 	.word	0x40013800

08001014 <HAL_UART_TxCpltCallback>:
    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
    switch ((uint32_t)huart->Instance)
 8001014:	6802      	ldr	r2, [r0, #0]
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <HAL_UART_TxCpltCallback+0x14>)
 8001018:	429a      	cmp	r2, r3
 800101a:	d103      	bne.n	8001024 <HAL_UART_TxCpltCallback+0x10>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <HAL_UART_TxCpltCallback+0x18>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	b103      	cbz	r3, 8001024 <HAL_UART_TxCpltCallback+0x10>
            {
                HW_huart1TxCb();
 8001022:	4718      	bx	r3
        default:
            break;
    }

    return;
}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40013800 	.word	0x40013800
 800102c:	20001300 	.word	0x20001300

08001030 <LL_AHB1_GRP1_EnableClock>:
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8001034:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001036:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001038:	4302      	orrs	r2, r0
 800103a:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800103c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800103e:	4018      	ands	r0, r3
 8001040:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001042:	9b01      	ldr	r3, [sp, #4]
}
 8001044:	b002      	add	sp, #8
 8001046:	4770      	bx	lr

08001048 <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 800104c:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 800104e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001050:	4302      	orrs	r2, r0
 8001052:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001056:	4018      	ands	r0, r3
 8001058:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 800105a:	9b01      	ldr	r3, [sp, #4]
}
 800105c:	b002      	add	sp, #8
 800105e:	4770      	bx	lr

08001060 <user_i2c_write>:

    return rslt;
}

int8_t user_i2c_write(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8001060:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
     * | Write      | (....)              |
     * | Write      | (reg_data[len - 1]) |
     * | Stop       | -                   |
     * |------------+---------------------|
     */
    while(HAL_I2C_Master_Transmit(&hi2c3, (uint16_t)BME280_I2C_ADDR_PRIM, (uint8_t*)reg_addr, len, 1000)!= HAL_OK)
 8001064:	4c12      	ldr	r4, [pc, #72]	; (80010b0 <user_i2c_write+0x50>)
{
 8001066:	4607      	mov	r7, r0
 8001068:	460e      	mov	r6, r1
    while(HAL_I2C_Master_Transmit(&hi2c3, (uint16_t)BME280_I2C_ADDR_PRIM, (uint8_t*)reg_addr, len, 1000)!= HAL_OK)
 800106a:	b295      	uxth	r5, r2
 800106c:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8001070:	f8cd 8000 	str.w	r8, [sp]
 8001074:	462b      	mov	r3, r5
 8001076:	463a      	mov	r2, r7
 8001078:	2176      	movs	r1, #118	; 0x76
 800107a:	4620      	mov	r0, r4
 800107c:	f001 fb56 	bl	800272c <HAL_I2C_Master_Transmit>
 8001080:	b968      	cbnz	r0, 800109e <user_i2c_write+0x3e>
      {
        Error_Handler();
      }
    }

    while(HAL_I2C_Master_Transmit(&hi2c3, (uint16_t)BME280_I2C_ADDR_PRIM, (uint8_t*)reg_data, len, 1000)!= HAL_OK)
 8001082:	4c0b      	ldr	r4, [pc, #44]	; (80010b0 <user_i2c_write+0x50>)
 8001084:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 8001088:	9700      	str	r7, [sp, #0]
 800108a:	462b      	mov	r3, r5
 800108c:	4632      	mov	r2, r6
 800108e:	2176      	movs	r1, #118	; 0x76
 8001090:	4620      	mov	r0, r4
 8001092:	f001 fb4b 	bl	800272c <HAL_I2C_Master_Transmit>
 8001096:	b930      	cbnz	r0, 80010a6 <user_i2c_write+0x46>
      {
        Error_Handler();
      }
    }
    return rslt;
}
 8001098:	b002      	add	sp, #8
 800109a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (HAL_I2C_GetError(&hi2c3) != HAL_I2C_ERROR_AF)
 800109e:	4620      	mov	r0, r4
 80010a0:	f001 fc68 	bl	8002974 <HAL_I2C_GetError>
 80010a4:	e7e4      	b.n	8001070 <user_i2c_write+0x10>
      if (HAL_I2C_GetError(&hi2c3) != HAL_I2C_ERROR_AF)
 80010a6:	4620      	mov	r0, r4
 80010a8:	f001 fc64 	bl	8002974 <HAL_I2C_GetError>
 80010ac:	e7ec      	b.n	8001088 <user_i2c_write+0x28>
 80010ae:	bf00      	nop
 80010b0:	2000134c 	.word	0x2000134c

080010b4 <user_i2c_read>:
{
 80010b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    while(HAL_I2C_Master_Transmit(&hi2c3, (uint16_t)BME280_I2C_ADDR_PRIM, (uint8_t*)reg_addr, len, 1000)!= HAL_OK)
 80010b8:	4c12      	ldr	r4, [pc, #72]	; (8001104 <user_i2c_read+0x50>)
{
 80010ba:	4607      	mov	r7, r0
 80010bc:	460e      	mov	r6, r1
    while(HAL_I2C_Master_Transmit(&hi2c3, (uint16_t)BME280_I2C_ADDR_PRIM, (uint8_t*)reg_addr, len, 1000)!= HAL_OK)
 80010be:	b295      	uxth	r5, r2
 80010c0:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 80010c4:	f8cd 8000 	str.w	r8, [sp]
 80010c8:	462b      	mov	r3, r5
 80010ca:	463a      	mov	r2, r7
 80010cc:	2176      	movs	r1, #118	; 0x76
 80010ce:	4620      	mov	r0, r4
 80010d0:	f001 fb2c 	bl	800272c <HAL_I2C_Master_Transmit>
 80010d4:	b968      	cbnz	r0, 80010f2 <user_i2c_read+0x3e>
    while(HAL_I2C_Master_Receive(&hi2c3, (uint16_t)BME280_I2C_ADDR_PRIM, (uint8_t *)reg_data, len, 1000) != HAL_OK)
 80010d6:	4c0b      	ldr	r4, [pc, #44]	; (8001104 <user_i2c_read+0x50>)
 80010d8:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 80010dc:	9700      	str	r7, [sp, #0]
 80010de:	462b      	mov	r3, r5
 80010e0:	4632      	mov	r2, r6
 80010e2:	2176      	movs	r1, #118	; 0x76
 80010e4:	4620      	mov	r0, r4
 80010e6:	f001 fbb3 	bl	8002850 <HAL_I2C_Master_Receive>
 80010ea:	b930      	cbnz	r0, 80010fa <user_i2c_read+0x46>
}
 80010ec:	b002      	add	sp, #8
 80010ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (HAL_I2C_GetError(&hi2c3) != HAL_I2C_ERROR_AF)
 80010f2:	4620      	mov	r0, r4
 80010f4:	f001 fc3e 	bl	8002974 <HAL_I2C_GetError>
 80010f8:	e7e4      	b.n	80010c4 <user_i2c_read+0x10>
      if (HAL_I2C_GetError(&hi2c3) != HAL_I2C_ERROR_AF)
 80010fa:	4620      	mov	r0, r4
 80010fc:	f001 fc3a 	bl	8002974 <HAL_I2C_GetError>
 8001100:	e7ec      	b.n	80010dc <user_i2c_read+0x28>
 8001102:	bf00      	nop
 8001104:	2000134c 	.word	0x2000134c

08001108 <SystemClock_Config>:
{
 8001108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110a:	b0af      	sub	sp, #188	; 0xbc
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110c:	2248      	movs	r2, #72	; 0x48
 800110e:	2100      	movs	r1, #0
 8001110:	a808      	add	r0, sp, #32
 8001112:	f004 fc38 	bl	8005986 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001116:	221c      	movs	r2, #28
 8001118:	2100      	movs	r1, #0
 800111a:	a801      	add	r0, sp, #4
 800111c:	f004 fc33 	bl	8005986 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001120:	2100      	movs	r1, #0
 8001122:	2250      	movs	r2, #80	; 0x50
 8001124:	a81a      	add	r0, sp, #104	; 0x68
 8001126:	f004 fc2e 	bl	8005986 <memset>
  HAL_PWR_EnableBkUpAccess();
 800112a:	f001 fc71 	bl	8002a10 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800112e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001132:	2400      	movs	r4, #0
 8001134:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001138:	f023 0318 	bic.w	r3, r3, #24
 800113c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001140:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8001144:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001148:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800114c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8001150:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001154:	9413      	str	r4, [sp, #76]	; 0x4c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001156:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800115a:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800115c:	2207      	movs	r2, #7
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800115e:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001160:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001164:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001168:	2701      	movs	r7, #1
 800116a:	f44f 7680 	mov.w	r6, #256	; 0x100
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800116e:	2340      	movs	r3, #64	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001170:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001172:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001174:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001176:	e9cd 760a 	strd	r7, r6, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117a:	f001 fcf5 	bl	8002b68 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800117e:	236f      	movs	r3, #111	; 0x6f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001180:	4639      	mov	r1, r7
 8001182:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001184:	e9cd 3501 	strd	r3, r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001188:	e9cd 4403 	strd	r4, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800118c:	e9cd 4405 	strd	r4, r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001190:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001192:	f001 ffc1 	bl	8003118 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001196:	f643 030b 	movw	r3, #14347	; 0x380b
 800119a:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800119c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80011a0:	9323      	str	r3, [sp, #140]	; 0x8c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80011a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80011a6:	e9cd 352b 	strd	r3, r5, [sp, #172]	; 0xac
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011aa:	a81a      	add	r0, sp, #104	; 0x68
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80011ac:	2310      	movs	r3, #16
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80011ae:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80011b2:	962a      	str	r6, [sp, #168]	; 0xa8
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80011b4:	932d      	str	r3, [sp, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b6:	f002 f950 	bl	800345a <HAL_RCCEx_PeriphCLKConfig>
}
 80011ba:	b02f      	add	sp, #188	; 0xbc
 80011bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080011c0 <MX_USART1_UART_Init>:
{
 80011c0:	b538      	push	{r3, r4, r5, lr}
  huart1.Init.BaudRate = 115200;
 80011c2:	4a11      	ldr	r2, [pc, #68]	; (8001208 <MX_USART1_UART_Init+0x48>)
  huart1.Instance = USART1;
 80011c4:	4c11      	ldr	r4, [pc, #68]	; (800120c <MX_USART1_UART_Init+0x4c>)
  huart1.Init.BaudRate = 115200;
 80011c6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ca:	2500      	movs	r5, #0
  huart1.Init.BaudRate = 115200;
 80011cc:	e9c4 2300 	strd	r2, r3, [r4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011d0:	230c      	movs	r3, #12
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d2:	e9c4 3505 	strd	r3, r5, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011d6:	4620      	mov	r0, r4
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80011d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011dc:	e9c4 3507 	strd	r3, r5, [r4, #28]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011e0:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011e4:	6125      	str	r5, [r4, #16]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e6:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ea:	f003 fa4d 	bl	8004688 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ee:	4629      	mov	r1, r5
 80011f0:	4620      	mov	r0, r4
 80011f2:	f003 facd 	bl	8004790 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011f6:	4629      	mov	r1, r5
 80011f8:	4620      	mov	r0, r4
 80011fa:	f003 faed 	bl	80047d8 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80011fe:	4620      	mov	r0, r4
}
 8001200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001204:	f003 baa9 	b.w	800475a <HAL_UARTEx_DisableFifoMode>
 8001208:	40013800 	.word	0x40013800
 800120c:	20001484 	.word	0x20001484

08001210 <HAL_Delay>:
{
 8001210:	b570      	push	{r4, r5, r6, lr}
 8001212:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001214:	f000 fe0a 	bl	8001e2c <HAL_GetTick>
  if (wait < HAL_MAX_DELAY)
 8001218:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800121a:	4606      	mov	r6, r0
  if (wait < HAL_MAX_DELAY)
 800121c:	d002      	beq.n	8001224 <HAL_Delay+0x14>
    wait += HAL_GetTickFreq();
 800121e:	f000 fe11 	bl	8001e44 <HAL_GetTickFreq>
 8001222:	4404      	add	r4, r0
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001224:	4d06      	ldr	r5, [pc, #24]	; (8001240 <HAL_Delay+0x30>)
 8001226:	e004      	b.n	8001232 <HAL_Delay+0x22>
 8001228:	692b      	ldr	r3, [r5, #16]
 800122a:	f023 0304 	bic.w	r3, r3, #4
 800122e:	612b      	str	r3, [r5, #16]
    __WFI( );
 8001230:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001232:	f000 fdfb 	bl	8001e2c <HAL_GetTick>
 8001236:	1b80      	subs	r0, r0, r6
 8001238:	42a0      	cmp	r0, r4
 800123a:	d3f5      	bcc.n	8001228 <HAL_Delay+0x18>
}
 800123c:	bd70      	pop	{r4, r5, r6, pc}
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <user_delay_ms>:
	HAL_Delay(period / 1000000);
 8001244:	4b02      	ldr	r3, [pc, #8]	; (8001250 <user_delay_ms+0xc>)
 8001246:	fbb0 f0f3 	udiv	r0, r0, r3
 800124a:	f7ff bfe1 	b.w	8001210 <HAL_Delay>
 800124e:	bf00      	nop
 8001250:	000f4240 	.word	0x000f4240

08001254 <main>:
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001254:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
{
 8001258:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 800125a:	f000 fdc5 	bl	8001de8 <HAL_Init>
 800125e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001262:	015d      	lsls	r5, r3, #5
 8001264:	d513      	bpl.n	800128e <main+0x3a>
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8001266:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800126a:	00d8      	lsls	r0, r3, #3
 800126c:	d40f      	bmi.n	800128e <main+0x3a>
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800126e:	f001 fbcf 	bl	8002a10 <HAL_PWR_EnableBkUpAccess>
		HAL_PWR_EnableBkUpAccess();
 8001272:	f001 fbcd 	bl	8002a10 <HAL_PWR_EnableBkUpAccess>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001276:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800127a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001282:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800128a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  SET_BIT(RCC->AHB3ENR, Periphs);
 800128e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001292:	223f      	movs	r2, #63	; 0x3f
 8001294:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001296:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800129a:	6523      	str	r3, [r4, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800129c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800129e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80012a4:	9b01      	ldr	r3, [sp, #4]
 80012a6:	4b56      	ldr	r3, [pc, #344]	; (8001400 <main+0x1ac>)
 80012a8:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C2SCR, Channel);
 80012aa:	619a      	str	r2, [r3, #24]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	f442 127c 	orr.w	r2, r2, #4128768	; 0x3f0000
 80012b2:	605a      	str	r2, [r3, #4]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	f442 127c 	orr.w	r2, r2, #4128768	; 0x3f0000
 80012ba:	615a      	str	r2, [r3, #20]
  SET_BIT(IPCCx->C1MR, Channel);
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80012c2:	605a      	str	r2, [r3, #4]
  SET_BIT(IPCCx->C2MR, Channel);
 80012c4:	695a      	ldr	r2, [r3, #20]
 80012c6:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80012ca:	615a      	str	r2, [r3, #20]
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80012cc:	2000      	movs	r0, #0
 80012ce:	f003 fdc3 	bl	8004e58 <OTP_Read>
  if (p_otp)
 80012d2:	b158      	cbz	r0, 80012ec <main+0x98>
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80012d4:	4b4b      	ldr	r3, [pc, #300]	; (8001404 <main+0x1b0>)
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80012d6:	7982      	ldrb	r2, [r0, #6]
 80012d8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80012dc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80012e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80012e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80012e8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  SystemClock_Config();
 80012ec:	f7ff ff0c 	bl	8001108 <SystemClock_Config>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80012f0:	4b45      	ldr	r3, [pc, #276]	; (8001408 <main+0x1b4>)
  hrtc.Instance = RTC;
 80012f2:	4d46      	ldr	r5, [pc, #280]	; (800140c <main+0x1b8>)
 80012f4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80012f8:	2400      	movs	r4, #0
 80012fa:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80012fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001302:	f002 0250 	and.w	r2, r2, #80	; 0x50
 8001306:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130a:	2004      	movs	r0, #4
 800130c:	f7ff fe9c 	bl	8001048 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001310:	2001      	movs	r0, #1
 8001312:	f7ff fe99 	bl	8001048 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	2002      	movs	r0, #2
 8001318:	f7ff fe96 	bl	8001048 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800131c:	2004      	movs	r0, #4
 800131e:	f7ff fe87 	bl	8001030 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001322:	2001      	movs	r0, #1
 8001324:	f7ff fe84 	bl	8001030 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001328:	2002      	movs	r0, #2
 800132a:	f7ff fe81 	bl	8001030 <LL_AHB1_GRP1_EnableClock>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 800132e:	4622      	mov	r2, r4
 8001330:	210f      	movs	r1, #15
 8001332:	200e      	movs	r0, #14
 8001334:	f000 fdae 	bl	8001e94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001338:	200e      	movs	r0, #14
 800133a:	f000 fddf 	bl	8001efc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 800133e:	210f      	movs	r1, #15
 8001340:	4622      	mov	r2, r4
 8001342:	203a      	movs	r0, #58	; 0x3a
 8001344:	f000 fda6 	bl	8001e94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001348:	203a      	movs	r0, #58	; 0x3a
 800134a:	f000 fdd7 	bl	8001efc <HAL_NVIC_EnableIRQ>
  hrtc.Instance = RTC;
 800134e:	4830      	ldr	r0, [pc, #192]	; (8001410 <main+0x1bc>)
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001350:	220f      	movs	r2, #15
 8001352:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001356:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800135a:	e9c0 5400 	strd	r5, r4, [r0]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800135e:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001360:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001364:	6144      	str	r4, [r0, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001366:	f002 fa6d 	bl	8003844 <HAL_RTC_Init>
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800136a:	23ca      	movs	r3, #202	; 0xca
 800136c:	626b      	str	r3, [r5, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800136e:	2353      	movs	r3, #83	; 0x53
 8001370:	626b      	str	r3, [r5, #36]	; 0x24
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001372:	68ab      	ldr	r3, [r5, #8]
  hi2c3.Init.Timing = 0x00707CBB;
 8001374:	4927      	ldr	r1, [pc, #156]	; (8001414 <main+0x1c0>)
 8001376:	f023 0307 	bic.w	r3, r3, #7
 800137a:	60ab      	str	r3, [r5, #8]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800137c:	23ff      	movs	r3, #255	; 0xff
 800137e:	626b      	str	r3, [r5, #36]	; 0x24
  hi2c3.Instance = I2C3;
 8001380:	4d25      	ldr	r5, [pc, #148]	; (8001418 <main+0x1c4>)
  hi2c3.Init.Timing = 0x00707CBB;
 8001382:	4b26      	ldr	r3, [pc, #152]	; (800141c <main+0x1c8>)
  hi2c3.Init.OwnAddress1 = 0;
 8001384:	60ac      	str	r4, [r5, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001386:	2601      	movs	r6, #1
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001388:	4628      	mov	r0, r5
  hi2c3.Init.Timing = 0x00707CBB;
 800138a:	e9c5 1300 	strd	r1, r3, [r5]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800138e:	e9c5 6403 	strd	r6, r4, [r5, #12]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001392:	e9c5 4405 	strd	r4, r4, [r5, #20]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001396:	e9c5 4407 	strd	r4, r4, [r5, #28]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800139a:	f001 f975 	bl	8002688 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800139e:	4621      	mov	r1, r4
 80013a0:	4628      	mov	r0, r5
 80013a2:	f001 fae9 	bl	8002978 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80013a6:	4621      	mov	r1, r4
 80013a8:	4628      	mov	r0, r5
 80013aa:	f001 fb0b 	bl	80029c4 <HAL_I2CEx_ConfigDigitalFilter>
  MX_USART1_UART_Init();
 80013ae:	f7ff ff07 	bl	80011c0 <MX_USART1_UART_Init>
  BSP_LED_Init(LED2);
 80013b2:	4630      	mov	r0, r6
 80013b4:	f000 fbe4 	bl	8001b80 <BSP_LED_Init>
  APPE_Init();
 80013b8:	f7ff f992 	bl	80006e0 <APPE_Init>
  HAL_Delay(2000);
 80013bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013c0:	f7ff ff26 	bl	8001210 <HAL_Delay>
  dev.intf_ptr = &dev_addr;
 80013c4:	4816      	ldr	r0, [pc, #88]	; (8001420 <main+0x1cc>)
 80013c6:	4b17      	ldr	r3, [pc, #92]	; (8001424 <main+0x1d0>)
 80013c8:	6043      	str	r3, [r0, #4]
  dev.read = user_i2c_read;
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <main+0x1d4>)
 80013cc:	60c3      	str	r3, [r0, #12]
  dev.write = user_i2c_write;
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <main+0x1d8>)
 80013d0:	6103      	str	r3, [r0, #16]
  dev.delay_us = user_delay_ms;
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <main+0x1dc>)
 80013d4:	6143      	str	r3, [r0, #20]
  dev.intf = BME280_I2C_INTF;
 80013d6:	7206      	strb	r6, [r0, #8]
  rslt = bme280_init(&dev);
 80013d8:	f7ff fa85 	bl	80008e6 <bme280_init>
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <main+0x1e0>)
 80013de:	7018      	strb	r0, [r3, #0]
		BSP_LED_On(LED2);
 80013e0:	2001      	movs	r0, #1
 80013e2:	f000 fbf5 	bl	8001bd0 <BSP_LED_On>
		HAL_Delay(1000);
 80013e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ea:	f7ff ff11 	bl	8001210 <HAL_Delay>
		BSP_LED_Off(LED2);
 80013ee:	2001      	movs	r0, #1
 80013f0:	f000 fbfc 	bl	8001bec <BSP_LED_Off>
		HAL_Delay(1000);
 80013f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013f8:	f7ff ff0a 	bl	8001210 <HAL_Delay>
 80013fc:	e7f0      	b.n	80013e0 <main+0x18c>
 80013fe:	bf00      	nop
 8001400:	58000c00 	.word	0x58000c00
 8001404:	cafecafe 	.word	0xcafecafe
 8001408:	58000800 	.word	0x58000800
 800140c:	40002800 	.word	0x40002800
 8001410:	20001510 	.word	0x20001510
 8001414:	40005c00 	.word	0x40005c00
 8001418:	2000134c 	.word	0x2000134c
 800141c:	00707cbb 	.word	0x00707cbb
 8001420:	20001304 	.word	0x20001304
 8001424:	20000004 	.word	0x20000004
 8001428:	080010b5 	.word	0x080010b5
 800142c:	08001061 	.word	0x08001061
 8001430:	08001245 	.word	0x08001245
 8001434:	200001ae 	.word	0x200001ae

08001438 <Error_Handler>:
}
 8001438:	4770      	bx	lr

0800143a <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 800143a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 800143e:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001440:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001442:	4302      	orrs	r2, r0
 8001444:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001448:	4018      	ands	r0, r3
 800144a:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 800144c:	9b01      	ldr	r3, [sp, #4]
}
 800144e:	b002      	add	sp, #8
 8001450:	4770      	bx	lr

08001452 <HAL_MspInit>:
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001456:	b082      	sub	sp, #8
 8001458:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800145a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800145e:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001466:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001468:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146a:	b002      	add	sp, #8
 800146c:	4770      	bx	lr
	...

08001470 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001470:	b510      	push	{r4, lr}
 8001472:	4604      	mov	r4, r0
 8001474:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001476:	2214      	movs	r2, #20
 8001478:	2100      	movs	r1, #0
 800147a:	a801      	add	r0, sp, #4
 800147c:	f004 fa83 	bl	8005986 <memset>
  if(hi2c->Instance==I2C3)
 8001480:	6822      	ldr	r2, [r4, #0]
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <HAL_I2C_MspInit+0x58>)
 8001484:	429a      	cmp	r2, r3
 8001486:	d11c      	bne.n	80014c2 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001488:	2004      	movs	r0, #4
 800148a:	f7ff ffd6 	bl	800143a <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration    
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800148e:	2203      	movs	r2, #3
 8001490:	2312      	movs	r3, #18
 8001492:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2101      	movs	r1, #1
 8001498:	2300      	movs	r3, #0
 800149a:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800149e:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a0:	eb0d 0103 	add.w	r1, sp, r3
 80014a4:	4809      	ldr	r0, [pc, #36]	; (80014cc <HAL_I2C_MspInit+0x5c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014a6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a8:	f000 ff1e 	bl	80022e8 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80014ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014b2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80014b6:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80014b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014be:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80014c0:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80014c2:	b006      	add	sp, #24
 80014c4:	bd10      	pop	{r4, pc}
 80014c6:	bf00      	nop
 80014c8:	40005c00 	.word	0x40005c00
 80014cc:	48000800 	.word	0x48000800

080014d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d2:	2214      	movs	r2, #20
{
 80014d4:	b08b      	sub	sp, #44	; 0x2c
 80014d6:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	2100      	movs	r1, #0
 80014da:	eb0d 0002 	add.w	r0, sp, r2
 80014de:	f004 fa52 	bl	8005986 <memset>
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  if(huart->Instance==LPUART1)
 80014e2:	6833      	ldr	r3, [r6, #0]
 80014e4:	4a53      	ldr	r2, [pc, #332]	; (8001634 <HAL_UART_MspInit+0x164>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d158      	bne.n	800159c <HAL_UART_MspInit+0xcc>
  SET_BIT(RCC->APB1ENR2, Periphs);
 80014ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	2001      	movs	r0, #1
 80014f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014f2:	f042 0201 	orr.w	r2, r2, #1
 80014f6:	65da      	str	r2, [r3, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80014f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001500:	9b00      	ldr	r3, [sp, #0]
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    PA6     ------> LPUART1_CTS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2702      	movs	r7, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001504:	f7ff ff99 	bl	800143a <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	230c      	movs	r3, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150a:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800150c:	2408      	movs	r4, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	e9cd 3705 	strd	r3, r7, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151a:	e9cd 5307 	strd	r5, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800151e:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f000 fee2 	bl	80022e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001524:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152a:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001530:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	e9cd 5507 	strd	r5, r5, [sp, #28]

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8001536:	4c40      	ldr	r4, [pc, #256]	; (8001638 <HAL_UART_MspInit+0x168>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001538:	f000 fed6 	bl	80022e8 <HAL_GPIO_Init>
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800153c:	483f      	ldr	r0, [pc, #252]	; (800163c <HAL_UART_MspInit+0x16c>)
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800153e:	6225      	str	r5, [r4, #32]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001540:	2311      	movs	r3, #17
 8001542:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001546:	2310      	movs	r3, #16
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001548:	e9c4 3502 	strd	r3, r5, [r4, #8]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800154c:	4620      	mov	r0, r4
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800154e:	2380      	movs	r3, #128	; 0x80
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001550:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001554:	e9c4 5506 	strd	r5, r5, [r4, #24]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001558:	f000 fd6a 	bl	8002030 <HAL_DMA_Init>
 800155c:	b108      	cbz	r0, 8001562 <HAL_UART_MspInit+0x92>
    {
      Error_Handler();
 800155e:	f7ff ff6b 	bl	8001438 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 8001562:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8001566:	e9cd 3501 	strd	r3, r5, [sp, #4]
    pSyncConfig.SyncEnable = DISABLE;
    pSyncConfig.EventEnable = DISABLE;
    pSyncConfig.RequestNumber = 1;
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 800156a:	a901      	add	r1, sp, #4
    pSyncConfig.RequestNumber = 1;
 800156c:	2301      	movs	r3, #1
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 800156e:	4832      	ldr	r0, [pc, #200]	; (8001638 <HAL_UART_MspInit+0x168>)
    pSyncConfig.SyncEnable = DISABLE;
 8001570:	f88d 500c 	strb.w	r5, [sp, #12]
    pSyncConfig.EventEnable = DISABLE;
 8001574:	f88d 500d 	strb.w	r5, [sp, #13]
    pSyncConfig.RequestNumber = 1;
 8001578:	9304      	str	r3, [sp, #16]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 800157a:	f000 fe8d 	bl	8002298 <HAL_DMAEx_ConfigMuxSync>
 800157e:	b108      	cbz	r0, 8001584 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8001580:	f7ff ff5a 	bl	8001438 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001584:	2200      	movs	r2, #0
 8001586:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8001588:	6774      	str	r4, [r6, #116]	; 0x74
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800158a:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800158c:	62a6      	str	r6, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800158e:	f000 fc81 	bl	8001e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001592:	2025      	movs	r0, #37	; 0x25

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001594:	f000 fcb2 	bl	8001efc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001598:	b00b      	add	sp, #44	; 0x2c
 800159a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(huart->Instance==USART1)
 800159c:	4a28      	ldr	r2, [pc, #160]	; (8001640 <HAL_UART_MspInit+0x170>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d1fa      	bne.n	8001598 <HAL_UART_MspInit+0xc8>
  SET_BIT(RCC->APB2ENR, Periphs);
 80015a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	2001      	movs	r0, #1
 80015a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015ae:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80015b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80015b8:	9b01      	ldr	r3, [sp, #4]
 80015ba:	f7ff ff3e 	bl	800143a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	2002      	movs	r0, #2
 80015c0:	f7ff ff3b 	bl	800143a <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015ca:	2407      	movs	r4, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	a905      	add	r1, sp, #20
 80015d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015d8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	e9cd 5507 	strd	r5, r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015de:	f000 fe83 	bl	80022e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015e2:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e8:	2201      	movs	r2, #1
 80015ea:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ec:	a905      	add	r1, sp, #20
 80015ee:	4815      	ldr	r0, [pc, #84]	; (8001644 <HAL_UART_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015f0:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f2:	e9cd 2307 	strd	r2, r3, [sp, #28]
    hdma_usart1_tx.Instance = DMA2_Channel4;
 80015f6:	4c14      	ldr	r4, [pc, #80]	; (8001648 <HAL_UART_MspInit+0x178>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f8:	f000 fe76 	bl	80022e8 <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80015fc:	4913      	ldr	r1, [pc, #76]	; (800164c <HAL_UART_MspInit+0x17c>)
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015fe:	6225      	str	r5, [r4, #32]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001600:	230f      	movs	r3, #15
 8001602:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001606:	2310      	movs	r3, #16
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001608:	e9c4 3502 	strd	r3, r5, [r4, #8]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800160c:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800160e:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001610:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001614:	e9c4 5506 	strd	r5, r5, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001618:	f000 fd0a 	bl	8002030 <HAL_DMA_Init>
 800161c:	b108      	cbz	r0, 8001622 <HAL_UART_MspInit+0x152>
      Error_Handler();
 800161e:	f7ff ff0b 	bl	8001438 <Error_Handler>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001626:	6774      	str	r4, [r6, #116]	; 0x74
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001628:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800162a:	62a6      	str	r6, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800162c:	f000 fc32 	bl	8001e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001630:	2024      	movs	r0, #36	; 0x24
 8001632:	e7af      	b.n	8001594 <HAL_UART_MspInit+0xc4>
 8001634:	40008000 	.word	0x40008000
 8001638:	20001534 	.word	0x20001534
 800163c:	40020044 	.word	0x40020044
 8001640:	40013800 	.word	0x40013800
 8001644:	48000400 	.word	0x48000400
 8001648:	20001424 	.word	0x20001424
 800164c:	40020444 	.word	0x40020444

08001650 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8001650:	6802      	ldr	r2, [r0, #0]
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <HAL_RTC_MspInit+0x58>)
 8001654:	429a      	cmp	r2, r3
{
 8001656:	b513      	push	{r0, r1, r4, lr}
 8001658:	4604      	mov	r4, r0
  if(hrtc->Instance==RTC)
 800165a:	d122      	bne.n	80016a2 <HAL_RTC_MspInit+0x52>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800165c:	f001 f9d8 	bl	8002a10 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8001660:	f001 f9d6 	bl	8002a10 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
    __HAL_RCC_RTCAPB_CLK_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8001668:	4620      	mov	r0, r4
 800166a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800166e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001672:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001676:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800167a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800167e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001682:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001686:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001688:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800168c:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800168e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001694:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001696:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001698:	b002      	add	sp, #8
 800169a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_RTCEx_EnableBypassShadow(hrtc);
 800169e:	f002 b92d 	b.w	80038fc <HAL_RTCEx_EnableBypassShadow>
}
 80016a2:	b002      	add	sp, #8
 80016a4:	bd10      	pop	{r4, pc}
 80016a6:	bf00      	nop
 80016a8:	40002800 	.word	0x40002800

080016ac <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016ac:	4770      	bx	lr

080016ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ae:	e7fe      	b.n	80016ae <HardFault_Handler>

080016b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b0:	e7fe      	b.n	80016b0 <MemManage_Handler>

080016b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b2:	e7fe      	b.n	80016b2 <BusFault_Handler>

080016b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b4:	e7fe      	b.n	80016b4 <UsageFault_Handler>

080016b6 <SVC_Handler>:
 80016b6:	4770      	bx	lr

080016b8 <DebugMon_Handler>:
 80016b8:	4770      	bx	lr

080016ba <PendSV_Handler>:
 80016ba:	4770      	bx	lr

080016bc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016bc:	f000 bbaa 	b.w	8001e14 <HAL_IncTick>

080016c0 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80016c0:	4801      	ldr	r0, [pc, #4]	; (80016c8 <DMA1_Channel4_IRQHandler+0x8>)
 80016c2:	f000 bd9e 	b.w	8002202 <HAL_DMA_IRQHandler>
 80016c6:	bf00      	nop
 80016c8:	20001534 	.word	0x20001534

080016cc <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016cc:	4801      	ldr	r0, [pc, #4]	; (80016d4 <USART1_IRQHandler+0x8>)
 80016ce:	f002 b9d9 	b.w	8003a84 <HAL_UART_IRQHandler>
 80016d2:	bf00      	nop
 80016d4:	20001484 	.word	0x20001484

080016d8 <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80016d8:	4801      	ldr	r0, [pc, #4]	; (80016e0 <LPUART1_IRQHandler+0x8>)
 80016da:	f002 b9d3 	b.w	8003a84 <HAL_UART_IRQHandler>
 80016de:	bf00      	nop
 80016e0:	20001398 	.word	0x20001398

080016e4 <DMA2_Channel4_IRQHandler>:
void DMA2_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80016e4:	4801      	ldr	r0, [pc, #4]	; (80016ec <DMA2_Channel4_IRQHandler+0x8>)
 80016e6:	f000 bd8c 	b.w	8002202 <HAL_DMA_IRQHandler>
 80016ea:	bf00      	nop
 80016ec:	20001424 	.word	0x20001424

080016f0 <EXTI4_IRQHandler>:
 80016f0:	4770      	bx	lr

080016f2 <EXTI0_IRQHandler>:
 80016f2:	4770      	bx	lr

080016f4 <RTC_WKUP_IRQHandler>:

}

void RTC_WKUP_IRQHandler(void)
{
  HW_TS_RTC_Wakeup_Handler();
 80016f4:	f7ff bc16 	b.w	8000f24 <HW_TS_RTC_Wakeup_Handler>

080016f8 <IPCC_C1_TX_IRQHandler>:
}

void IPCC_C1_TX_IRQHandler(void)
{
  HW_IPCC_Tx_Handler();
 80016f8:	f000 b9ae 	b.w	8001a58 <HW_IPCC_Tx_Handler>

080016fc <IPCC_C1_RX_IRQHandler>:
  return;
}

void IPCC_C1_RX_IRQHandler(void)
{
  HW_IPCC_Rx_Handler();
 80016fc:	f000 ba0c 	b.w	8001b18 <HW_IPCC_Rx_Handler>

08001700 <Beacon_Update>:
    HAL_FLASHEx_Erase(&erase, &pageError);
    
    HAL_FLASH_Lock();
  }
  
  *(uint32_t*) SRAM1_BASE = BOOT_MODE_AND_SECTOR; 
 8001700:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001704:	4a07      	ldr	r2, [pc, #28]	; (8001724 <Beacon_Update+0x24>)
 8001706:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001708:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800170c:	4906      	ldr	r1, [pc, #24]	; (8001728 <Beacon_Update+0x28>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <Beacon_Update+0x2c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001710:	68ca      	ldr	r2, [r1, #12]
 8001712:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001716:	4313      	orrs	r3, r2
 8001718:	60cb      	str	r3, [r1, #12]
 800171a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800171e:	bf00      	nop
 8001720:	e7fd      	b.n	800171e <Beacon_Update+0x1e>
 8001722:	bf00      	nop
 8001724:	00010601 	.word	0x00010601
 8001728:	e000ed00 	.word	0xe000ed00
 800172c:	05fa0004 	.word	0x05fa0004

08001730 <BLE_UserEvtRx>:
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
  return;
}

static void BLE_UserEvtRx( void * pPayload )
{
 8001730:	b510      	push	{r4, lr}
 8001732:	4604      	mov	r4, r0
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8001734:	6840      	ldr	r0, [r0, #4]
 8001736:	3008      	adds	r0, #8
 8001738:	f003 fea2 	bl	8005480 <SVCCTL_UserEvtRx>
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800173c:	b110      	cbz	r0, 8001744 <BLE_UserEvtRx+0x14>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800173e:	2301      	movs	r3, #1
 8001740:	7023      	strb	r3, [r4, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8001742:	bd10      	pop	{r4, pc}
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8001744:	7020      	strb	r0, [r4, #0]
}
 8001746:	e7fc      	b.n	8001742 <BLE_UserEvtRx+0x12>

08001748 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
  uint32_t task_id_list;
  switch (status)
 8001748:	b110      	cbz	r0, 8001750 <BLE_StatusNot+0x8>
 800174a:	2801      	cmp	r0, #1
 800174c:	d003      	beq.n	8001756 <BLE_StatusNot+0xe>
 800174e:	4770      	bx	lr
      /**
       * All tasks that may send an aci/hci commands shall be listed here
       * This is to prevent a new command is sent while one is already pending
       */
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      UTIL_SEQ_PauseTask(task_id_list);
 8001750:	2003      	movs	r0, #3
 8001752:	f004 b835 	b.w	80057c0 <UTIL_SEQ_PauseTask>
      /**
       * All tasks that may send an aci/hci commands shall be listed here
       * This is to prevent a new command is sent while one is already pending
       */
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      UTIL_SEQ_ResumeTask(task_id_list);
 8001756:	2003      	movs	r0, #3
 8001758:	f004 b840 	b.w	80057dc <UTIL_SEQ_ResumeTask>

0800175c <APP_BLE_Init>:
{
 800175c:	b570      	push	{r4, r5, r6, lr}
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800175e:	4b4c      	ldr	r3, [pc, #304]	; (8001890 <APP_BLE_Init+0x134>)
{
 8001760:	b092      	sub	sp, #72	; 0x48
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8001762:	aa06      	add	r2, sp, #24
 8001764:	f103 0628 	add.w	r6, r3, #40	; 0x28
 8001768:	4615      	mov	r5, r2
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	6859      	ldr	r1, [r3, #4]
 800176e:	4614      	mov	r4, r2
 8001770:	c403      	stmia	r4!, {r0, r1}
 8001772:	3308      	adds	r3, #8
 8001774:	42b3      	cmp	r3, r6
 8001776:	4622      	mov	r2, r4
 8001778:	d1f7      	bne.n	800176a <APP_BLE_Init+0xe>
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	791b      	ldrb	r3, [r3, #4]
 800177e:	7123      	strb	r3, [r4, #4]
  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8001780:	4b44      	ldr	r3, [pc, #272]	; (8001894 <APP_BLE_Init+0x138>)
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8001782:	6020      	str	r0, [r4, #0]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8001784:	a904      	add	r1, sp, #16
  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8001786:	9304      	str	r3, [sp, #16]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8001788:	4843      	ldr	r0, [pc, #268]	; (8001898 <APP_BLE_Init+0x13c>)
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800178a:	4b44      	ldr	r3, [pc, #272]	; (800189c <APP_BLE_Init+0x140>)
 800178c:	9305      	str	r3, [sp, #20]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800178e:	f003 fa7f 	bl	8004c90 <hci_init>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8001792:	2101      	movs	r1, #1
 8001794:	2002      	movs	r0, #2
 8001796:	f003 ffbd 	bl	8005714 <UTIL_LPM_SetOffMode>
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800179a:	4c41      	ldr	r4, [pc, #260]	; (80018a0 <APP_BLE_Init+0x144>)
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800179c:	4a41      	ldr	r2, [pc, #260]	; (80018a4 <APP_BLE_Init+0x148>)
 800179e:	2100      	movs	r1, #0
 80017a0:	2002      	movs	r0, #2
 80017a2:	f003 ffe9 	bl	8005778 <UTIL_SEQ_RegTask>
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 80017a6:	4628      	mov	r0, r5
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 80017a8:	2500      	movs	r5, #0
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 80017aa:	f003 fb65 	bl	8004e78 <SHCI_C2_BLE_Init>
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 80017ae:	f8ad 5008 	strh.w	r5, [sp, #8]
  hci_reset();
 80017b2:	f003 f9bf 	bl	8004b34 <hci_reset>
 80017b6:	6823      	ldr	r3, [r4, #0]
  if(udn != 0xFFFFFFFF)
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	d060      	beq.n	800187e <APP_BLE_Init+0x122>
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 80017bc:	4a3a      	ldr	r2, [pc, #232]	; (80018a8 <APP_BLE_Init+0x14c>)
 80017be:	6811      	ldr	r1, [r2, #0]
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 80017c0:	4a3a      	ldr	r2, [pc, #232]	; (80018ac <APP_BLE_Init+0x150>)
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 80017c2:	0a18      	lsrs	r0, r3, #8
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 80017c4:	7013      	strb	r3, [r2, #0]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 80017c6:	0c1b      	lsrs	r3, r3, #16
 80017c8:	7093      	strb	r3, [r2, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 80017ca:	70d1      	strb	r1, [r2, #3]
 80017cc:	0a0b      	lsrs	r3, r1, #8
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 80017ce:	0c09      	lsrs	r1, r1, #16
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 80017d0:	7050      	strb	r0, [r2, #1]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 80017d2:	7113      	strb	r3, [r2, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 80017d4:	7151      	strb	r1, [r2, #5]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80017d6:	2106      	movs	r1, #6
 80017d8:	2000      	movs	r0, #0
 80017da:	f003 f959 	bl	8004a90 <aci_hal_write_config_data>
  srd_bd_addr[1] =  0x0000ED6E;
 80017de:	f64e 536e 	movw	r3, #60782	; 0xed6e
 80017e2:	9305      	str	r3, [sp, #20]
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80017e4:	6823      	ldr	r3, [r4, #0]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 80017e6:	9304      	str	r3, [sp, #16]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 80017e8:	aa04      	add	r2, sp, #16
 80017ea:	2106      	movs	r1, #6
 80017ec:	202e      	movs	r0, #46	; 0x2e
 80017ee:	f003 f94f 	bl	8004a90 <aci_hal_write_config_data>
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 80017f2:	4a2f      	ldr	r2, [pc, #188]	; (80018b0 <APP_BLE_Init+0x154>)
 80017f4:	2110      	movs	r1, #16
 80017f6:	2018      	movs	r0, #24
 80017f8:	f003 f94a 	bl	8004a90 <aci_hal_write_config_data>
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 80017fc:	4a2d      	ldr	r2, [pc, #180]	; (80018b4 <APP_BLE_Init+0x158>)
 80017fe:	2110      	movs	r1, #16
 8001800:	2008      	movs	r0, #8
 8001802:	f003 f945 	bl	8004a90 <aci_hal_write_config_data>
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8001806:	2118      	movs	r1, #24
 8001808:	2001      	movs	r0, #1
 800180a:	f003 f96d 	bl	8004ae8 <aci_hal_set_tx_power_level>
  aci_gatt_init();
 800180e:	f003 f8f1 	bl	80049f4 <aci_gatt_init>
    aci_gap_init(role, 0,
 8001812:	f10d 030e 	add.w	r3, sp, #14
 8001816:	9301      	str	r3, [sp, #4]
 8001818:	ab03      	add	r3, sp, #12
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	2207      	movs	r2, #7
 800181e:	f10d 030a 	add.w	r3, sp, #10
 8001822:	2100      	movs	r1, #0
 8001824:	2001      	movs	r0, #1
 8001826:	f003 f857 	bl	80048d8 <aci_gap_init>
    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800182a:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <APP_BLE_Init+0x15c>)
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8001832:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8001836:	2306      	movs	r3, #6
 8001838:	2200      	movs	r2, #0
 800183a:	f003 f8f9 	bl	8004a30 <aci_gatt_update_char_value>
 800183e:	b110      	cbz	r0, 8001846 <APP_BLE_Init+0xea>
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
 8001840:	481e      	ldr	r0, [pc, #120]	; (80018bc <APP_BLE_Init+0x160>)
 8001842:	f004 f905 	bl	8005a50 <puts>
  if(aci_gatt_update_char_value(gap_service_handle,
 8001846:	ab02      	add	r3, sp, #8
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800184e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8001852:	2302      	movs	r3, #2
 8001854:	2200      	movs	r2, #0
 8001856:	f003 f8eb 	bl	8004a30 <aci_gatt_update_char_value>
 800185a:	b110      	cbz	r0, 8001862 <APP_BLE_Init+0x106>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
 800185c:	4818      	ldr	r0, [pc, #96]	; (80018c0 <APP_BLE_Init+0x164>)
 800185e:	f004 f8f7 	bl	8005a50 <puts>
  SVCCTL_Init();
 8001862:	f003 fe01 	bl	8005468 <SVCCTL_Init>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_BEACON_UPDATE_REQ_ID, UTIL_SEQ_RFU, Beacon_Update);
 8001866:	4a17      	ldr	r2, [pc, #92]	; (80018c4 <APP_BLE_Init+0x168>)
 8001868:	2100      	movs	r1, #0
 800186a:	2001      	movs	r0, #1
 800186c:	f003 ff84 	bl	8005778 <UTIL_SEQ_RegTask>
    APP_DBG_MSG("Ibeacon advertize\n");
 8001870:	4815      	ldr	r0, [pc, #84]	; (80018c8 <APP_BLE_Init+0x16c>)
 8001872:	f004 f8ed 	bl	8005a50 <puts>
    IBeacon_Process();
 8001876:	f000 f837 	bl	80018e8 <IBeacon_Process>
}
 800187a:	b012      	add	sp, #72	; 0x48
 800187c:	bd70      	pop	{r4, r5, r6, pc}
    otp_addr = OTP_Read(0);
 800187e:	4628      	mov	r0, r5
 8001880:	f003 faea 	bl	8004e58 <OTP_Read>
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8001884:	4a11      	ldr	r2, [pc, #68]	; (80018cc <APP_BLE_Init+0x170>)
 8001886:	2800      	cmp	r0, #0
 8001888:	bf18      	it	ne
 800188a:	4602      	movne	r2, r0
 800188c:	e7a3      	b.n	80017d6 <APP_BLE_Init+0x7a>
 800188e:	bf00      	nop
 8001890:	080063b1 	.word	0x080063b1
 8001894:	20030028 	.word	0x20030028
 8001898:	08001731 	.word	0x08001731
 800189c:	08001749 	.word	0x08001749
 80018a0:	1fff7580 	.word	0x1fff7580
 80018a4:	08004cdd 	.word	0x08004cdd
 80018a8:	1fff7584 	.word	0x1fff7584
 80018ac:	200001af 	.word	0x200001af
 80018b0:	080063de 	.word	0x080063de
 80018b4:	080063ee 	.word	0x080063ee
 80018b8:	08006544 	.word	0x08006544
 80018bc:	0800654b 	.word	0x0800654b
 80018c0:	0800657a 	.word	0x0800657a
 80018c4:	08001701 	.word	0x08001701
 80018c8:	080065a8 	.word	0x080065a8
 80018cc:	080063ab 	.word	0x080063ab

080018d0 <SVCCTL_App_Notification>:
}
 80018d0:	2001      	movs	r0, #1
 80018d2:	4770      	bx	lr

080018d4 <hci_notify_asynch_evt>:
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80018d4:	2100      	movs	r1, #0
 80018d6:	2002      	movs	r0, #2
 80018d8:	f003 bf5e 	b.w	8005798 <UTIL_SEQ_SetTask>

080018dc <hci_cmd_resp_release>:
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80018dc:	2001      	movs	r0, #1
 80018de:	f003 bf89 	b.w	80057f4 <UTIL_SEQ_SetEvt>

080018e2 <hci_cmd_resp_wait>:
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80018e2:	2001      	movs	r0, #1
 80018e4:	f004 b800 	b.w	80058e8 <UTIL_SEQ_WaitEvt>

080018e8 <IBeacon_Process>:
/* USER CODE END IBeacon_Init_2 */  
  return ret;
}

void IBeacon_Process(void)
{
 80018e8:	b500      	push	{lr}
  hci_le_set_scan_response_data(0, NULL);
 80018ea:	2100      	movs	r1, #0
{
 80018ec:	b097      	sub	sp, #92	; 0x5c
  hci_le_set_scan_response_data(0, NULL);
 80018ee:	4608      	mov	r0, r1
 80018f0:	f003 f93e 	bl	8004b70 <hci_le_set_scan_response_data>
  ret = aci_gap_set_discoverable(ADV_NONCONN_IND,                          /*< Advertise as non-connectable, undirected. */
 80018f4:	2300      	movs	r3, #0
 80018f6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80018fa:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80018fe:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001902:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	4611      	mov	r1, r2
 800190a:	2003      	movs	r0, #3
 800190c:	f002 ff88 	bl	8004820 <aci_gap_set_discoverable>
  if (ret != BLE_STATUS_SUCCESS)
 8001910:	bba0      	cbnz	r0, 800197c <IBeacon_Process+0x94>
  ret = aci_gap_delete_ad_type(AD_TYPE_TX_POWER_LEVEL);
 8001912:	200a      	movs	r0, #10
 8001914:	f003 f84c 	bl	80049b0 <aci_gap_delete_ad_type>
  if (ret != BLE_STATUS_SUCCESS)
 8001918:	bb80      	cbnz	r0, 800197c <IBeacon_Process+0x94>
  uint8_t service_data[] =
 800191a:	4a1a      	ldr	r2, [pc, #104]	; (8001984 <IBeacon_Process+0x9c>)
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <IBeacon_Process+0xa0>)
 800191e:	481b      	ldr	r0, [pc, #108]	; (800198c <IBeacon_Process+0xa4>)
 8001920:	491b      	ldr	r1, [pc, #108]	; (8001990 <IBeacon_Process+0xa8>)
 8001922:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <IBeacon_Process+0xac>)
 8001928:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <IBeacon_Process+0xb0>)
 800192a:	e9cd 3013 	strd	r3, r0, [sp, #76]	; 0x4c
 800192e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001932:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8001936:	20c1      	movs	r0, #193	; 0xc1
 8001938:	f88d 0056 	strb.w	r0, [sp, #86]	; 0x56
  uint8_t service_uuid_list[] =
 800193c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001940:	4816      	ldr	r0, [pc, #88]	; (800199c <IBeacon_Process+0xb4>)
 8001942:	f640 730e 	movw	r3, #3854	; 0xf0e
 8001946:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  uint8_t flags[] =
 800194a:	f44f 7381 	mov.w	r3, #258	; 0x102
  uint8_t service_uuid_list[] =
 800194e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  uint8_t service_data[] =
 8001952:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
  uint8_t flags[] =
 8001956:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  ret = aci_gap_update_adv_data(sizeof(service_data), service_data);
 800195a:	a90f      	add	r1, sp, #60	; 0x3c
  uint8_t flags[] =
 800195c:	2306      	movs	r3, #6
  ret = aci_gap_update_adv_data(sizeof(service_data), service_data);
 800195e:	201b      	movs	r0, #27
  uint8_t flags[] =
 8001960:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  ret = aci_gap_update_adv_data(sizeof(service_data), service_data);
 8001964:	f002 fffa 	bl	800495c <aci_gap_update_adv_data>
  if (ret != BLE_STATUS_SUCCESS)
 8001968:	b940      	cbnz	r0, 800197c <IBeacon_Process+0x94>
  ret = aci_gap_update_adv_data(sizeof(service_uuid_list), service_uuid_list);
 800196a:	a90a      	add	r1, sp, #40	; 0x28
 800196c:	2012      	movs	r0, #18
 800196e:	f002 fff5 	bl	800495c <aci_gap_update_adv_data>
  if (ret != BLE_STATUS_SUCCESS)
 8001972:	b918      	cbnz	r0, 800197c <IBeacon_Process+0x94>
  ret = aci_gap_update_adv_data(sizeof(flags), flags);
 8001974:	a909      	add	r1, sp, #36	; 0x24
 8001976:	2003      	movs	r0, #3
 8001978:	f002 fff0 	bl	800495c <aci_gap_update_adv_data>
  
  IBeacon_Init(&IBeacon_InitStruct);
/* USER CODE BEGIN IBeacon_Process_2 */

/* USER CODE END IBeacon_Process_2 */  
}
 800197c:	b017      	add	sp, #92	; 0x5c
 800197e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001982:	bf00      	nop
 8001984:	004cff1a 	.word	0x004cff1a
 8001988:	01001502 	.word	0x01001502
 800198c:	01000f0e 	.word	0x01000f0e
 8001990:	05040302 	.word	0x05040302
 8001994:	0d0c0b0a 	.word	0x0d0c0b0a
 8001998:	09080706 	.word	0x09080706
 800199c:	01000311 	.word	0x01000311

080019a0 <HW_IPCC_Enable>:
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HW_IPCC_Enable+0x28>)
 80019a2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80019a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019aa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80019ae:	6a1a      	ldr	r2, [r3, #32]
 80019b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019b4:	621a      	str	r2, [r3, #32]
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80019b6:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80019b8:	bf20      	wfe
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80019ba:	4a04      	ldr	r2, [pc, #16]	; (80019cc <HW_IPCC_Enable+0x2c>)
 80019bc:	68d3      	ldr	r3, [r2, #12]
 80019be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019c2:	60d3      	str	r3, [r2, #12]
  LL_PWR_EnableBootC2( );

  return;
}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	58000800 	.word	0x58000800
 80019cc:	58000400 	.word	0x58000400

080019d0 <HW_IPCC_Init>:
  SET_BIT(RCC->AHB3ENR, Periphs);
 80019d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

void HW_IPCC_Init( void )
{
 80019d4:	b507      	push	{r0, r1, r2, lr}
 80019d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019d8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80019dc:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80019de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e4:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80019e6:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80019e8:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <HW_IPCC_Init+0x3c>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	f042 0201 	orr.w	r2, r2, #1
 80019f0:	601a      	str	r2, [r3, #0]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80019f8:	601a      	str	r2, [r3, #0]
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );

  LL_C1_IPCC_EnableIT_RXO( IPCC );
  LL_C1_IPCC_EnableIT_TXF( IPCC );

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80019fa:	202c      	movs	r0, #44	; 0x2c
 80019fc:	f000 fa7e 	bl	8001efc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001a00:	202d      	movs	r0, #45	; 0x2d

  return;
}
 8001a02:	b003      	add	sp, #12
 8001a04:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001a08:	f000 ba78 	b.w	8001efc <HAL_NVIC_EnableIRQ>
 8001a0c:	58000c00 	.word	0x58000c00

08001a10 <HW_IPCC_BLE_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8001a10:	4a02      	ldr	r2, [pc, #8]	; (8001a1c <HW_IPCC_BLE_Init+0xc>)
 8001a12:	6853      	ldr	r3, [r2, #4]
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	6053      	str	r3, [r2, #4]
void HW_IPCC_BLE_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );

  return;
}
 8001a1a:	4770      	bx	lr
 8001a1c:	58000c00 	.word	0x58000c00

08001a20 <HW_IPCC_BLE_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001a20:	4b02      	ldr	r3, [pc, #8]	; (8001a2c <HW_IPCC_BLE_SendCmd+0xc>)
 8001a22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a26:	609a      	str	r2, [r3, #8]
void HW_IPCC_BLE_SendCmd( void )
{
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );

  return;
}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	58000c00 	.word	0x58000c00

08001a30 <HW_IPCC_SYS_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8001a30:	4a02      	ldr	r2, [pc, #8]	; (8001a3c <HW_IPCC_SYS_Init+0xc>)
 8001a32:	6853      	ldr	r3, [r2, #4]
 8001a34:	f023 0302 	bic.w	r3, r3, #2
 8001a38:	6053      	str	r3, [r2, #4]
void HW_IPCC_SYS_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );

  return;
}
 8001a3a:	4770      	bx	lr
 8001a3c:	58000c00 	.word	0x58000c00

08001a40 <HW_IPCC_SYS_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <HW_IPCC_SYS_SendCmd+0x14>)
 8001a42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a46:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001a4e:	605a      	str	r2, [r3, #4]
{
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );

  return;
}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	58000c00 	.word	0x58000c00

08001a58 <HW_IPCC_Tx_Handler>:
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001a58:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <HW_IPCC_Tx_Handler+0x7c>)
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	f012 0f02 	tst.w	r2, #2
{
 8001a60:	b510      	push	{r4, lr}
 8001a62:	461a      	mov	r2, r3
 8001a64:	d109      	bne.n	8001a7a <HW_IPCC_Tx_Handler+0x22>
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001a66:	6859      	ldr	r1, [r3, #4]
 8001a68:	0389      	lsls	r1, r1, #14
 8001a6a:	d406      	bmi.n	8001a7a <HW_IPCC_Tx_Handler+0x22>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001a72:	605a      	str	r2, [r3, #4]

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );

  HW_IPCC_SYS_CmdEvtNot();
 8001a74:	f003 fdd4 	bl	8005620 <HW_IPCC_SYS_CmdEvtNot>
}
 8001a78:	bd10      	pop	{r4, pc}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001a7a:	68d3      	ldr	r3, [r2, #12]
 8001a7c:	079b      	lsls	r3, r3, #30
 8001a7e:	d407      	bmi.n	8001a90 <HW_IPCC_Tx_Handler+0x38>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001a80:	6853      	ldr	r3, [r2, #4]
 8001a82:	039c      	lsls	r4, r3, #14
 8001a84:	d404      	bmi.n	8001a90 <HW_IPCC_Tx_Handler+0x38>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001a86:	6853      	ldr	r3, [r2, #4]
 8001a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a8c:	6053      	str	r3, [r2, #4]
 8001a8e:	e7f1      	b.n	8001a74 <HW_IPCC_Tx_Handler+0x1c>
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001a90:	4c10      	ldr	r4, [pc, #64]	; (8001ad4 <HW_IPCC_Tx_Handler+0x7c>)
 8001a92:	68e3      	ldr	r3, [r4, #12]
 8001a94:	f013 0f08 	tst.w	r3, #8
 8001a98:	4623      	mov	r3, r4
 8001a9a:	d10d      	bne.n	8001ab8 <HW_IPCC_Tx_Handler+0x60>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8001a9c:	6862      	ldr	r2, [r4, #4]
 8001a9e:	0310      	lsls	r0, r2, #12
 8001aa0:	d40a      	bmi.n	8001ab8 <HW_IPCC_Tx_Handler+0x60>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001aa2:	6863      	ldr	r3, [r4, #4]
 8001aa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001aa8:	6063      	str	r3, [r4, #4]

static void HW_IPCC_MM_FreeBufHandler( void )
{
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  FreeBufCb();
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HW_IPCC_Tx_Handler+0x80>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4798      	blx	r3
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001ab0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001ab4:	60a3      	str	r3, [r4, #8]
 8001ab6:	e7df      	b.n	8001a78 <HW_IPCC_Tx_Handler+0x20>
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	0691      	lsls	r1, r2, #26
 8001abc:	d4dc      	bmi.n	8001a78 <HW_IPCC_Tx_Handler+0x20>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	0292      	lsls	r2, r2, #10
 8001ac2:	d4d9      	bmi.n	8001a78 <HW_IPCC_Tx_Handler+0x20>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001aca:	605a      	str	r2, [r3, #4]
  HW_IPCC_BLE_AclDataAckNot();
 8001acc:	f003 fd7c 	bl	80055c8 <HW_IPCC_BLE_AclDataAckNot>
  return;
 8001ad0:	e7d2      	b.n	8001a78 <HW_IPCC_Tx_Handler+0x20>
 8001ad2:	bf00      	nop
 8001ad4:	58000c00 	.word	0x58000c00
 8001ad8:	200001b8 	.word	0x200001b8

08001adc <HW_IPCC_MM_SendFreeBuf>:
{
 8001adc:	b510      	push	{r4, lr}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001ade:	4c08      	ldr	r4, [pc, #32]	; (8001b00 <HW_IPCC_MM_SendFreeBuf+0x24>)
 8001ae0:	68e3      	ldr	r3, [r4, #12]
 8001ae2:	071b      	lsls	r3, r3, #28
 8001ae4:	d506      	bpl.n	8001af4 <HW_IPCC_MM_SendFreeBuf+0x18>
    FreeBufCb = cb;
 8001ae6:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <HW_IPCC_MM_SendFreeBuf+0x28>)
 8001ae8:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001aea:	6863      	ldr	r3, [r4, #4]
 8001aec:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001af0:	6063      	str	r3, [r4, #4]
}
 8001af2:	bd10      	pop	{r4, pc}
    cb();
 8001af4:	4780      	blx	r0
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001af6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001afa:	60a3      	str	r3, [r4, #8]
  return;
 8001afc:	e7f9      	b.n	8001af2 <HW_IPCC_MM_SendFreeBuf+0x16>
 8001afe:	bf00      	nop
 8001b00:	58000c00 	.word	0x58000c00
 8001b04:	200001b8 	.word	0x200001b8

08001b08 <HW_IPCC_TRACES_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8001b08:	4a02      	ldr	r2, [pc, #8]	; (8001b14 <HW_IPCC_TRACES_Init+0xc>)
 8001b0a:	6853      	ldr	r3, [r2, #4]
 8001b0c:	f023 0308 	bic.w	r3, r3, #8
 8001b10:	6053      	str	r3, [r2, #4]
void HW_IPCC_TRACES_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );

  return;
}
 8001b12:	4770      	bx	lr
 8001b14:	58000c00 	.word	0x58000c00

08001b18 <HW_IPCC_Rx_Handler>:
{
 8001b18:	b538      	push	{r3, r4, r5, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001b1a:	4c12      	ldr	r4, [pc, #72]	; (8001b64 <HW_IPCC_Rx_Handler+0x4c>)
 8001b1c:	69e3      	ldr	r3, [r4, #28]
 8001b1e:	f013 0f02 	tst.w	r3, #2
 8001b22:	4625      	mov	r5, r4
 8001b24:	d007      	beq.n	8001b36 <HW_IPCC_Rx_Handler+0x1e>
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8001b26:	6863      	ldr	r3, [r4, #4]
 8001b28:	079b      	lsls	r3, r3, #30
 8001b2a:	d404      	bmi.n	8001b36 <HW_IPCC_Rx_Handler+0x1e>
  HW_IPCC_SYS_EvtNot();
 8001b2c:	f003 fd82 	bl	8005634 <HW_IPCC_SYS_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001b30:	2302      	movs	r3, #2
 8001b32:	60a3      	str	r3, [r4, #8]
  return;
 8001b34:	e009      	b.n	8001b4a <HW_IPCC_Rx_Handler+0x32>
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001b36:	69eb      	ldr	r3, [r5, #28]
 8001b38:	07d8      	lsls	r0, r3, #31
 8001b3a:	d507      	bpl.n	8001b4c <HW_IPCC_Rx_Handler+0x34>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8001b3c:	686b      	ldr	r3, [r5, #4]
 8001b3e:	07d9      	lsls	r1, r3, #31
 8001b40:	d404      	bmi.n	8001b4c <HW_IPCC_Rx_Handler+0x34>
  HW_IPCC_BLE_RxEvtNot();
 8001b42:	f003 fd2b 	bl	800559c <HW_IPCC_BLE_RxEvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001b46:	2301      	movs	r3, #1
 8001b48:	60ab      	str	r3, [r5, #8]
}
 8001b4a:	bd38      	pop	{r3, r4, r5, pc}
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001b4c:	4c05      	ldr	r4, [pc, #20]	; (8001b64 <HW_IPCC_Rx_Handler+0x4c>)
 8001b4e:	69e3      	ldr	r3, [r4, #28]
 8001b50:	071a      	lsls	r2, r3, #28
 8001b52:	d5fa      	bpl.n	8001b4a <HW_IPCC_Rx_Handler+0x32>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8001b54:	6863      	ldr	r3, [r4, #4]
 8001b56:	071b      	lsls	r3, r3, #28
 8001b58:	d4f7      	bmi.n	8001b4a <HW_IPCC_Rx_Handler+0x32>

static void HW_IPCC_TRACES_EvtHandler( void )
{
  HW_IPCC_TRACES_EvtNot();
 8001b5a:	f003 fdc1 	bl	80056e0 <HW_IPCC_TRACES_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001b5e:	2308      	movs	r3, #8
 8001b60:	e7e7      	b.n	8001b32 <HW_IPCC_Rx_Handler+0x1a>
 8001b62:	bf00      	nop
 8001b64:	58000c00 	.word	0x58000c00

08001b68 <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8001b6c:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b70:	4302      	orrs	r2, r0
 8001b72:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	4018      	ands	r0, r3
 8001b78:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001b7a:	9b01      	ldr	r3, [sp, #4]
}
 8001b7c:	b002      	add	sp, #8
 8001b7e:	4770      	bx	lr

08001b80 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b82:	b087      	sub	sp, #28
 8001b84:	4604      	mov	r4, r0
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001b86:	2214      	movs	r2, #20
 8001b88:	2100      	movs	r1, #0
 8001b8a:	a801      	add	r0, sp, #4
 8001b8c:	f003 fefb 	bl	8005986 <memset>
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001b90:	2002      	movs	r0, #2
 8001b92:	f7ff ffe9 	bl	8001b68 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001b96:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <BSP_LED_Init+0x48>)
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
  gpioinitstruct.Pull = GPIO_NOPULL;
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001b98:	4d0c      	ldr	r5, [pc, #48]	; (8001bcc <BSP_LED_Init+0x4c>)
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001b9a:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001b9e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001ba2:	9601      	str	r6, [sp, #4]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8001ba4:	2700      	movs	r7, #0
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e9cd 3702 	strd	r3, r7, [sp, #8]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001bac:	a901      	add	r1, sp, #4
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001bb2:	f000 fb99 	bl	80022e8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001bb6:	463a      	mov	r2, r7
 8001bb8:	4631      	mov	r1, r6
 8001bba:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8001bbe:	f000 fc49 	bl	8002454 <HAL_GPIO_WritePin>
}
 8001bc2:	b007      	add	sp, #28
 8001bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	080063fe 	.word	0x080063fe
 8001bcc:	20000008 	.word	0x20000008

08001bd0 <BSP_LED_On>:
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <BSP_LED_On+0x14>)
 8001bd2:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8001bd6:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <BSP_LED_On+0x18>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001bde:	f000 bc39 	b.w	8002454 <HAL_GPIO_WritePin>
 8001be2:	bf00      	nop
 8001be4:	080063fe 	.word	0x080063fe
 8001be8:	20000008 	.word	0x20000008

08001bec <BSP_LED_Off>:
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <BSP_LED_Off+0x14>)
 8001bee:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8001bf2:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <BSP_LED_Off+0x18>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001bfa:	f000 bc2b 	b.w	8002454 <HAL_GPIO_WritePin>
 8001bfe:	bf00      	nop
 8001c00:	080063fe 	.word	0x080063fe
 8001c04:	20000008 	.word	0x20000008

08001c08 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001c08:	b570      	push	{r4, r5, r6, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	4604      	mov	r4, r0
 8001c0e:	460e      	mov	r6, r1
  GPIO_InitTypeDef gpioinitstruct = {0};
 8001c10:	2214      	movs	r2, #20
 8001c12:	2100      	movs	r1, #0
 8001c14:	a801      	add	r0, sp, #4
 8001c16:	f003 feb6 	bl	8005986 <memset>
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001c1a:	b9cc      	cbnz	r4, 8001c50 <BSP_PB_Init+0x48>
 8001c1c:	2004      	movs	r0, #4
 8001c1e:	f7ff ffa3 	bl	8001b68 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001c22:	b9d6      	cbnz	r6, 8001c5a <BSP_PB_Init+0x52>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001c24:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <BSP_PB_Init+0x8c>)
 8001c26:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
    gpioinitstruct.Pull = GPIO_PULLUP;
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c2a:	2501      	movs	r5, #1
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001c2c:	88db      	ldrh	r3, [r3, #6]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8001c2e:	e9cd 3601 	strd	r3, r6, [sp, #4]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c32:	2302      	movs	r3, #2
 8001c34:	e9cd 5303 	strd	r5, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <BSP_PB_Init+0x90>)
 8001c3a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001c3e:	a901      	add	r1, sp, #4
 8001c40:	68e0      	ldr	r0, [r4, #12]
 8001c42:	f000 fb51 	bl	80022e8 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8001c46:	4628      	mov	r0, r5
 8001c48:	f7ff fae2 	bl	8001210 <HAL_Delay>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 8001c4c:	b006      	add	sp, #24
 8001c4e:	bd70      	pop	{r4, r5, r6, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001c50:	1e63      	subs	r3, r4, #1
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d8e5      	bhi.n	8001c22 <BSP_PB_Init+0x1a>
 8001c56:	2008      	movs	r0, #8
 8001c58:	e7e1      	b.n	8001c1e <BSP_PB_Init+0x16>
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001c5a:	2e01      	cmp	r6, #1
 8001c5c:	d1f6      	bne.n	8001c4c <BSP_PB_Init+0x44>
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001c5e:	4d0d      	ldr	r5, [pc, #52]	; (8001c94 <BSP_PB_Init+0x8c>)
    gpioinitstruct.Pull = GPIO_PULLUP;
 8001c60:	9603      	str	r6, [sp, #12]
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001c62:	eb05 0344 	add.w	r3, r5, r4, lsl #1
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001c66:	a901      	add	r1, sp, #4
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001c68:	88db      	ldrh	r3, [r3, #6]
 8001c6a:	9301      	str	r3, [sp, #4]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <BSP_PB_Init+0x94>)
 8001c6e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <BSP_PB_Init+0x90>)
 8001c72:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001c76:	442c      	add	r4, r5
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001c78:	68d8      	ldr	r0, [r3, #12]
 8001c7a:	f000 fb35 	bl	80022e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001c7e:	f994 400c 	ldrsb.w	r4, [r4, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	4620      	mov	r0, r4
 8001c86:	210f      	movs	r1, #15
 8001c88:	f000 f904 	bl	8001e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	f000 f935 	bl	8001efc <HAL_NVIC_EnableIRQ>
}
 8001c92:	e7db      	b.n	8001c4c <BSP_PB_Init+0x44>
 8001c94:	080063fe 	.word	0x080063fe
 8001c98:	20000008 	.word	0x20000008
 8001c9c:	10210000 	.word	0x10210000

08001ca0 <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8001ca0:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <SystemInit+0x60>)
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001ca6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001caa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001cae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001cb6:	f46f 7c82 	mvn.w	ip, #260	; 0x104
  RCC->CR |= RCC_CR_MSION;
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	f042 0201 	orr.w	r2, r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00070000U;
 8001cc2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001cc6:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001cc8:	6818      	ldr	r0, [r3, #0]
 8001cca:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 8001cce:	4462      	add	r2, ip
 8001cd0:	4002      	ands	r2, r0
 8001cd2:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001cd4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001cd8:	f022 0205 	bic.w	r2, r2, #5
 8001cdc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001ce0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001ce4:	f022 0201 	bic.w	r2, r2, #1
 8001ce8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001cec:	4a05      	ldr	r2, [pc, #20]	; (8001d04 <SystemInit+0x64>)
 8001cee:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001cf0:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cf8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001cfa:	6199      	str	r1, [r3, #24]
}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00
 8001d04:	22041000 	.word	0x22041000

08001d08 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001d08:	b530      	push	{r4, r5, lr}
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8001d0a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8001d0e:	4921      	ldr	r1, [pc, #132]	; (8001d94 <SystemCoreClockUpdate+0x8c>)
 8001d10:	6823      	ldr	r3, [r4, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d12:	68a0      	ldr	r0, [r4, #8]
 8001d14:	4a20      	ldr	r2, [pc, #128]	; (8001d98 <SystemCoreClockUpdate+0x90>)
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8001d16:	f3c3 1303 	ubfx	r3, r3, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d1a:	f000 000c 	and.w	r0, r0, #12
 8001d1e:	2808      	cmp	r0, #8
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8001d20:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d24:	d012      	beq.n	8001d4c <SystemCoreClockUpdate+0x44>
 8001d26:	280c      	cmp	r0, #12
 8001d28:	d012      	beq.n	8001d50 <SystemCoreClockUpdate+0x48>
 8001d2a:	2804      	cmp	r0, #4
 8001d2c:	d130      	bne.n	8001d90 <SystemCoreClockUpdate+0x88>
      SystemCoreClock = msirange;
      break;

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <SystemCoreClockUpdate+0x94>)
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
      
      SystemCoreClock = pllvco/pllr;
 8001d30:	6013      	str	r3, [r2, #0]
      break;
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d3c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8001d40:	6813      	ldr	r3, [r2, #0]
 8001d42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d44:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d48:	6013      	str	r3, [r2, #0]

}
 8001d4a:	bd30      	pop	{r4, r5, pc}
      SystemCoreClock = HSE_VALUE;
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <SystemCoreClockUpdate+0x98>)
 8001d4e:	e7ef      	b.n	8001d30 <SystemCoreClockUpdate+0x28>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001d50:	68e0      	ldr	r0, [r4, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8001d52:	68e3      	ldr	r3, [r4, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001d54:	f000 0003 	and.w	r0, r0, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8001d58:	f3c3 1302 	ubfx	r3, r3, #4, #3
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8001d5c:	2802      	cmp	r0, #2
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8001d5e:	f103 0301 	add.w	r3, r3, #1
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8001d62:	d10e      	bne.n	8001d82 <SystemCoreClockUpdate+0x7a>
        pllvco = (HSI_VALUE / pllm);
 8001d64:	480d      	ldr	r0, [pc, #52]	; (8001d9c <SystemCoreClockUpdate+0x94>)
        pllvco = (HSE_VALUE / pllm);
 8001d66:	fbb0 f3f3 	udiv	r3, r0, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d6a:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8001d6e:	68c4      	ldr	r4, [r0, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8001d70:	68c0      	ldr	r0, [r0, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d72:	f3c4 2406 	ubfx	r4, r4, #8, #7
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8001d76:	0f40      	lsrs	r0, r0, #29
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d78:	4363      	muls	r3, r4
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8001d7a:	3001      	adds	r0, #1
      SystemCoreClock = pllvco/pllr;
 8001d7c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001d80:	e7d6      	b.n	8001d30 <SystemCoreClockUpdate+0x28>
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8001d82:	2803      	cmp	r0, #3
 8001d84:	d101      	bne.n	8001d8a <SystemCoreClockUpdate+0x82>
        pllvco = (HSE_VALUE / pllm);
 8001d86:	4806      	ldr	r0, [pc, #24]	; (8001da0 <SystemCoreClockUpdate+0x98>)
 8001d88:	e7ed      	b.n	8001d66 <SystemCoreClockUpdate+0x5e>
        pllvco = (msirange / pllm);
 8001d8a:	fbb5 f3f3 	udiv	r3, r5, r3
 8001d8e:	e7ec      	b.n	8001d6a <SystemCoreClockUpdate+0x62>
      SystemCoreClock = msirange;
 8001d90:	6015      	str	r5, [r2, #0]
      break;
 8001d92:	e7ce      	b.n	8001d32 <SystemCoreClockUpdate+0x2a>
 8001d94:	08006410 	.word	0x08006410
 8001d98:	20000020 	.word	0x20000020
 8001d9c:	00f42400 	.word	0x00f42400
 8001da0:	01e84800 	.word	0x01e84800

08001da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da4:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8001da6:	4d0f      	ldr	r5, [pc, #60]	; (8001de4 <HAL_InitTick+0x40>)
 8001da8:	782b      	ldrb	r3, [r5, #0]
{
 8001daa:	4606      	mov	r6, r0
  if (uwTickFreq != 0U)
 8001dac:	b90b      	cbnz	r3, 8001db2 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dae:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001db0:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 8001db2:	f001 faf3 	bl	800339c <HAL_RCC_GetHCLKFreq>
 8001db6:	782a      	ldrb	r2, [r5, #0]
 8001db8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dc0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001dc4:	f000 f8bc 	bl	8001f40 <HAL_SYSTICK_Config>
 8001dc8:	4604      	mov	r4, r0
 8001dca:	2800      	cmp	r0, #0
 8001dcc:	d1ef      	bne.n	8001dae <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dce:	2e0f      	cmp	r6, #15
 8001dd0:	d8ed      	bhi.n	8001dae <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	4631      	mov	r1, r6
 8001dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8001dda:	f000 f85b 	bl	8001e94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dde:	606e      	str	r6, [r5, #4]
 8001de0:	4620      	mov	r0, r4
 8001de2:	e7e5      	b.n	8001db0 <HAL_InitTick+0xc>
 8001de4:	20000024 	.word	0x20000024

08001de8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de8:	4a09      	ldr	r2, [pc, #36]	; (8001e10 <HAL_Init+0x28>)
 8001dea:	6813      	ldr	r3, [r2, #0]
 8001dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001df0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df6:	f000 f83b 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f7ff ffd2 	bl	8001da4 <HAL_InitTick>
 8001e00:	4604      	mov	r4, r0
 8001e02:	b918      	cbnz	r0, 8001e0c <HAL_Init+0x24>
    HAL_MspInit();
 8001e04:	f7ff fb25 	bl	8001452 <HAL_MspInit>
}
 8001e08:	4620      	mov	r0, r4
 8001e0a:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001e0c:	2401      	movs	r4, #1
 8001e0e:	e7fb      	b.n	8001e08 <HAL_Init+0x20>
 8001e10:	58004000 	.word	0x58004000

08001e14 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001e14:	4a03      	ldr	r2, [pc, #12]	; (8001e24 <HAL_IncTick+0x10>)
 8001e16:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <HAL_IncTick+0x14>)
 8001e18:	6811      	ldr	r1, [r2, #0]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	440b      	add	r3, r1
 8001e1e:	6013      	str	r3, [r2, #0]
}
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20001594 	.word	0x20001594
 8001e28:	20000024 	.word	0x20000024

08001e2c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001e2c:	4b01      	ldr	r3, [pc, #4]	; (8001e34 <HAL_GetTick+0x8>)
 8001e2e:	6818      	ldr	r0, [r3, #0]
}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20001594 	.word	0x20001594

08001e38 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 8001e38:	4b01      	ldr	r3, [pc, #4]	; (8001e40 <HAL_GetTickPrio+0x8>)
 8001e3a:	6858      	ldr	r0, [r3, #4]
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000024 	.word	0x20000024

08001e44 <HAL_GetTickFreq>:
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
  return uwTickFreq;
}
 8001e44:	4b01      	ldr	r3, [pc, #4]	; (8001e4c <HAL_GetTickFreq+0x8>)
 8001e46:	7818      	ldrb	r0, [r3, #0]
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000024 	.word	0x20000024

08001e50 <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001e50:	4a02      	ldr	r2, [pc, #8]	; (8001e5c <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8001e52:	6853      	ldr	r3, [r2, #4]
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 8001e5a:	4770      	bx	lr
 8001e5c:	e0042000 	.word	0xe0042000

08001e60 <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001e60:	4a02      	ldr	r2, [pc, #8]	; (8001e6c <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8001e62:	6853      	ldr	r3, [r2, #4]
 8001e64:	f043 0302 	orr.w	r3, r3, #2
 8001e68:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 8001e6a:	4770      	bx	lr
 8001e6c:	e0042000 	.word	0xe0042000

08001e70 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e70:	4a07      	ldr	r2, [pc, #28]	; (8001e90 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001e72:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e74:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e78:	041b      	lsls	r3, r3, #16
 8001e7a:	0c1b      	lsrs	r3, r3, #16
 8001e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e80:	0200      	lsls	r0, r0, #8
 8001e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e86:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001e8a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001e8c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001e8e:	4770      	bx	lr
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e94:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e96:	b570      	push	{r4, r5, r6, lr}
 8001e98:	68dc      	ldr	r4, [r3, #12]
 8001e9a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e9e:	f1c4 0507 	rsb	r5, r4, #7
 8001ea2:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea4:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea8:	bf28      	it	cs
 8001eaa:	2504      	movcs	r5, #4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb0:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb2:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb6:	bf8c      	ite	hi
 8001eb8:	3c03      	subhi	r4, #3
 8001eba:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	ea21 0303 	bic.w	r3, r1, r3
 8001ec0:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec2:	fa06 f404 	lsl.w	r4, r6, r4
 8001ec6:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001eca:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ecc:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed0:	bfa8      	it	ge
 8001ed2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8001ed6:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eda:	bfbc      	itt	lt
 8001edc:	f000 000f 	andlt.w	r0, r0, #15
 8001ee0:	4a05      	ldrlt	r2, [pc, #20]	; (8001ef8 <HAL_NVIC_SetPriority+0x64>)
 8001ee2:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee4:	bfaa      	itet	ge
 8001ee6:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eea:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eec:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001ef0:	bd70      	pop	{r4, r5, r6, pc}
 8001ef2:	bf00      	nop
 8001ef4:	e000ed00 	.word	0xe000ed00
 8001ef8:	e000ed14 	.word	0xe000ed14

08001efc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001efc:	2800      	cmp	r0, #0
 8001efe:	db08      	blt.n	8001f12 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f00:	0942      	lsrs	r2, r0, #5
 8001f02:	2301      	movs	r3, #1
 8001f04:	f000 001f 	and.w	r0, r0, #31
 8001f08:	fa03 f000 	lsl.w	r0, r3, r0
 8001f0c:	4b01      	ldr	r3, [pc, #4]	; (8001f14 <HAL_NVIC_EnableIRQ+0x18>)
 8001f0e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001f12:	4770      	bx	lr
 8001f14:	e000e100 	.word	0xe000e100

08001f18 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f18:	2800      	cmp	r0, #0
 8001f1a:	db0d      	blt.n	8001f38 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1c:	0943      	lsrs	r3, r0, #5
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f000 001f 	and.w	r0, r0, #31
 8001f24:	fa02 f000 	lsl.w	r0, r2, r0
 8001f28:	3320      	adds	r3, #32
 8001f2a:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <HAL_NVIC_DisableIRQ+0x24>)
 8001f2c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001f30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f34:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000e100 	.word	0xe000e100

08001f40 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f40:	3801      	subs	r0, #1
 8001f42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001f46:	d20a      	bcs.n	8001f5e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4a:	4a07      	ldr	r2, [pc, #28]	; (8001f68 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4e:	21f0      	movs	r1, #240	; 0xf0
 8001f50:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f54:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f56:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f58:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001f5e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000e010 	.word	0xe000e010
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <HAL_NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f6c:	2800      	cmp	r0, #0
 8001f6e:	db09      	blt.n	8001f84 <HAL_NVIC_SetPendingIRQ+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f70:	0943      	lsrs	r3, r0, #5
 8001f72:	2201      	movs	r2, #1
 8001f74:	f000 001f 	and.w	r0, r0, #31
 8001f78:	fa02 f000 	lsl.w	r0, r2, r0
 8001f7c:	3340      	adds	r3, #64	; 0x40
 8001f7e:	4a02      	ldr	r2, [pc, #8]	; (8001f88 <HAL_NVIC_SetPendingIRQ+0x1c>)
 8001f80:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000e100 	.word	0xe000e100

08001f8c <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f8c:	2800      	cmp	r0, #0
 8001f8e:	db09      	blt.n	8001fa4 <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f90:	0943      	lsrs	r3, r0, #5
 8001f92:	2201      	movs	r2, #1
 8001f94:	f000 001f 	and.w	r0, r0, #31
 8001f98:	fa02 f000 	lsl.w	r0, r2, r0
 8001f9c:	3360      	adds	r3, #96	; 0x60
 8001f9e:	4a02      	ldr	r2, [pc, #8]	; (8001fa8 <HAL_NVIC_ClearPendingIRQ+0x1c>)
 8001fa0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000e100 	.word	0xe000e100

08001fac <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fac:	b570      	push	{r4, r5, r6, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fae:	e9d0 4513 	ldrd	r4, r5, [r0, #76]	; 0x4c
 8001fb2:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001fb4:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8001fb6:	b114      	cbz	r4, 8001fbe <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fb8:	e9d0 4516 	ldrd	r4, r5, [r0, #88]	; 0x58
 8001fbc:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001fbe:	e9d0 6410 	ldrd	r6, r4, [r0, #64]	; 0x40
 8001fc2:	f004 051c 	and.w	r5, r4, #28
 8001fc6:	2401      	movs	r4, #1
 8001fc8:	40ac      	lsls	r4, r5
 8001fca:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fcc:	6804      	ldr	r4, [r0, #0]
 8001fce:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fd0:	6883      	ldr	r3, [r0, #8]
 8001fd2:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fd4:	bf0b      	itete	eq
 8001fd6:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001fd8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001fda:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001fdc:	60e2      	strne	r2, [r4, #12]
  }
}
 8001fde:	bd70      	pop	{r4, r5, r6, pc}

08001fe0 <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001fe0:	4910      	ldr	r1, [pc, #64]	; (8002024 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8001fe2:	6803      	ldr	r3, [r0, #0]
 8001fe4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001fe6:	428b      	cmp	r3, r1
 8001fe8:	f022 0203 	bic.w	r2, r2, #3
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001fec:	bf95      	itete	ls
 8001fee:	f102 4280 	addls.w	r2, r2, #1073741824	; 0x40000000
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001ff2:	490d      	ldrhi	r1, [pc, #52]	; (8002028 <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001ff4:	f502 3202 	addls.w	r2, r2, #133120	; 0x20800
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001ff8:	1889      	addhi	r1, r1, r2
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001ffa:	bf98      	it	ls
 8001ffc:	6482      	strls	r2, [r0, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ffe:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002000:	4a0a      	ldr	r2, [pc, #40]	; (800202c <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 8002002:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002004:	f1a3 0308 	sub.w	r3, r3, #8
 8002008:	f04f 0214 	mov.w	r2, #20
 800200c:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8002010:	f04f 0201 	mov.w	r2, #1
 8002014:	f003 031c 	and.w	r3, r3, #28
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800201c:	bf88      	it	hi
 800201e:	6481      	strhi	r1, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8002020:	6503      	str	r3, [r0, #80]	; 0x50
}
 8002022:	4770      	bx	lr
 8002024:	40020407 	.word	0x40020407
 8002028:	4002081c 	.word	0x4002081c
 800202c:	40020880 	.word	0x40020880

08002030 <HAL_DMA_Init>:
{
 8002030:	b510      	push	{r4, lr}
  if (hdma == NULL)
 8002032:	4604      	mov	r4, r0
 8002034:	2800      	cmp	r0, #0
 8002036:	d05d      	beq.n	80020f4 <HAL_DMA_Init+0xc4>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002038:	6801      	ldr	r1, [r0, #0]
 800203a:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <HAL_DMA_Init+0xc8>)
 800203c:	4299      	cmp	r1, r3
 800203e:	f04f 0014 	mov.w	r0, #20
 8002042:	d84a      	bhi.n	80020da <HAL_DMA_Init+0xaa>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002044:	4a2d      	ldr	r2, [pc, #180]	; (80020fc <HAL_DMA_Init+0xcc>)
 8002046:	440a      	add	r2, r1
 8002048:	fbb2 f2f0 	udiv	r2, r2, r0
 800204c:	0092      	lsls	r2, r2, #2
 800204e:	6462      	str	r2, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002050:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8002054:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8002056:	2302      	movs	r3, #2
 8002058:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 800205c:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8002060:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002062:	6920      	ldr	r0, [r4, #16]
  tmp = hdma->Instance->CCR;
 8002064:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002066:	4303      	orrs	r3, r0
 8002068:	6960      	ldr	r0, [r4, #20]
 800206a:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800206c:	69a0      	ldr	r0, [r4, #24]
 800206e:	4303      	orrs	r3, r0
 8002070:	69e0      	ldr	r0, [r4, #28]
 8002072:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002074:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002076:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800207a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 800207e:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8002080:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8002082:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002084:	4620      	mov	r0, r4
 8002086:	f7ff ffab 	bl	8001fe0 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800208a:	68a3      	ldr	r3, [r4, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800208c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800208e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002092:	bf04      	itt	eq
 8002094:	2300      	moveq	r3, #0
 8002096:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002098:	6862      	ldr	r2, [r4, #4]
 800209a:	b2d3      	uxtb	r3, r2
 800209c:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800209e:	e9d4 1013 	ldrd	r1, r0, [r4, #76]	; 0x4c
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80020a2:	3a01      	subs	r2, #1
 80020a4:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020a6:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80020a8:	d81f      	bhi.n	80020ea <HAL_DMA_Init+0xba>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80020aa:	4a15      	ldr	r2, [pc, #84]	; (8002100 <HAL_DMA_Init+0xd0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80020ac:	4815      	ldr	r0, [pc, #84]	; (8002104 <HAL_DMA_Init+0xd4>)
 80020ae:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80020b0:	441a      	add	r2, r3

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80020b2:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80020b4:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80020b6:	2101      	movs	r1, #1
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80020c0:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80020c2:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80020c4:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80020c6:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020c8:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ca:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80020cc:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ce:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80020d0:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80020d4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
 80020d8:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80020da:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_DMA_Init+0xd8>)
 80020dc:	440b      	add	r3, r1
 80020de:	fbb3 f3f0 	udiv	r3, r3, r0
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_DMA_Init+0xdc>)
 80020e8:	e7b4      	b.n	8002054 <HAL_DMA_Init+0x24>
    hdma->DMAmuxRequestGen = 0U;
 80020ea:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 80020ec:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80020f0:	65e3      	str	r3, [r4, #92]	; 0x5c
 80020f2:	e7ea      	b.n	80020ca <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 80020f4:	2001      	movs	r0, #1
 80020f6:	e7ef      	b.n	80020d8 <HAL_DMA_Init+0xa8>
 80020f8:	40020407 	.word	0x40020407
 80020fc:	bffdfff8 	.word	0xbffdfff8
 8002100:	1000823f 	.word	0x1000823f
 8002104:	40020940 	.word	0x40020940
 8002108:	bffdfbf8 	.word	0xbffdfbf8
 800210c:	40020400 	.word	0x40020400

08002110 <HAL_DMA_Start_IT>:
{
 8002110:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8002112:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 8002116:	2d01      	cmp	r5, #1
{
 8002118:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800211a:	d039      	beq.n	8002190 <HAL_DMA_Start_IT+0x80>
 800211c:	2501      	movs	r5, #1
 800211e:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8002122:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 8002126:	2d01      	cmp	r5, #1
 8002128:	f04f 0600 	mov.w	r6, #0
 800212c:	f04f 0502 	mov.w	r5, #2
 8002130:	d12c      	bne.n	800218c <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002132:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002136:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002138:	6806      	ldr	r6, [r0, #0]
 800213a:	6835      	ldr	r5, [r6, #0]
 800213c:	f025 0501 	bic.w	r5, r5, #1
 8002140:	6035      	str	r5, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002142:	f7ff ff33 	bl	8001fac <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8002146:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002148:	6803      	ldr	r3, [r0, #0]
 800214a:	b1ba      	cbz	r2, 800217c <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	f042 020e 	orr.w	r2, r2, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002152:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002154:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002156:	6811      	ldr	r1, [r2, #0]
 8002158:	03c9      	lsls	r1, r1, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800215a:	bf42      	ittt	mi
 800215c:	6811      	ldrmi	r1, [r2, #0]
 800215e:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 8002162:	6011      	strmi	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8002164:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002166:	b11a      	cbz	r2, 8002170 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002168:	6811      	ldr	r1, [r2, #0]
 800216a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800216e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002178:	2000      	movs	r0, #0
}
 800217a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	f022 0204 	bic.w	r2, r2, #4
 8002182:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	f042 020a 	orr.w	r2, r2, #10
 800218a:	e7e2      	b.n	8002152 <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 800218c:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8002190:	2002      	movs	r0, #2
 8002192:	e7f2      	b.n	800217a <HAL_DMA_Start_IT+0x6a>

08002194 <HAL_DMA_Abort_IT>:
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002194:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002198:	2b02      	cmp	r3, #2
{
 800219a:	b510      	push	{r4, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800219c:	d003      	beq.n	80021a6 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800219e:	2304      	movs	r3, #4
 80021a0:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80021a2:	2001      	movs	r0, #1
}
 80021a4:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021a6:	6803      	ldr	r3, [r0, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	f022 020e 	bic.w	r2, r2, #14
 80021ae:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	f022 0201 	bic.w	r2, r2, #1
 80021b6:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021b8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80021ba:	6813      	ldr	r3, [r2, #0]
 80021bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021c0:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80021c2:	e9d0 1310 	ldrd	r1, r3, [r0, #64]	; 0x40
 80021c6:	f003 021c 	and.w	r2, r3, #28
 80021ca:	2301      	movs	r3, #1
 80021cc:	4093      	lsls	r3, r2
 80021ce:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021d0:	e9d0 3213 	ldrd	r3, r2, [r0, #76]	; 0x4c
 80021d4:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80021d6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80021d8:	b133      	cbz	r3, 80021e8 <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021e0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021e2:	e9d0 3216 	ldrd	r3, r2, [r0, #88]	; 0x58
 80021e6:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80021e8:	2301      	movs	r3, #1
 80021ea:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferAbortCallback != NULL)
 80021ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80021f0:	2400      	movs	r4, #0
 80021f2:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80021f6:	b113      	cbz	r3, 80021fe <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 80021f8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80021fa:	4620      	mov	r0, r4
 80021fc:	e7d2      	b.n	80021a4 <HAL_DMA_Abort_IT+0x10>
 80021fe:	4618      	mov	r0, r3
 8002200:	e7d0      	b.n	80021a4 <HAL_DMA_Abort_IT+0x10>

08002202 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002202:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002204:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8002206:	6803      	ldr	r3, [r0, #0]
{
 8002208:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800220a:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800220e:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002210:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002212:	2404      	movs	r4, #4
 8002214:	4094      	lsls	r4, r2
 8002216:	4234      	tst	r4, r6
 8002218:	d00e      	beq.n	8002238 <HAL_DMA_IRQHandler+0x36>
 800221a:	f015 0f04 	tst.w	r5, #4
 800221e:	d00b      	beq.n	8002238 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002224:	bf5e      	ittt	pl
 8002226:	681a      	ldrpl	r2, [r3, #0]
 8002228:	f022 0204 	bicpl.w	r2, r2, #4
 800222c:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 800222e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002230:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8002232:	b373      	cbz	r3, 8002292 <HAL_DMA_IRQHandler+0x90>
}
 8002234:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002236:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002238:	2402      	movs	r4, #2
 800223a:	4094      	lsls	r4, r2
 800223c:	4234      	tst	r4, r6
 800223e:	d012      	beq.n	8002266 <HAL_DMA_IRQHandler+0x64>
 8002240:	f015 0f02 	tst.w	r5, #2
 8002244:	d00f      	beq.n	8002266 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	0695      	lsls	r5, r2, #26
 800224a:	d406      	bmi.n	800225a <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	f022 020a 	bic.w	r2, r2, #10
 8002252:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002254:	2301      	movs	r3, #1
 8002256:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800225a:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800225c:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 800225e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8002262:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002264:	e7e5      	b.n	8002232 <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002266:	2408      	movs	r4, #8
 8002268:	4094      	lsls	r4, r2
 800226a:	4234      	tst	r4, r6
 800226c:	d011      	beq.n	8002292 <HAL_DMA_IRQHandler+0x90>
 800226e:	072c      	lsls	r4, r5, #28
 8002270:	d50f      	bpl.n	8002292 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002272:	681c      	ldr	r4, [r3, #0]
 8002274:	f024 040e 	bic.w	r4, r4, #14
 8002278:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800227a:	2301      	movs	r3, #1
 800227c:	fa03 f202 	lsl.w	r2, r3, r2
 8002280:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002282:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002284:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002288:	2300      	movs	r3, #0
 800228a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 800228e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002290:	e7cf      	b.n	8002232 <HAL_DMA_IRQHandler+0x30>
}
 8002292:	bc70      	pop	{r4, r5, r6}
 8002294:	4770      	bx	lr
	...

08002298 <HAL_DMAEx_ConfigMuxSync>:
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002298:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800229c:	2b01      	cmp	r3, #1
{
 800229e:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State == HAL_DMA_STATE_READY)
 80022a0:	d11b      	bne.n	80022da <HAL_DMAEx_ConfigMuxSync+0x42>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 80022a2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d019      	beq.n	80022de <HAL_DMAEx_ConfigMuxSync+0x46>

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 80022aa:	68cb      	ldr	r3, [r1, #12]
 80022ac:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80022ae:	1e5a      	subs	r2, r3, #1
 80022b0:	e9d1 3600 	ldrd	r3, r6, [r1]
 80022b4:	4333      	orrs	r3, r6
 80022b6:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 80022ba:	7a0a      	ldrb	r2, [r1, #8]
 80022bc:	6825      	ldr	r5, [r4, #0]
 80022be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80022c2:	7a4a      	ldrb	r2, [r1, #9]
 80022c4:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 80022c8:	4a06      	ldr	r2, [pc, #24]	; (80022e4 <HAL_DMAEx_ConfigMuxSync+0x4c>)
 80022ca:	402a      	ands	r2, r5
 80022cc:	4313      	orrs	r3, r2
 80022ce:	6023      	str	r3, [r4, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 80022d0:	2300      	movs	r3, #0
 80022d2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    return HAL_OK;
 80022d6:	4618      	mov	r0, r3
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
  }
}
 80022d8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80022da:	2001      	movs	r0, #1
 80022dc:	e7fc      	b.n	80022d8 <HAL_DMAEx_ConfigMuxSync+0x40>
    __HAL_LOCK(hdma);
 80022de:	2002      	movs	r0, #2
 80022e0:	e7fa      	b.n	80022d8 <HAL_DMAEx_ConfigMuxSync+0x40>
 80022e2:	bf00      	nop
 80022e4:	e000fdff 	.word	0xe000fdff

080022e8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022ec:	4a57      	ldr	r2, [pc, #348]	; (800244c <HAL_GPIO_Init+0x164>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ee:	f8d1 e000 	ldr.w	lr, [r1]
  uint32_t position = 0x00u;
 80022f2:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022f4:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f8:	fa3e f403 	lsrs.w	r4, lr, r3
 80022fc:	d101      	bne.n	8002302 <HAL_GPIO_Init+0x1a>
      }
    }
    
    position++;
  }
}
 80022fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002302:	2401      	movs	r4, #1
 8002304:	fa04 f803 	lsl.w	r8, r4, r3
    if (iocurrent != 0x00u)
 8002308:	ea18 050e 	ands.w	r5, r8, lr
 800230c:	f000 8094 	beq.w	8002438 <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002310:	684c      	ldr	r4, [r1, #4]
 8002312:	f024 0a10 	bic.w	sl, r4, #16
 8002316:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800231a:	2603      	movs	r6, #3
 800231c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8002320:	fa06 f60c 	lsl.w	r6, r6, ip
 8002324:	2f01      	cmp	r7, #1
 8002326:	ea6f 0606 	mvn.w	r6, r6
 800232a:	d811      	bhi.n	8002350 <HAL_GPIO_Init+0x68>
        temp = GPIOx->OSPEEDR;
 800232c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800232e:	ea07 0b06 	and.w	fp, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002332:	68cf      	ldr	r7, [r1, #12]
 8002334:	fa07 f70c 	lsl.w	r7, r7, ip
 8002338:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 800233c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800233e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002340:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002344:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8002348:	409f      	lsls	r7, r3
 800234a:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 800234e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002350:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002352:	ea07 0806 	and.w	r8, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002356:	688f      	ldr	r7, [r1, #8]
 8002358:	fa07 f70c 	lsl.w	r7, r7, ip
 800235c:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002360:	f1ba 0f02 	cmp.w	sl, #2
      GPIOx->PUPDR = temp;
 8002364:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002366:	d114      	bne.n	8002392 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3u];
 8002368:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 800236c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002370:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002374:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002378:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800237c:	fa09 fb0a 	lsl.w	fp, r9, sl
 8002380:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002384:	690f      	ldr	r7, [r1, #16]
 8002386:	fa07 f70a 	lsl.w	r7, r7, sl
 800238a:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 800238e:	f8c8 7020 	str.w	r7, [r8, #32]
      temp = GPIOx->MODER;
 8002392:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002394:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002396:	f004 0703 	and.w	r7, r4, #3
 800239a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800239e:	ea4c 0606 	orr.w	r6, ip, r6
      GPIOx->MODER = temp;
 80023a2:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023a4:	00e6      	lsls	r6, r4, #3
 80023a6:	d547      	bpl.n	8002438 <HAL_GPIO_Init+0x150>
 80023a8:	f023 0703 	bic.w	r7, r3, #3
 80023ac:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80023b0:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023b4:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 80023b8:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023ba:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80023be:	fa09 f80c 	lsl.w	r8, r9, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023c2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023c6:	ea26 0808 	bic.w	r8, r6, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023ca:	d037      	beq.n	800243c <HAL_GPIO_Init+0x154>
 80023cc:	4e20      	ldr	r6, [pc, #128]	; (8002450 <HAL_GPIO_Init+0x168>)
 80023ce:	42b0      	cmp	r0, r6
 80023d0:	d036      	beq.n	8002440 <HAL_GPIO_Init+0x158>
 80023d2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80023d6:	42b0      	cmp	r0, r6
 80023d8:	d034      	beq.n	8002444 <HAL_GPIO_Init+0x15c>
 80023da:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80023de:	42b0      	cmp	r0, r6
 80023e0:	d032      	beq.n	8002448 <HAL_GPIO_Init+0x160>
 80023e2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80023e6:	42b0      	cmp	r0, r6
 80023e8:	bf14      	ite	ne
 80023ea:	2607      	movne	r6, #7
 80023ec:	2604      	moveq	r6, #4
 80023ee:	fa06 f60c 	lsl.w	r6, r6, ip
 80023f2:	ea46 0608 	orr.w	r6, r6, r8
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023f6:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 80023f8:	f8d2 6080 	ldr.w	r6, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 80023fc:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023fe:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8002402:	bf0c      	ite	eq
 8002404:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002406:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8002408:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
        temp = EXTI->EMR1;
 800240c:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002410:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8002414:	bf0c      	ite	eq
 8002416:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002418:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 800241a:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI->RTSR1;
 800241e:	6816      	ldr	r6, [r2, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002420:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8002424:	bf0c      	ite	eq
 8002426:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002428:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 800242a:	6016      	str	r6, [r2, #0]
        temp = EXTI->FTSR1;
 800242c:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800242e:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8002430:	bf54      	ite	pl
 8002432:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8002434:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8002436:	6056      	str	r6, [r2, #4]
    position++;
 8002438:	3301      	adds	r3, #1
 800243a:	e75d      	b.n	80022f8 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800243c:	2600      	movs	r6, #0
 800243e:	e7d6      	b.n	80023ee <HAL_GPIO_Init+0x106>
 8002440:	2601      	movs	r6, #1
 8002442:	e7d4      	b.n	80023ee <HAL_GPIO_Init+0x106>
 8002444:	2602      	movs	r6, #2
 8002446:	e7d2      	b.n	80023ee <HAL_GPIO_Init+0x106>
 8002448:	2603      	movs	r6, #3
 800244a:	e7d0      	b.n	80023ee <HAL_GPIO_Init+0x106>
 800244c:	58000800 	.word	0x58000800
 8002450:	48000400 	.word	0x48000400

08002454 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002454:	b10a      	cbz	r2, 800245a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002456:	6181      	str	r1, [r0, #24]
 8002458:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800245a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800245c:	4770      	bx	lr

0800245e <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800245e:	6803      	ldr	r3, [r0, #0]
 8002460:	699a      	ldr	r2, [r3, #24]
 8002462:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8002464:	bf44      	itt	mi
 8002466:	2200      	movmi	r2, #0
 8002468:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800246a:	699a      	ldr	r2, [r3, #24]
 800246c:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800246e:	bf5e      	ittt	pl
 8002470:	699a      	ldrpl	r2, [r3, #24]
 8002472:	f042 0201 	orrpl.w	r2, r2, #1
 8002476:	619a      	strpl	r2, [r3, #24]
  }
}
 8002478:	4770      	bx	lr
	...

0800247c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800247c:	b530      	push	{r4, r5, lr}
 800247e:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002480:	6804      	ldr	r4, [r0, #0]
 8002482:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 8002486:	4313      	orrs	r3, r2
 8002488:	f3c1 0209 	ubfx	r2, r1, #0, #10
 800248c:	431a      	orrs	r2, r3
 800248e:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <I2C_TransferConfig+0x24>)
 8002490:	6860      	ldr	r0, [r4, #4]
 8002492:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 8002496:	ea20 0003 	bic.w	r0, r0, r3
 800249a:	4302      	orrs	r2, r0
 800249c:	6062      	str	r2, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800249e:	bd30      	pop	{r4, r5, pc}
 80024a0:	03ff63ff 	.word	0x03ff63ff

080024a4 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024a4:	6803      	ldr	r3, [r0, #0]
{
 80024a6:	b570      	push	{r4, r5, r6, lr}
 80024a8:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024aa:	6998      	ldr	r0, [r3, #24]
 80024ac:	f010 0010 	ands.w	r0, r0, #16
{
 80024b0:	460d      	mov	r5, r1
 80024b2:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024b4:	d116      	bne.n	80024e4 <I2C_IsAcknowledgeFailed+0x40>
}
 80024b6:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 80024b8:	1c69      	adds	r1, r5, #1
 80024ba:	d014      	beq.n	80024e6 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024bc:	f7ff fcb6 	bl	8001e2c <HAL_GetTick>
 80024c0:	1b80      	subs	r0, r0, r6
 80024c2:	42a8      	cmp	r0, r5
 80024c4:	d800      	bhi.n	80024c8 <I2C_IsAcknowledgeFailed+0x24>
 80024c6:	b96d      	cbnz	r5, 80024e4 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80024ca:	f043 0320 	orr.w	r3, r3, #32
 80024ce:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024d0:	2320      	movs	r3, #32
 80024d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80024dc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80024e0:	2001      	movs	r0, #1
 80024e2:	e7e8      	b.n	80024b6 <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024e4:	6823      	ldr	r3, [r4, #0]
 80024e6:	6999      	ldr	r1, [r3, #24]
 80024e8:	068a      	lsls	r2, r1, #26
 80024ea:	d5e5      	bpl.n	80024b8 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ec:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ee:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f0:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80024f2:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024f4:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80024f6:	f7ff ffb2 	bl	800245e <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80024fa:	6822      	ldr	r2, [r4, #0]
 80024fc:	6853      	ldr	r3, [r2, #4]
 80024fe:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002502:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002506:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800250a:	f023 0301 	bic.w	r3, r3, #1
 800250e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002510:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002512:	f043 0304 	orr.w	r3, r3, #4
 8002516:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002518:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 800251c:	e7db      	b.n	80024d6 <I2C_IsAcknowledgeFailed+0x32>

0800251e <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800251e:	b570      	push	{r4, r5, r6, lr}
 8002520:	4604      	mov	r4, r0
 8002522:	460d      	mov	r5, r1
 8002524:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002526:	6823      	ldr	r3, [r4, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	075b      	lsls	r3, r3, #29
 800252c:	d40e      	bmi.n	800254c <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800252e:	4632      	mov	r2, r6
 8002530:	4629      	mov	r1, r5
 8002532:	4620      	mov	r0, r4
 8002534:	f7ff ffb6 	bl	80024a4 <I2C_IsAcknowledgeFailed>
 8002538:	b9f0      	cbnz	r0, 8002578 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800253a:	6823      	ldr	r3, [r4, #0]
 800253c:	699a      	ldr	r2, [r3, #24]
 800253e:	0691      	lsls	r1, r2, #26
 8002540:	d51c      	bpl.n	800257c <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002542:	699a      	ldr	r2, [r3, #24]
 8002544:	0752      	lsls	r2, r2, #29
 8002546:	d503      	bpl.n	8002550 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8002548:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800254a:	b10a      	cbz	r2, 8002550 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 800254c:	2000      	movs	r0, #0
}
 800254e:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002550:	2120      	movs	r1, #32
 8002552:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800255a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800255e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002562:	f022 0201 	bic.w	r2, r2, #1
 8002566:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002568:	2300      	movs	r3, #0
 800256a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800256c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002574:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002578:	2001      	movs	r0, #1
 800257a:	e7e8      	b.n	800254e <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800257c:	f7ff fc56 	bl	8001e2c <HAL_GetTick>
 8002580:	1b80      	subs	r0, r0, r6
 8002582:	42a8      	cmp	r0, r5
 8002584:	d801      	bhi.n	800258a <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 8002586:	2d00      	cmp	r5, #0
 8002588:	d1cd      	bne.n	8002526 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800258a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800258c:	f043 0320 	orr.w	r3, r3, #32
 8002590:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002592:	2320      	movs	r3, #32
 8002594:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8002598:	2300      	movs	r3, #0
 800259a:	e7eb      	b.n	8002574 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

0800259c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	4604      	mov	r4, r0
 80025a0:	460d      	mov	r5, r1
 80025a2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025a4:	6823      	ldr	r3, [r4, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	069b      	lsls	r3, r3, #26
 80025aa:	d501      	bpl.n	80025b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80025ac:	2000      	movs	r0, #0
}
 80025ae:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80025b0:	4632      	mov	r2, r6
 80025b2:	4629      	mov	r1, r5
 80025b4:	4620      	mov	r0, r4
 80025b6:	f7ff ff75 	bl	80024a4 <I2C_IsAcknowledgeFailed>
 80025ba:	b990      	cbnz	r0, 80025e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025bc:	f7ff fc36 	bl	8001e2c <HAL_GetTick>
 80025c0:	1b80      	subs	r0, r0, r6
 80025c2:	42a8      	cmp	r0, r5
 80025c4:	d801      	bhi.n	80025ca <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80025c6:	2d00      	cmp	r5, #0
 80025c8:	d1ec      	bne.n	80025a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025cc:	f043 0320 	orr.w	r3, r3, #32
 80025d0:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025d2:	2320      	movs	r3, #32
 80025d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d8:	2300      	movs	r3, #0
 80025da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80025de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80025e2:	2001      	movs	r0, #1
 80025e4:	e7e3      	b.n	80025ae <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

080025e6 <I2C_WaitOnFlagUntilTimeout>:
{
 80025e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025ea:	9f06      	ldr	r7, [sp, #24]
 80025ec:	4604      	mov	r4, r0
 80025ee:	4688      	mov	r8, r1
 80025f0:	4616      	mov	r6, r2
 80025f2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025f4:	6822      	ldr	r2, [r4, #0]
 80025f6:	6993      	ldr	r3, [r2, #24]
 80025f8:	ea38 0303 	bics.w	r3, r8, r3
 80025fc:	bf0c      	ite	eq
 80025fe:	2301      	moveq	r3, #1
 8002600:	2300      	movne	r3, #0
 8002602:	42b3      	cmp	r3, r6
 8002604:	d001      	beq.n	800260a <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8002606:	2000      	movs	r0, #0
 8002608:	e015      	b.n	8002636 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800260a:	1c6b      	adds	r3, r5, #1
 800260c:	d0f3      	beq.n	80025f6 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800260e:	f7ff fc0d 	bl	8001e2c <HAL_GetTick>
 8002612:	1bc0      	subs	r0, r0, r7
 8002614:	42a8      	cmp	r0, r5
 8002616:	d801      	bhi.n	800261c <I2C_WaitOnFlagUntilTimeout+0x36>
 8002618:	2d00      	cmp	r5, #0
 800261a:	d1eb      	bne.n	80025f4 <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800261c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800261e:	f043 0320 	orr.w	r3, r3, #32
 8002622:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002624:	2320      	movs	r3, #32
 8002626:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800262a:	2300      	movs	r3, #0
 800262c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8002630:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002634:	2001      	movs	r0, #1
}
 8002636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800263a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800263a:	b570      	push	{r4, r5, r6, lr}
 800263c:	4604      	mov	r4, r0
 800263e:	460d      	mov	r5, r1
 8002640:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002642:	6823      	ldr	r3, [r4, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	079b      	lsls	r3, r3, #30
 8002648:	d501      	bpl.n	800264e <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800264a:	2000      	movs	r0, #0
}
 800264c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800264e:	4632      	mov	r2, r6
 8002650:	4629      	mov	r1, r5
 8002652:	4620      	mov	r0, r4
 8002654:	f7ff ff26 	bl	80024a4 <I2C_IsAcknowledgeFailed>
 8002658:	b9a0      	cbnz	r0, 8002684 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800265a:	1c6a      	adds	r2, r5, #1
 800265c:	d0f1      	beq.n	8002642 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800265e:	f7ff fbe5 	bl	8001e2c <HAL_GetTick>
 8002662:	1b80      	subs	r0, r0, r6
 8002664:	42a8      	cmp	r0, r5
 8002666:	d801      	bhi.n	800266c <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002668:	2d00      	cmp	r5, #0
 800266a:	d1ea      	bne.n	8002642 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800266c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800266e:	f043 0320 	orr.w	r3, r3, #32
 8002672:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002674:	2320      	movs	r3, #32
 8002676:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800267a:	2300      	movs	r3, #0
 800267c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8002680:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002684:	2001      	movs	r0, #1
 8002686:	e7e1      	b.n	800264c <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08002688 <HAL_I2C_Init>:
{
 8002688:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800268a:	4604      	mov	r4, r0
 800268c:	2800      	cmp	r0, #0
 800268e:	d04a      	beq.n	8002726 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002690:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002694:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002698:	b91b      	cbnz	r3, 80026a2 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800269a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800269e:	f7fe fee7 	bl	8001470 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80026a2:	2324      	movs	r3, #36	; 0x24
 80026a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80026a8:	6823      	ldr	r3, [r4, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	f022 0201 	bic.w	r2, r2, #1
 80026b0:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026b2:	6862      	ldr	r2, [r4, #4]
 80026b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026b8:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026c0:	609a      	str	r2, [r3, #8]
 80026c2:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026c6:	2901      	cmp	r1, #1
 80026c8:	d124      	bne.n	8002714 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ce:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80026d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026da:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026e2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80026e4:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	69a1      	ldr	r1, [r4, #24]
 80026ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80026f0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026f2:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	f042 0201 	orr.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002702:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002704:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002706:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002708:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800270c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800270e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002712:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002714:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002718:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800271a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800271c:	bf04      	itt	eq
 800271e:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8002722:	605a      	streq	r2, [r3, #4]
 8002724:	e7d4      	b.n	80026d0 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8002726:	2001      	movs	r0, #1
 8002728:	e7f3      	b.n	8002712 <HAL_I2C_Init+0x8a>
	...

0800272c <HAL_I2C_Master_Transmit>:
{
 800272c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002730:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002732:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002736:	2b20      	cmp	r3, #32
{
 8002738:	4604      	mov	r4, r0
 800273a:	460e      	mov	r6, r1
 800273c:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800273e:	f040 8082 	bne.w	8002846 <HAL_I2C_Master_Transmit+0x11a>
    __HAL_LOCK(hi2c);
 8002742:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002746:	2b01      	cmp	r3, #1
 8002748:	d07d      	beq.n	8002846 <HAL_I2C_Master_Transmit+0x11a>
 800274a:	2701      	movs	r7, #1
 800274c:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002750:	f7ff fb6c 	bl	8001e2c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002754:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8002756:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002758:	9000      	str	r0, [sp, #0]
 800275a:	463a      	mov	r2, r7
 800275c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002760:	4620      	mov	r0, r4
 8002762:	f7ff ff40 	bl	80025e6 <I2C_WaitOnFlagUntilTimeout>
 8002766:	b118      	cbz	r0, 8002770 <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8002768:	2001      	movs	r0, #1
}
 800276a:	b003      	add	sp, #12
 800276c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002770:	2321      	movs	r3, #33	; 0x21
 8002772:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002776:	2310      	movs	r3, #16
 8002778:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800277c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800277e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002782:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8002784:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002788:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 800278a:	6360      	str	r0, [r4, #52]	; 0x34
 800278c:	4b2f      	ldr	r3, [pc, #188]	; (800284c <HAL_I2C_Master_Transmit+0x120>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800278e:	d926      	bls.n	80027de <HAL_I2C_Master_Transmit+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002790:	22ff      	movs	r2, #255	; 0xff
 8002792:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002794:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002796:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800279a:	4631      	mov	r1, r6
 800279c:	4620      	mov	r0, r4
 800279e:	f7ff fe6d 	bl	800247c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80027a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a4:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 80027a6:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a8:	462a      	mov	r2, r5
 80027aa:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80027ac:	b9fb      	cbnz	r3, 80027ee <HAL_I2C_Master_Transmit+0xc2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ae:	f7ff fef5 	bl	800259c <I2C_WaitOnSTOPFlagUntilTimeout>
 80027b2:	2800      	cmp	r0, #0
 80027b4:	d1d8      	bne.n	8002768 <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027b6:	6823      	ldr	r3, [r4, #0]
 80027b8:	2120      	movs	r1, #32
 80027ba:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80027c2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80027c6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80027ca:	f022 0201 	bic.w	r2, r2, #1
 80027ce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80027d0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80027d4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027d8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80027dc:	e7c5      	b.n	800276a <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 80027de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80027e0:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80027e2:	b292      	uxth	r2, r2
 80027e4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	e7d5      	b.n	800279a <HAL_I2C_Master_Transmit+0x6e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ee:	f7ff ff24 	bl	800263a <I2C_WaitOnTXISFlagUntilTimeout>
 80027f2:	2800      	cmp	r0, #0
 80027f4:	d1b8      	bne.n	8002768 <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027f8:	6822      	ldr	r2, [r4, #0]
 80027fa:	f813 1b01 	ldrb.w	r1, [r3], #1
 80027fe:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002800:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002802:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002804:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002806:	3b01      	subs	r3, #1
 8002808:	b29b      	uxth	r3, r3
 800280a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800280c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800280e:	3a01      	subs	r2, #1
 8002810:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002812:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002814:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0c3      	beq.n	80027a2 <HAL_I2C_Master_Transmit+0x76>
 800281a:	2a00      	cmp	r2, #0
 800281c:	d1c1      	bne.n	80027a2 <HAL_I2C_Master_Transmit+0x76>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800281e:	9500      	str	r5, [sp, #0]
 8002820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002822:	2180      	movs	r1, #128	; 0x80
 8002824:	4620      	mov	r0, r4
 8002826:	f7ff fede 	bl	80025e6 <I2C_WaitOnFlagUntilTimeout>
 800282a:	2800      	cmp	r0, #0
 800282c:	d19c      	bne.n	8002768 <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800282e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002830:	2bff      	cmp	r3, #255	; 0xff
 8002832:	d903      	bls.n	800283c <HAL_I2C_Master_Transmit+0x110>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002834:	22ff      	movs	r2, #255	; 0xff
 8002836:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002838:	9000      	str	r0, [sp, #0]
 800283a:	e7ac      	b.n	8002796 <HAL_I2C_Master_Transmit+0x6a>
          hi2c->XferSize = hi2c->XferCount;
 800283c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800283e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002840:	b292      	uxth	r2, r2
 8002842:	8522      	strh	r2, [r4, #40]	; 0x28
 8002844:	e7cf      	b.n	80027e6 <HAL_I2C_Master_Transmit+0xba>
    return HAL_BUSY;
 8002846:	2002      	movs	r0, #2
 8002848:	e78f      	b.n	800276a <HAL_I2C_Master_Transmit+0x3e>
 800284a:	bf00      	nop
 800284c:	80002000 	.word	0x80002000

08002850 <HAL_I2C_Master_Receive>:
{
 8002850:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002854:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002856:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800285a:	2b20      	cmp	r3, #32
{
 800285c:	4604      	mov	r4, r0
 800285e:	460e      	mov	r6, r1
 8002860:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002862:	f040 8083 	bne.w	800296c <HAL_I2C_Master_Receive+0x11c>
    __HAL_LOCK(hi2c);
 8002866:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800286a:	2b01      	cmp	r3, #1
 800286c:	d07e      	beq.n	800296c <HAL_I2C_Master_Receive+0x11c>
 800286e:	2701      	movs	r7, #1
 8002870:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002874:	f7ff fada 	bl	8001e2c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002878:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800287a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800287c:	9000      	str	r0, [sp, #0]
 800287e:	463a      	mov	r2, r7
 8002880:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002884:	4620      	mov	r0, r4
 8002886:	f7ff feae 	bl	80025e6 <I2C_WaitOnFlagUntilTimeout>
 800288a:	b118      	cbz	r0, 8002894 <HAL_I2C_Master_Receive+0x44>
      return HAL_ERROR;
 800288c:	2001      	movs	r0, #1
}
 800288e:	b003      	add	sp, #12
 8002890:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002894:	2322      	movs	r3, #34	; 0x22
 8002896:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800289a:	2310      	movs	r3, #16
 800289c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a0:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80028a2:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 80028a8:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028ac:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 80028ae:	6360      	str	r0, [r4, #52]	; 0x34
 80028b0:	4b2f      	ldr	r3, [pc, #188]	; (8002970 <HAL_I2C_Master_Receive+0x120>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028b2:	d926      	bls.n	8002902 <HAL_I2C_Master_Receive+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028b4:	22ff      	movs	r2, #255	; 0xff
 80028b6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80028b8:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028be:	4631      	mov	r1, r6
 80028c0:	4620      	mov	r0, r4
 80028c2:	f7ff fddb 	bl	800247c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80028c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c8:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 80028ca:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028cc:	462a      	mov	r2, r5
 80028ce:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80028d0:	b9fb      	cbnz	r3, 8002912 <HAL_I2C_Master_Receive+0xc2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d2:	f7ff fe63 	bl	800259c <I2C_WaitOnSTOPFlagUntilTimeout>
 80028d6:	2800      	cmp	r0, #0
 80028d8:	d1d8      	bne.n	800288c <HAL_I2C_Master_Receive+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028da:	6823      	ldr	r3, [r4, #0]
 80028dc:	2120      	movs	r1, #32
 80028de:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80028e6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80028ea:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80028ee:	f022 0201 	bic.w	r2, r2, #1
 80028f2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80028f4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80028f8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028fc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002900:	e7c5      	b.n	800288e <HAL_I2C_Master_Receive+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 8002902:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002904:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002906:	b292      	uxth	r2, r2
 8002908:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800290a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	e7d5      	b.n	80028be <HAL_I2C_Master_Receive+0x6e>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002912:	f7ff fe04 	bl	800251e <I2C_WaitOnRXNEFlagUntilTimeout>
 8002916:	2800      	cmp	r0, #0
 8002918:	d1b8      	bne.n	800288c <HAL_I2C_Master_Receive+0x3c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800291a:	6823      	ldr	r3, [r4, #0]
 800291c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800291e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002920:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002922:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002924:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002926:	3301      	adds	r3, #1
 8002928:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800292a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800292c:	3b01      	subs	r3, #1
 800292e:	b29b      	uxth	r3, r3
 8002930:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002932:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002934:	3a01      	subs	r2, #1
 8002936:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002938:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800293a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0c2      	beq.n	80028c6 <HAL_I2C_Master_Receive+0x76>
 8002940:	2a00      	cmp	r2, #0
 8002942:	d1c0      	bne.n	80028c6 <HAL_I2C_Master_Receive+0x76>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002944:	9500      	str	r5, [sp, #0]
 8002946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002948:	2180      	movs	r1, #128	; 0x80
 800294a:	4620      	mov	r0, r4
 800294c:	f7ff fe4b 	bl	80025e6 <I2C_WaitOnFlagUntilTimeout>
 8002950:	2800      	cmp	r0, #0
 8002952:	d19b      	bne.n	800288c <HAL_I2C_Master_Receive+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002954:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002956:	2bff      	cmp	r3, #255	; 0xff
 8002958:	d903      	bls.n	8002962 <HAL_I2C_Master_Receive+0x112>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800295a:	22ff      	movs	r2, #255	; 0xff
 800295c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800295e:	9000      	str	r0, [sp, #0]
 8002960:	e7ab      	b.n	80028ba <HAL_I2C_Master_Receive+0x6a>
          hi2c->XferSize = hi2c->XferCount;
 8002962:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002964:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002966:	b292      	uxth	r2, r2
 8002968:	8522      	strh	r2, [r4, #40]	; 0x28
 800296a:	e7ce      	b.n	800290a <HAL_I2C_Master_Receive+0xba>
    return HAL_BUSY;
 800296c:	2002      	movs	r0, #2
 800296e:	e78e      	b.n	800288e <HAL_I2C_Master_Receive+0x3e>
 8002970:	80002400 	.word	0x80002400

08002974 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8002974:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8002976:	4770      	bx	lr

08002978 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002978:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	2a20      	cmp	r2, #32
{
 8002980:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002982:	d11d      	bne.n	80029c0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002984:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002988:	2b01      	cmp	r3, #1
 800298a:	d019      	beq.n	80029c0 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800298c:	2324      	movs	r3, #36	; 0x24
 800298e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002992:	6803      	ldr	r3, [r0, #0]
 8002994:	681c      	ldr	r4, [r3, #0]
 8002996:	f024 0401 	bic.w	r4, r4, #1
 800299a:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800299c:	681c      	ldr	r4, [r3, #0]
 800299e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80029a2:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029a4:	681c      	ldr	r4, [r3, #0]
 80029a6:	4321      	orrs	r1, r4
 80029a8:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029aa:	6819      	ldr	r1, [r3, #0]
 80029ac:	f041 0101 	orr.w	r1, r1, #1
 80029b0:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b2:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80029b4:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80029b8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80029bc:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80029be:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80029c0:	2002      	movs	r0, #2
 80029c2:	e7fc      	b.n	80029be <HAL_I2CEx_ConfigAnalogFilter+0x46>

080029c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029c4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c6:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80029ca:	b2e4      	uxtb	r4, r4
 80029cc:	2c20      	cmp	r4, #32
 80029ce:	d11c      	bne.n	8002a0a <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029d0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d018      	beq.n	8002a0a <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029d8:	2324      	movs	r3, #36	; 0x24
 80029da:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029de:	6803      	ldr	r3, [r0, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	f022 0201 	bic.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029e8:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029ea:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029ee:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029f2:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029fc:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80029fe:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002a02:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002a06:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002a08:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8002a0a:	2002      	movs	r0, #2
 8002a0c:	e7fc      	b.n	8002a08 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

08002a10 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a10:	4a02      	ldr	r2, [pc, #8]	; (8002a1c <HAL_PWR_EnableBkUpAccess+0xc>)
 8002a12:	6813      	ldr	r3, [r2, #0]
 8002a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a18:	6013      	str	r3, [r2, #0]
}
 8002a1a:	4770      	bx	lr
 8002a1c:	58000400 	.word	0x58000400

08002a20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a20:	4b02      	ldr	r3, [pc, #8]	; (8002a2c <HAL_PWREx_GetVoltageRange+0xc>)
 8002a22:	6818      	ldr	r0, [r3, #0]
}
 8002a24:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	58000400 	.word	0x58000400

08002a30 <LL_RCC_HSE_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a34:	6818      	ldr	r0, [r3, #0]
}
 8002a36:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8002a3a:	4770      	bx	lr

08002a3c <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a40:	6818      	ldr	r0, [r3, #0]
}
 8002a42:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8002a46:	4770      	bx	lr

08002a48 <LL_RCC_LSI1_IsReady>:
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4c:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 8002a50:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002a54:	4770      	bx	lr

08002a56 <LL_RCC_MSI_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5a:	6818      	ldr	r0, [r3, #0]
}
 8002a5c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002a60:	4770      	bx	lr

08002a62 <LL_RCC_MSI_SetRange>:
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002a62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a66:	6813      	ldr	r3, [r2, #0]
 8002a68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a6c:	4318      	orrs	r0, r3
 8002a6e:	6010      	str	r0, [r2, #0]
}
 8002a70:	4770      	bx	lr

08002a72 <LL_RCC_MSI_GetRange>:
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
}
 8002a7c:	28b0      	cmp	r0, #176	; 0xb0
 8002a7e:	bf28      	it	cs
 8002a80:	20b0      	movcs	r0, #176	; 0xb0
 8002a82:	4770      	bx	lr

08002a84 <LL_RCC_MSI_SetCalibTrimming>:
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002a84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a88:	6853      	ldr	r3, [r2, #4]
 8002a8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a8e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8002a92:	6050      	str	r0, [r2, #4]
}
 8002a94:	4770      	bx	lr
	...

08002a98 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002a98:	28b0      	cmp	r0, #176	; 0xb0
 8002a9a:	4b2e      	ldr	r3, [pc, #184]	; (8002b54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002a9c:	4a2e      	ldr	r2, [pc, #184]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002a9e:	bf98      	it	ls
 8002aa0:	0900      	lsrls	r0, r0, #4
{
 8002aa2:	b5f0      	push	{r4, r5, r6, r7, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002aa4:	bf8c      	ite	hi
 8002aa6:	6add      	ldrhi	r5, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002aa8:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002aac:	4c2b      	ldr	r4, [pc, #172]	; (8002b5c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8002ab2:	b089      	sub	sp, #36	; 0x24
 8002ab4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002ab8:	f003 030f 	and.w	r3, r3, #15
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002abc:	466e      	mov	r6, sp
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac2:	fbb5 f5f3 	udiv	r5, r5, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002ac6:	4b26      	ldr	r3, [pc, #152]	; (8002b60 <RCC_SetFlashLatencyFromMSIRange+0xc8>)
 8002ac8:	fbb5 f5f3 	udiv	r5, r5, r3
 8002acc:	f7ff ffa8 	bl	8002a20 <HAL_PWREx_GetVoltageRange>
 8002ad0:	4607      	mov	r7, r0
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002ad2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002ad6:	3410      	adds	r4, #16
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002ad8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002adc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ae0:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002ae4:	ac08      	add	r4, sp, #32
 8002ae6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aea:	d017      	beq.n	8002b1c <RCC_SetFlashLatencyFromMSIRange+0x84>
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002aec:	2d06      	cmp	r5, #6
 8002aee:	d924      	bls.n	8002b3a <RCC_SetFlashLatencyFromMSIRange+0xa2>
 8002af0:	2d0c      	cmp	r5, #12
 8002af2:	d924      	bls.n	8002b3e <RCC_SetFlashLatencyFromMSIRange+0xa6>
 8002af4:	2d10      	cmp	r5, #16
 8002af6:	d924      	bls.n	8002b42 <RCC_SetFlashLatencyFromMSIRange+0xaa>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002af8:	2400      	movs	r4, #0
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002afa:	4d1a      	ldr	r5, [pc, #104]	; (8002b64 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8002afc:	682b      	ldr	r3, [r5, #0]
 8002afe:	f023 0307 	bic.w	r3, r3, #7
 8002b02:	4323      	orrs	r3, r4
 8002b04:	602b      	str	r3, [r5, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002b06:	f7ff f991 	bl	8001e2c <HAL_GetTick>
 8002b0a:	4606      	mov	r6, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b0c:	682b      	ldr	r3, [r5, #0]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	429c      	cmp	r4, r3
 8002b14:	d117      	bne.n	8002b46 <RCC_SetFlashLatencyFromMSIRange+0xae>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8002b16:	2000      	movs	r0, #0
}
 8002b18:	b009      	add	sp, #36	; 0x24
 8002b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b1c:	2300      	movs	r3, #0
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002b1e:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8002b22:	4295      	cmp	r5, r2
 8002b24:	d805      	bhi.n	8002b32 <RCC_SetFlashLatencyFromMSIRange+0x9a>
        latency = FLASH_LATENCY_RANGE[index];
 8002b26:	aa08      	add	r2, sp, #32
 8002b28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002b2c:	f853 4c10 	ldr.w	r4, [r3, #-16]
 8002b30:	e7e3      	b.n	8002afa <RCC_SetFlashLatencyFromMSIRange+0x62>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b32:	3301      	adds	r3, #1
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d1f2      	bne.n	8002b1e <RCC_SetFlashLatencyFromMSIRange+0x86>
 8002b38:	e7de      	b.n	8002af8 <RCC_SetFlashLatencyFromMSIRange+0x60>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	e7f3      	b.n	8002b26 <RCC_SetFlashLatencyFromMSIRange+0x8e>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e7f1      	b.n	8002b26 <RCC_SetFlashLatencyFromMSIRange+0x8e>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e7ef      	b.n	8002b26 <RCC_SetFlashLatencyFromMSIRange+0x8e>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b46:	f7ff f971 	bl	8001e2c <HAL_GetTick>
 8002b4a:	1b80      	subs	r0, r0, r6
 8002b4c:	2802      	cmp	r0, #2
 8002b4e:	d9dd      	bls.n	8002b0c <RCC_SetFlashLatencyFromMSIRange+0x74>
      return HAL_TIMEOUT;
 8002b50:	2003      	movs	r0, #3
 8002b52:	e7e1      	b.n	8002b18 <RCC_SetFlashLatencyFromMSIRange+0x80>
 8002b54:	08006410 	.word	0x08006410
 8002b58:	08006450 	.word	0x08006450
 8002b5c:	08006510 	.word	0x08006510
 8002b60:	000f4240 	.word	0x000f4240
 8002b64:	58004000 	.word	0x58004000

08002b68 <HAL_RCC_OscConfig>:
{
 8002b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (RCC_OscInitStruct == NULL)
 8002b6a:	4604      	mov	r4, r0
 8002b6c:	b908      	cbnz	r0, 8002b72 <HAL_RCC_OscConfig+0xa>
          return HAL_ERROR;
 8002b6e:	2001      	movs	r0, #1
 8002b70:	e081      	b.n	8002c76 <HAL_RCC_OscConfig+0x10e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b72:	6803      	ldr	r3, [r0, #0]
 8002b74:	069f      	lsls	r7, r3, #26
 8002b76:	d52a      	bpl.n	8002bce <HAL_RCC_OscConfig+0x66>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b7c:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002b7e:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002b80:	f013 030c 	ands.w	r3, r3, #12
 8002b84:	d005      	beq.n	8002b92 <HAL_RCC_OscConfig+0x2a>
 8002b86:	2b0c      	cmp	r3, #12
 8002b88:	d15a      	bne.n	8002c40 <HAL_RCC_OscConfig+0xd8>
 8002b8a:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d156      	bne.n	8002c40 <HAL_RCC_OscConfig+0xd8>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b92:	f7ff ff60 	bl	8002a56 <LL_RCC_MSI_IsReady>
 8002b96:	b110      	cbz	r0, 8002b9e <HAL_RCC_OscConfig+0x36>
 8002b98:	69e3      	ldr	r3, [r4, #28]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0e7      	beq.n	8002b6e <HAL_RCC_OscConfig+0x6>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002ba0:	f7ff ff67 	bl	8002a72 <LL_RCC_MSI_GetRange>
 8002ba4:	4282      	cmp	r2, r0
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ba6:	6a60      	ldr	r0, [r4, #36]	; 0x24
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ba8:	d93f      	bls.n	8002c2a <HAL_RCC_OscConfig+0xc2>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002baa:	f7ff ff75 	bl	8002a98 <RCC_SetFlashLatencyFromMSIRange>
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	d1dd      	bne.n	8002b6e <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002bb4:	f7ff ff55 	bl	8002a62 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bb8:	6a20      	ldr	r0, [r4, #32]
 8002bba:	f7ff ff63 	bl	8002a84 <LL_RCC_MSI_SetCalibTrimming>
        SystemCoreClockUpdate();
 8002bbe:	f7ff f8a3 	bl	8001d08 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002bc2:	4bba      	ldr	r3, [pc, #744]	; (8002eac <HAL_RCC_OscConfig+0x344>)
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	f7ff f8ed 	bl	8001da4 <HAL_InitTick>
 8002bca:	2800      	cmp	r0, #0
 8002bcc:	d1cf      	bne.n	8002b6e <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	07de      	lsls	r6, r3, #31
 8002bd2:	d462      	bmi.n	8002c9a <HAL_RCC_OscConfig+0x132>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd4:	6823      	ldr	r3, [r4, #0]
 8002bd6:	079d      	lsls	r5, r3, #30
 8002bd8:	f100 80ad 	bmi.w	8002d36 <HAL_RCC_OscConfig+0x1ce>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002bdc:	6823      	ldr	r3, [r4, #0]
 8002bde:	f013 0f18 	tst.w	r3, #24
 8002be2:	f040 80ee 	bne.w	8002dc2 <HAL_RCC_OscConfig+0x25a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be6:	6823      	ldr	r3, [r4, #0]
 8002be8:	0758      	lsls	r0, r3, #29
 8002bea:	f100 8188 	bmi.w	8002efe <HAL_RCC_OscConfig+0x396>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	0658      	lsls	r0, r3, #25
 8002bf2:	f140 81ed 	bpl.w	8002fd0 <HAL_RCC_OscConfig+0x468>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002bf8:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 81d4 	beq.w	8002faa <HAL_RCC_OscConfig+0x442>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002c02:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002c0e:	f7ff f90d 	bl	8001e2c <HAL_GetTick>
 8002c12:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002c14:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002c18:	0799      	lsls	r1, r3, #30
 8002c1a:	f100 81d9 	bmi.w	8002fd0 <HAL_RCC_OscConfig+0x468>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c1e:	f7ff f905 	bl	8001e2c <HAL_GetTick>
 8002c22:	1b80      	subs	r0, r0, r6
 8002c24:	2802      	cmp	r0, #2
 8002c26:	d9f5      	bls.n	8002c14 <HAL_RCC_OscConfig+0xac>
 8002c28:	e024      	b.n	8002c74 <HAL_RCC_OscConfig+0x10c>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c2a:	f7ff ff1a 	bl	8002a62 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c2e:	6a20      	ldr	r0, [r4, #32]
 8002c30:	f7ff ff28 	bl	8002a84 <LL_RCC_MSI_SetCalibTrimming>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c34:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002c36:	f7ff ff2f 	bl	8002a98 <RCC_SetFlashLatencyFromMSIRange>
 8002c3a:	2800      	cmp	r0, #0
 8002c3c:	d0bf      	beq.n	8002bbe <HAL_RCC_OscConfig+0x56>
 8002c3e:	e796      	b.n	8002b6e <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c40:	69e2      	ldr	r2, [r4, #28]
 8002c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c46:	b1ba      	cbz	r2, 8002c78 <HAL_RCC_OscConfig+0x110>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c50:	f7ff f8ec 	bl	8001e2c <HAL_GetTick>
 8002c54:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() == 0U)
 8002c56:	f7ff fefe 	bl	8002a56 <LL_RCC_MSI_IsReady>
 8002c5a:	b130      	cbz	r0, 8002c6a <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c5c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002c5e:	f7ff ff00 	bl	8002a62 <LL_RCC_MSI_SetRange>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c62:	6a20      	ldr	r0, [r4, #32]
 8002c64:	f7ff ff0e 	bl	8002a84 <LL_RCC_MSI_SetCalibTrimming>
 8002c68:	e7b1      	b.n	8002bce <HAL_RCC_OscConfig+0x66>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c6a:	f7ff f8df 	bl	8001e2c <HAL_GetTick>
 8002c6e:	1b40      	subs	r0, r0, r5
 8002c70:	2802      	cmp	r0, #2
 8002c72:	d9f0      	bls.n	8002c56 <HAL_RCC_OscConfig+0xee>
            return HAL_TIMEOUT;
 8002c74:	2003      	movs	r0, #3
}
 8002c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	f022 0201 	bic.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c80:	f7ff f8d4 	bl	8001e2c <HAL_GetTick>
 8002c84:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() != 0U)
 8002c86:	f7ff fee6 	bl	8002a56 <LL_RCC_MSI_IsReady>
 8002c8a:	2800      	cmp	r0, #0
 8002c8c:	d09f      	beq.n	8002bce <HAL_RCC_OscConfig+0x66>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c8e:	f7ff f8cd 	bl	8001e2c <HAL_GetTick>
 8002c92:	1b40      	subs	r0, r0, r5
 8002c94:	2802      	cmp	r0, #2
 8002c96:	d9f6      	bls.n	8002c86 <HAL_RCC_OscConfig+0x11e>
 8002c98:	e7ec      	b.n	8002c74 <HAL_RCC_OscConfig+0x10c>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002c9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c9e:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002ca0:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002ca2:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	d005      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x14e>
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d10b      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x15e>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002cae:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d107      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x15e>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb6:	f7ff febb 	bl	8002a30 <LL_RCC_HSE_IsReady>
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	d08a      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x6c>
 8002cbe:	6863      	ldr	r3, [r4, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d187      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x6c>
 8002cc4:	e753      	b.n	8002b6e <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cc6:	6862      	ldr	r2, [r4, #4]
 8002cc8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd0:	d111      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x18e>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002cd8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002cda:	f7ff f8a7 	bl	8001e2c <HAL_GetTick>
 8002cde:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ce0:	f7ff fea6 	bl	8002a30 <LL_RCC_HSE_IsReady>
 8002ce4:	2800      	cmp	r0, #0
 8002ce6:	f47f af75 	bne.w	8002bd4 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cea:	f7ff f89f 	bl	8001e2c <HAL_GetTick>
 8002cee:	1b40      	subs	r0, r0, r5
 8002cf0:	2864      	cmp	r0, #100	; 0x64
 8002cf2:	d9f5      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x178>
 8002cf4:	e7be      	b.n	8002c74 <HAL_RCC_OscConfig+0x10c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf6:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8002cfa:	d104      	bne.n	8002d06 <HAL_RCC_OscConfig+0x19e>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	e7e5      	b.n	8002cd2 <HAL_RCC_OscConfig+0x16a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002d06:	6819      	ldr	r1, [r3, #0]
 8002d08:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002d0c:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002d0e:	6819      	ldr	r1, [r3, #0]
 8002d10:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002d14:	6019      	str	r1, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d16:	2a00      	cmp	r2, #0
 8002d18:	d1df      	bne.n	8002cda <HAL_RCC_OscConfig+0x172>
        tickstart = HAL_GetTick();
 8002d1a:	f7ff f887 	bl	8001e2c <HAL_GetTick>
 8002d1e:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() != 0U)
 8002d20:	f7ff fe86 	bl	8002a30 <LL_RCC_HSE_IsReady>
 8002d24:	2800      	cmp	r0, #0
 8002d26:	f43f af55 	beq.w	8002bd4 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d2a:	f7ff f87f 	bl	8001e2c <HAL_GetTick>
 8002d2e:	1b40      	subs	r0, r0, r5
 8002d30:	2864      	cmp	r0, #100	; 0x64
 8002d32:	d9f5      	bls.n	8002d20 <HAL_RCC_OscConfig+0x1b8>
 8002d34:	e79e      	b.n	8002c74 <HAL_RCC_OscConfig+0x10c>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d3a:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002d3c:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d3e:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d005      	beq.n	8002d52 <HAL_RCC_OscConfig+0x1ea>
 8002d46:	2b0c      	cmp	r3, #12
 8002d48:	d114      	bne.n	8002d74 <HAL_RCC_OscConfig+0x20c>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002d4a:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d110      	bne.n	8002d74 <HAL_RCC_OscConfig+0x20c>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d52:	f7ff fe73 	bl	8002a3c <LL_RCC_HSI_IsReady>
 8002d56:	b118      	cbz	r0, 8002d60 <HAL_RCC_OscConfig+0x1f8>
 8002d58:	68e3      	ldr	r3, [r4, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f43f af07 	beq.w	8002b6e <HAL_RCC_OscConfig+0x6>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002d60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d64:	6921      	ldr	r1, [r4, #16]
 8002d66:	6853      	ldr	r3, [r2, #4]
 8002d68:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002d6c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002d70:	6053      	str	r3, [r2, #4]
 8002d72:	e733      	b.n	8002bdc <HAL_RCC_OscConfig+0x74>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d74:	68e2      	ldr	r2, [r4, #12]
 8002d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7a:	b182      	cbz	r2, 8002d9e <HAL_RCC_OscConfig+0x236>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002d84:	f7ff f852 	bl	8001e2c <HAL_GetTick>
 8002d88:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() == 0U)
 8002d8a:	f7ff fe57 	bl	8002a3c <LL_RCC_HSI_IsReady>
 8002d8e:	2800      	cmp	r0, #0
 8002d90:	d1e6      	bne.n	8002d60 <HAL_RCC_OscConfig+0x1f8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d92:	f7ff f84b 	bl	8001e2c <HAL_GetTick>
 8002d96:	1b40      	subs	r0, r0, r5
 8002d98:	2802      	cmp	r0, #2
 8002d9a:	d9f6      	bls.n	8002d8a <HAL_RCC_OscConfig+0x222>
 8002d9c:	e76a      	b.n	8002c74 <HAL_RCC_OscConfig+0x10c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002da4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002da6:	f7ff f841 	bl	8001e2c <HAL_GetTick>
 8002daa:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() != 0U)
 8002dac:	f7ff fe46 	bl	8002a3c <LL_RCC_HSI_IsReady>
 8002db0:	2800      	cmp	r0, #0
 8002db2:	f43f af13 	beq.w	8002bdc <HAL_RCC_OscConfig+0x74>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db6:	f7ff f839 	bl	8001e2c <HAL_GetTick>
 8002dba:	1b40      	subs	r0, r0, r5
 8002dbc:	2802      	cmp	r0, #2
 8002dbe:	d9f5      	bls.n	8002dac <HAL_RCC_OscConfig+0x244>
 8002dc0:	e758      	b.n	8002c74 <HAL_RCC_OscConfig+0x10c>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dc2:	6962      	ldr	r2, [r4, #20]
 8002dc4:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002dc8:	2a00      	cmp	r2, #0
 8002dca:	d071      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x348>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002dcc:	06d9      	lsls	r1, r3, #27
 8002dce:	d547      	bpl.n	8002e60 <HAL_RCC_OscConfig+0x2f8>
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002dd0:	f7ff fe3a 	bl	8002a48 <LL_RCC_LSI1_IsReady>
 8002dd4:	b358      	cbz	r0, 8002e2e <HAL_RCC_OscConfig+0x2c6>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002dd6:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002dda:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002dde:	f043 0304 	orr.w	r3, r3, #4
 8002de2:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8002de6:	f7ff f821 	bl	8001e2c <HAL_GetTick>
 8002dea:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002dec:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002df0:	071a      	lsls	r2, r3, #28
 8002df2:	d52f      	bpl.n	8002e54 <HAL_RCC_OscConfig+0x2ec>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002df4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002df8:	69a2      	ldr	r2, [r4, #24]
 8002dfa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002dfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002e02:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002e06:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002e0a:	f023 0301 	bic.w	r3, r3, #1
 8002e0e:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8002e12:	f7ff f80b 	bl	8001e2c <HAL_GetTick>
 8002e16:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002e18:	f7ff fe16 	bl	8002a48 <LL_RCC_LSI1_IsReady>
 8002e1c:	2800      	cmp	r0, #0
 8002e1e:	f43f aee2 	beq.w	8002be6 <HAL_RCC_OscConfig+0x7e>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002e22:	f7ff f803 	bl	8001e2c <HAL_GetTick>
 8002e26:	1b40      	subs	r0, r0, r5
 8002e28:	2802      	cmp	r0, #2
 8002e2a:	d9f5      	bls.n	8002e18 <HAL_RCC_OscConfig+0x2b0>
 8002e2c:	e722      	b.n	8002c74 <HAL_RCC_OscConfig+0x10c>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002e2e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 8002e3a:	f7fe fff7 	bl	8001e2c <HAL_GetTick>
 8002e3e:	4605      	mov	r5, r0
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002e40:	f7ff fe02 	bl	8002a48 <LL_RCC_LSI1_IsReady>
 8002e44:	2800      	cmp	r0, #0
 8002e46:	d1c6      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x26e>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002e48:	f7fe fff0 	bl	8001e2c <HAL_GetTick>
 8002e4c:	1b40      	subs	r0, r0, r5
 8002e4e:	2802      	cmp	r0, #2
 8002e50:	d9f6      	bls.n	8002e40 <HAL_RCC_OscConfig+0x2d8>
 8002e52:	e70f      	b.n	8002c74 <HAL_RCC_OscConfig+0x10c>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002e54:	f7fe ffea 	bl	8001e2c <HAL_GetTick>
 8002e58:	1b80      	subs	r0, r0, r6
 8002e5a:	2803      	cmp	r0, #3
 8002e5c:	d9c6      	bls.n	8002dec <HAL_RCC_OscConfig+0x284>
 8002e5e:	e709      	b.n	8002c74 <HAL_RCC_OscConfig+0x10c>
 8002e60:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8002e6c:	f7fe ffde 	bl	8001e2c <HAL_GetTick>
 8002e70:	4606      	mov	r6, r0
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002e72:	f7ff fde9 	bl	8002a48 <LL_RCC_LSI1_IsReady>
 8002e76:	b198      	cbz	r0, 8002ea0 <HAL_RCC_OscConfig+0x338>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002e7c:	461d      	mov	r5, r3
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002e7e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002e82:	f022 0204 	bic.w	r2, r2, #4
 8002e86:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002e8a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002e8e:	071b      	lsls	r3, r3, #28
 8002e90:	f57f aea9 	bpl.w	8002be6 <HAL_RCC_OscConfig+0x7e>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002e94:	f7fe ffca 	bl	8001e2c <HAL_GetTick>
 8002e98:	1b80      	subs	r0, r0, r6
 8002e9a:	2803      	cmp	r0, #3
 8002e9c:	d9f5      	bls.n	8002e8a <HAL_RCC_OscConfig+0x322>
 8002e9e:	e6e9      	b.n	8002c74 <HAL_RCC_OscConfig+0x10c>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002ea0:	f7fe ffc4 	bl	8001e2c <HAL_GetTick>
 8002ea4:	1b80      	subs	r0, r0, r6
 8002ea6:	2802      	cmp	r0, #2
 8002ea8:	d9e3      	bls.n	8002e72 <HAL_RCC_OscConfig+0x30a>
 8002eaa:	e6e3      	b.n	8002c74 <HAL_RCC_OscConfig+0x10c>
 8002eac:	20000028 	.word	0x20000028
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002eb0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002eb4:	f023 0304 	bic.w	r3, r3, #4
 8002eb8:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002ebc:	f7fe ffb6 	bl	8001e2c <HAL_GetTick>
 8002ec0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002ec2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002ec6:	071f      	lsls	r7, r3, #28
 8002ec8:	d413      	bmi.n	8002ef2 <HAL_RCC_OscConfig+0x38a>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002eca:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002ece:	f023 0301 	bic.w	r3, r3, #1
 8002ed2:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002ed6:	f7fe ffa9 	bl	8001e2c <HAL_GetTick>
 8002eda:	4605      	mov	r5, r0
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002edc:	f7ff fdb4 	bl	8002a48 <LL_RCC_LSI1_IsReady>
 8002ee0:	2800      	cmp	r0, #0
 8002ee2:	f43f ae80 	beq.w	8002be6 <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002ee6:	f7fe ffa1 	bl	8001e2c <HAL_GetTick>
 8002eea:	1b40      	subs	r0, r0, r5
 8002eec:	2802      	cmp	r0, #2
 8002eee:	d9f5      	bls.n	8002edc <HAL_RCC_OscConfig+0x374>
 8002ef0:	e6c0      	b.n	8002c74 <HAL_RCC_OscConfig+0x10c>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002ef2:	f7fe ff9b 	bl	8001e2c <HAL_GetTick>
 8002ef6:	1b80      	subs	r0, r0, r6
 8002ef8:	2803      	cmp	r0, #3
 8002efa:	d9e2      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x35a>
 8002efc:	e6ba      	b.n	8002c74 <HAL_RCC_OscConfig+0x10c>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002efe:	4d84      	ldr	r5, [pc, #528]	; (8003110 <HAL_RCC_OscConfig+0x5a8>)
 8002f00:	682b      	ldr	r3, [r5, #0]
 8002f02:	05d8      	lsls	r0, r3, #23
 8002f04:	d51c      	bpl.n	8002f40 <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f06:	68a3      	ldr	r3, [r4, #8]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002f0e:	d125      	bne.n	8002f5c <HAL_RCC_OscConfig+0x3f4>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f10:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002f1c:	f7fe ff86 	bl	8001e2c <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002f20:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8002f24:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f26:	f241 3588 	movw	r5, #5000	; 0x1388
 8002f2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f2e:	079a      	lsls	r2, r3, #30
 8002f30:	f53f ae5d 	bmi.w	8002bee <HAL_RCC_OscConfig+0x86>
 8002f34:	f7fe ff7a 	bl	8001e2c <HAL_GetTick>
 8002f38:	1b80      	subs	r0, r0, r6
 8002f3a:	42a8      	cmp	r0, r5
 8002f3c:	d9f5      	bls.n	8002f2a <HAL_RCC_OscConfig+0x3c2>
 8002f3e:	e699      	b.n	8002c74 <HAL_RCC_OscConfig+0x10c>
      HAL_PWR_EnableBkUpAccess();
 8002f40:	f7ff fd66 	bl	8002a10 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8002f44:	f7fe ff72 	bl	8001e2c <HAL_GetTick>
 8002f48:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f4a:	682b      	ldr	r3, [r5, #0]
 8002f4c:	05d9      	lsls	r1, r3, #23
 8002f4e:	d4da      	bmi.n	8002f06 <HAL_RCC_OscConfig+0x39e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f50:	f7fe ff6c 	bl	8001e2c <HAL_GetTick>
 8002f54:	1b80      	subs	r0, r0, r6
 8002f56:	2802      	cmp	r0, #2
 8002f58:	d9f7      	bls.n	8002f4a <HAL_RCC_OscConfig+0x3e2>
 8002f5a:	e68b      	b.n	8002c74 <HAL_RCC_OscConfig+0x10c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f5c:	2b05      	cmp	r3, #5
 8002f5e:	d106      	bne.n	8002f6e <HAL_RCC_OscConfig+0x406>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f60:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002f64:	f043 0304 	orr.w	r3, r3, #4
 8002f68:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8002f6c:	e7d0      	b.n	8002f10 <HAL_RCC_OscConfig+0x3a8>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f6e:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8002f72:	f022 0201 	bic.w	r2, r2, #1
 8002f76:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f7a:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8002f7e:	f022 0204 	bic.w	r2, r2, #4
 8002f82:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1c8      	bne.n	8002f1c <HAL_RCC_OscConfig+0x3b4>
      tickstart = HAL_GetTick();
 8002f8a:	f7fe ff4f 	bl	8001e2c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002f92:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002f94:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002f98:	079b      	lsls	r3, r3, #30
 8002f9a:	f57f ae28 	bpl.w	8002bee <HAL_RCC_OscConfig+0x86>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9e:	f7fe ff45 	bl	8001e2c <HAL_GetTick>
 8002fa2:	1bc0      	subs	r0, r0, r7
 8002fa4:	42b0      	cmp	r0, r6
 8002fa6:	d9f5      	bls.n	8002f94 <HAL_RCC_OscConfig+0x42c>
 8002fa8:	e664      	b.n	8002c74 <HAL_RCC_OscConfig+0x10c>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002faa:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002fae:	f023 0301 	bic.w	r3, r3, #1
 8002fb2:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002fb6:	f7fe ff39 	bl	8001e2c <HAL_GetTick>
 8002fba:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002fbc:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002fc0:	079a      	lsls	r2, r3, #30
 8002fc2:	d505      	bpl.n	8002fd0 <HAL_RCC_OscConfig+0x468>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fc4:	f7fe ff32 	bl	8001e2c <HAL_GetTick>
 8002fc8:	1b80      	subs	r0, r0, r6
 8002fca:	2802      	cmp	r0, #2
 8002fcc:	d9f6      	bls.n	8002fbc <HAL_RCC_OscConfig+0x454>
 8002fce:	e651      	b.n	8002c74 <HAL_RCC_OscConfig+0x10c>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fd0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002fd2:	b909      	cbnz	r1, 8002fd8 <HAL_RCC_OscConfig+0x470>
  return HAL_OK;
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	e64e      	b.n	8002c76 <HAL_RCC_OscConfig+0x10e>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002fd8:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fdc:	2902      	cmp	r1, #2
 8002fde:	68aa      	ldr	r2, [r5, #8]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002fe0:	68eb      	ldr	r3, [r5, #12]
 8002fe2:	f002 020c 	and.w	r2, r2, #12
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fe6:	d174      	bne.n	80030d2 <HAL_RCC_OscConfig+0x56a>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002fea:	f003 0103 	and.w	r1, r3, #3
 8002fee:	4281      	cmp	r1, r0
 8002ff0:	d118      	bne.n	8003024 <HAL_RCC_OscConfig+0x4bc>
 8002ff2:	6b60      	ldr	r0, [r4, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ff4:	f003 0170 	and.w	r1, r3, #112	; 0x70
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff8:	4281      	cmp	r1, r0
 8002ffa:	d113      	bne.n	8003024 <HAL_RCC_OscConfig+0x4bc>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ffc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ffe:	f3c3 2106 	ubfx	r1, r3, #8, #7
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003002:	4281      	cmp	r1, r0
 8003004:	d10e      	bne.n	8003024 <HAL_RCC_OscConfig+0x4bc>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003006:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003008:	f403 1178 	and.w	r1, r3, #4063232	; 0x3e0000
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800300c:	4281      	cmp	r1, r0
 800300e:	d109      	bne.n	8003024 <HAL_RCC_OscConfig+0x4bc>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003010:	6c20      	ldr	r0, [r4, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003012:	f003 6160 	and.w	r1, r3, #234881024	; 0xe000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003016:	4281      	cmp	r1, r0
 8003018:	d104      	bne.n	8003024 <HAL_RCC_OscConfig+0x4bc>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800301a:	6c61      	ldr	r1, [r4, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800301c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003020:	428b      	cmp	r3, r1
 8003022:	d03f      	beq.n	80030a4 <HAL_RCC_OscConfig+0x53c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003024:	2a0c      	cmp	r2, #12
 8003026:	f43f ada2 	beq.w	8002b6e <HAL_RCC_OscConfig+0x6>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800302a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800302e:	682b      	ldr	r3, [r5, #0]
 8003030:	015b      	lsls	r3, r3, #5
 8003032:	f53f ad9c 	bmi.w	8002b6e <HAL_RCC_OscConfig+0x6>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003036:	682b      	ldr	r3, [r5, #0]
 8003038:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800303c:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800303e:	f7fe fef5 	bl	8001e2c <HAL_GetTick>
 8003042:	4606      	mov	r6, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003044:	682b      	ldr	r3, [r5, #0]
 8003046:	019f      	lsls	r7, r3, #6
 8003048:	d426      	bmi.n	8003098 <HAL_RCC_OscConfig+0x530>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800304a:	e9d4 320c 	ldrd	r3, r2, [r4, #48]	; 0x30
 800304e:	68e9      	ldr	r1, [r5, #12]
 8003050:	4313      	orrs	r3, r2
 8003052:	4a30      	ldr	r2, [pc, #192]	; (8003114 <HAL_RCC_OscConfig+0x5ac>)
 8003054:	400a      	ands	r2, r1
 8003056:	4313      	orrs	r3, r2
 8003058:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800305a:	4313      	orrs	r3, r2
 800305c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800305e:	4313      	orrs	r3, r2
 8003060:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003062:	4313      	orrs	r3, r2
 8003064:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003066:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800306a:	60eb      	str	r3, [r5, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800306c:	682b      	ldr	r3, [r5, #0]
 800306e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003072:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003074:	68eb      	ldr	r3, [r5, #12]
 8003076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307a:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 800307c:	f7fe fed6 	bl	8001e2c <HAL_GetTick>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003080:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
            tickstart = HAL_GetTick();
 8003084:	4605      	mov	r5, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003086:	6823      	ldr	r3, [r4, #0]
 8003088:	0198      	lsls	r0, r3, #6
 800308a:	d4a3      	bmi.n	8002fd4 <HAL_RCC_OscConfig+0x46c>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308c:	f7fe fece 	bl	8001e2c <HAL_GetTick>
 8003090:	1b40      	subs	r0, r0, r5
 8003092:	2802      	cmp	r0, #2
 8003094:	d9f7      	bls.n	8003086 <HAL_RCC_OscConfig+0x51e>
 8003096:	e5ed      	b.n	8002c74 <HAL_RCC_OscConfig+0x10c>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003098:	f7fe fec8 	bl	8001e2c <HAL_GetTick>
 800309c:	1b80      	subs	r0, r0, r6
 800309e:	2802      	cmp	r0, #2
 80030a0:	d9d0      	bls.n	8003044 <HAL_RCC_OscConfig+0x4dc>
 80030a2:	e5e7      	b.n	8002c74 <HAL_RCC_OscConfig+0x10c>
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a4:	682b      	ldr	r3, [r5, #0]
 80030a6:	0199      	lsls	r1, r3, #6
 80030a8:	d494      	bmi.n	8002fd4 <HAL_RCC_OscConfig+0x46c>
 80030aa:	682b      	ldr	r3, [r5, #0]
 80030ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030b0:	602b      	str	r3, [r5, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030b2:	68eb      	ldr	r3, [r5, #12]
 80030b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b8:	60eb      	str	r3, [r5, #12]
          tickstart = HAL_GetTick();
 80030ba:	f7fe feb7 	bl	8001e2c <HAL_GetTick>
 80030be:	4604      	mov	r4, r0
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c0:	682b      	ldr	r3, [r5, #0]
 80030c2:	019a      	lsls	r2, r3, #6
 80030c4:	d486      	bmi.n	8002fd4 <HAL_RCC_OscConfig+0x46c>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c6:	f7fe feb1 	bl	8001e2c <HAL_GetTick>
 80030ca:	1b00      	subs	r0, r0, r4
 80030cc:	2802      	cmp	r0, #2
 80030ce:	d9f7      	bls.n	80030c0 <HAL_RCC_OscConfig+0x558>
 80030d0:	e5d0      	b.n	8002c74 <HAL_RCC_OscConfig+0x10c>
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030d2:	2a0c      	cmp	r2, #12
 80030d4:	f43f ad4b 	beq.w	8002b6e <HAL_RCC_OscConfig+0x6>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80030d8:	682b      	ldr	r3, [r5, #0]
 80030da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030de:	602b      	str	r3, [r5, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80030e0:	68eb      	ldr	r3, [r5, #12]
 80030e2:	f023 0303 	bic.w	r3, r3, #3
 80030e6:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80030e8:	68eb      	ldr	r3, [r5, #12]
 80030ea:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80030ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f2:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80030f4:	f7fe fe9a 	bl	8001e2c <HAL_GetTick>
 80030f8:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030fa:	682b      	ldr	r3, [r5, #0]
 80030fc:	019b      	lsls	r3, r3, #6
 80030fe:	f57f af69 	bpl.w	8002fd4 <HAL_RCC_OscConfig+0x46c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003102:	f7fe fe93 	bl	8001e2c <HAL_GetTick>
 8003106:	1b00      	subs	r0, r0, r4
 8003108:	2802      	cmp	r0, #2
 800310a:	d9f6      	bls.n	80030fa <HAL_RCC_OscConfig+0x592>
 800310c:	e5b2      	b.n	8002c74 <HAL_RCC_OscConfig+0x10c>
 800310e:	bf00      	nop
 8003110:	58000400 	.word	0x58000400
 8003114:	11c1808c 	.word	0x11c1808c

08003118 <HAL_RCC_ClockConfig>:
{
 8003118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800311c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800311e:	4604      	mov	r4, r0
 8003120:	b910      	cbnz	r0, 8003128 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003122:	2001      	movs	r0, #1
}
 8003124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003128:	4e74      	ldr	r6, [pc, #464]	; (80032fc <HAL_RCC_ClockConfig+0x1e4>)
 800312a:	6833      	ldr	r3, [r6, #0]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	428b      	cmp	r3, r1
 8003132:	d316      	bcc.n	8003162 <HAL_RCC_ClockConfig+0x4a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003134:	6823      	ldr	r3, [r4, #0]
 8003136:	0798      	lsls	r0, r3, #30
 8003138:	d527      	bpl.n	800318a <HAL_RCC_ClockConfig+0x72>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800313a:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800313e:	68a2      	ldr	r2, [r4, #8]
 8003140:	68b3      	ldr	r3, [r6, #8]
 8003142:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003146:	4313      	orrs	r3, r2
 8003148:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800314a:	f7fe fe6f 	bl	8001e2c <HAL_GetTick>
 800314e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003150:	68b3      	ldr	r3, [r6, #8]
 8003152:	03d9      	lsls	r1, r3, #15
 8003154:	d419      	bmi.n	800318a <HAL_RCC_ClockConfig+0x72>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003156:	f7fe fe69 	bl	8001e2c <HAL_GetTick>
 800315a:	1bc0      	subs	r0, r0, r7
 800315c:	2802      	cmp	r0, #2
 800315e:	d9f7      	bls.n	8003150 <HAL_RCC_ClockConfig+0x38>
 8003160:	e011      	b.n	8003186 <HAL_RCC_ClockConfig+0x6e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003162:	6833      	ldr	r3, [r6, #0]
 8003164:	f023 0307 	bic.w	r3, r3, #7
 8003168:	430b      	orrs	r3, r1
 800316a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800316c:	f7fe fe5e 	bl	8001e2c <HAL_GetTick>
 8003170:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003172:	6833      	ldr	r3, [r6, #0]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	42ab      	cmp	r3, r5
 800317a:	d0db      	beq.n	8003134 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800317c:	f7fe fe56 	bl	8001e2c <HAL_GetTick>
 8003180:	1bc0      	subs	r0, r0, r7
 8003182:	2802      	cmp	r0, #2
 8003184:	d9f5      	bls.n	8003172 <HAL_RCC_ClockConfig+0x5a>
        return HAL_TIMEOUT;
 8003186:	2003      	movs	r0, #3
 8003188:	e7cc      	b.n	8003124 <HAL_RCC_ClockConfig+0xc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800318a:	6823      	ldr	r3, [r4, #0]
 800318c:	069a      	lsls	r2, r3, #26
 800318e:	d516      	bpl.n	80031be <HAL_RCC_ClockConfig+0xa6>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003190:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8003194:	6962      	ldr	r2, [r4, #20]
 8003196:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 800319a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 80031a4:	f7fe fe42 	bl	8001e2c <HAL_GetTick>
 80031a8:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80031aa:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 80031ae:	039b      	lsls	r3, r3, #14
 80031b0:	d405      	bmi.n	80031be <HAL_RCC_ClockConfig+0xa6>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031b2:	f7fe fe3b 	bl	8001e2c <HAL_GetTick>
 80031b6:	1bc0      	subs	r0, r0, r7
 80031b8:	2802      	cmp	r0, #2
 80031ba:	d9f6      	bls.n	80031aa <HAL_RCC_ClockConfig+0x92>
 80031bc:	e7e3      	b.n	8003186 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80031be:	6823      	ldr	r3, [r4, #0]
 80031c0:	0658      	lsls	r0, r3, #25
 80031c2:	d517      	bpl.n	80031f4 <HAL_RCC_ClockConfig+0xdc>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80031c4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80031c8:	69a2      	ldr	r2, [r4, #24]
 80031ca:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 80031ce:	f023 030f 	bic.w	r3, r3, #15
 80031d2:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 80031d6:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 80031da:	f7fe fe27 	bl	8001e2c <HAL_GetTick>
 80031de:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80031e0:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 80031e4:	03d9      	lsls	r1, r3, #15
 80031e6:	d405      	bmi.n	80031f4 <HAL_RCC_ClockConfig+0xdc>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031e8:	f7fe fe20 	bl	8001e2c <HAL_GetTick>
 80031ec:	1bc0      	subs	r0, r0, r7
 80031ee:	2802      	cmp	r0, #2
 80031f0:	d9f6      	bls.n	80031e0 <HAL_RCC_ClockConfig+0xc8>
 80031f2:	e7c8      	b.n	8003186 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f4:	6823      	ldr	r3, [r4, #0]
 80031f6:	075a      	lsls	r2, r3, #29
 80031f8:	d513      	bpl.n	8003222 <HAL_RCC_ClockConfig+0x10a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80031fa:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80031fe:	68e2      	ldr	r2, [r4, #12]
 8003200:	68b3      	ldr	r3, [r6, #8]
 8003202:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003206:	4313      	orrs	r3, r2
 8003208:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800320a:	f7fe fe0f 	bl	8001e2c <HAL_GetTick>
 800320e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003210:	68b3      	ldr	r3, [r6, #8]
 8003212:	039b      	lsls	r3, r3, #14
 8003214:	d405      	bmi.n	8003222 <HAL_RCC_ClockConfig+0x10a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003216:	f7fe fe09 	bl	8001e2c <HAL_GetTick>
 800321a:	1bc0      	subs	r0, r0, r7
 800321c:	2802      	cmp	r0, #2
 800321e:	d9f7      	bls.n	8003210 <HAL_RCC_ClockConfig+0xf8>
 8003220:	e7b1      	b.n	8003186 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003222:	6823      	ldr	r3, [r4, #0]
 8003224:	0718      	lsls	r0, r3, #28
 8003226:	d514      	bpl.n	8003252 <HAL_RCC_ClockConfig+0x13a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003228:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800322c:	6922      	ldr	r2, [r4, #16]
 800322e:	68b3      	ldr	r3, [r6, #8]
 8003230:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003234:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003238:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800323a:	f7fe fdf7 	bl	8001e2c <HAL_GetTick>
 800323e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003240:	68b3      	ldr	r3, [r6, #8]
 8003242:	0359      	lsls	r1, r3, #13
 8003244:	d405      	bmi.n	8003252 <HAL_RCC_ClockConfig+0x13a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003246:	f7fe fdf1 	bl	8001e2c <HAL_GetTick>
 800324a:	1bc0      	subs	r0, r0, r7
 800324c:	2802      	cmp	r0, #2
 800324e:	d9f7      	bls.n	8003240 <HAL_RCC_ClockConfig+0x128>
 8003250:	e799      	b.n	8003186 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003252:	6823      	ldr	r3, [r4, #0]
 8003254:	07da      	lsls	r2, r3, #31
 8003256:	d40d      	bmi.n	8003274 <HAL_RCC_ClockConfig+0x15c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003258:	4c28      	ldr	r4, [pc, #160]	; (80032fc <HAL_RCC_ClockConfig+0x1e4>)
 800325a:	6823      	ldr	r3, [r4, #0]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	42ab      	cmp	r3, r5
 8003262:	d837      	bhi.n	80032d4 <HAL_RCC_ClockConfig+0x1bc>
  SystemCoreClockUpdate();
 8003264:	f7fe fd50 	bl	8001d08 <SystemCoreClockUpdate>
  return HAL_InitTick(HAL_GetTickPrio());
 8003268:	f7fe fde6 	bl	8001e38 <HAL_GetTickPrio>
}
 800326c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(HAL_GetTickPrio());
 8003270:	f7fe bd98 	b.w	8001da4 <HAL_InitTick>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003274:	6863      	ldr	r3, [r4, #4]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d103      	bne.n	8003282 <HAL_RCC_ClockConfig+0x16a>
      if (LL_RCC_HSE_IsReady() == 0U)
 800327a:	f7ff fbd9 	bl	8002a30 <LL_RCC_HSE_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
 800327e:	b940      	cbnz	r0, 8003292 <HAL_RCC_ClockConfig+0x17a>
 8003280:	e74f      	b.n	8003122 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003282:	2b03      	cmp	r3, #3
 8003284:	d11f      	bne.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	019b      	lsls	r3, r3, #6
 800328e:	f57f af48 	bpl.w	8003122 <HAL_RCC_ClockConfig+0xa>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003292:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8003296:	6862      	ldr	r2, [r4, #4]
 8003298:	68b3      	ldr	r3, [r6, #8]
 800329a:	f023 0303 	bic.w	r3, r3, #3
 800329e:	4313      	orrs	r3, r2
 80032a0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80032a2:	f7fe fdc3 	bl	8001e2c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80032aa:	4607      	mov	r7, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80032ac:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ae:	6862      	ldr	r2, [r4, #4]
 80032b0:	f003 030c 	and.w	r3, r3, #12
 80032b4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80032b8:	d0ce      	beq.n	8003258 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ba:	f7fe fdb7 	bl	8001e2c <HAL_GetTick>
 80032be:	1bc0      	subs	r0, r0, r7
 80032c0:	4540      	cmp	r0, r8
 80032c2:	d9f3      	bls.n	80032ac <HAL_RCC_ClockConfig+0x194>
 80032c4:	e75f      	b.n	8003186 <HAL_RCC_ClockConfig+0x6e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032c6:	b913      	cbnz	r3, 80032ce <HAL_RCC_ClockConfig+0x1b6>
      if (LL_RCC_MSI_IsReady() == 0U)
 80032c8:	f7ff fbc5 	bl	8002a56 <LL_RCC_MSI_IsReady>
 80032cc:	e7d7      	b.n	800327e <HAL_RCC_ClockConfig+0x166>
      if (LL_RCC_HSI_IsReady() == 0U)
 80032ce:	f7ff fbb5 	bl	8002a3c <LL_RCC_HSI_IsReady>
 80032d2:	e7d4      	b.n	800327e <HAL_RCC_ClockConfig+0x166>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	f023 0307 	bic.w	r3, r3, #7
 80032da:	432b      	orrs	r3, r5
 80032dc:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80032de:	f7fe fda5 	bl	8001e2c <HAL_GetTick>
 80032e2:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e4:	6823      	ldr	r3, [r4, #0]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	42ab      	cmp	r3, r5
 80032ec:	d0ba      	beq.n	8003264 <HAL_RCC_ClockConfig+0x14c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80032ee:	f7fe fd9d 	bl	8001e2c <HAL_GetTick>
 80032f2:	1b80      	subs	r0, r0, r6
 80032f4:	2802      	cmp	r0, #2
 80032f6:	d9f5      	bls.n	80032e4 <HAL_RCC_ClockConfig+0x1cc>
 80032f8:	e745      	b.n	8003186 <HAL_RCC_ClockConfig+0x6e>
 80032fa:	bf00      	nop
 80032fc:	58004000 	.word	0x58004000

08003300 <HAL_RCC_GetSysClockFreq>:
 8003300:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 8003304:	b508      	push	{r3, lr}
 8003306:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003308:	f013 030c 	ands.w	r3, r3, #12
 800330c:	d107      	bne.n	800331e <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800330e:	f7ff fbb0 	bl	8002a72 <LL_RCC_MSI_GetRange>
 8003312:	4b1f      	ldr	r3, [pc, #124]	; (8003390 <HAL_RCC_GetSysClockFreq+0x90>)
 8003314:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8003318:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 800331c:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800331e:	2b04      	cmp	r3, #4
 8003320:	d033      	beq.n	800338a <HAL_RCC_GetSysClockFreq+0x8a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003322:	2b08      	cmp	r3, #8
 8003324:	d107      	bne.n	8003336 <HAL_RCC_GetSysClockFreq+0x36>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003326:	6813      	ldr	r3, [r2, #0]
      sysclockfreq = HSE_VALUE;
 8003328:	481a      	ldr	r0, [pc, #104]	; (8003394 <HAL_RCC_GetSysClockFreq+0x94>)
 800332a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800332e:	4b1a      	ldr	r3, [pc, #104]	; (8003398 <HAL_RCC_GetSysClockFreq+0x98>)
 8003330:	bf08      	it	eq
 8003332:	4618      	moveq	r0, r3
 8003334:	e7f2      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x1c>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003336:	68d3      	ldr	r3, [r2, #12]
 8003338:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800333c:	2b02      	cmp	r3, #2
 800333e:	d022      	beq.n	8003386 <HAL_RCC_GetSysClockFreq+0x86>
 8003340:	2b03      	cmp	r3, #3
 8003342:	d118      	bne.n	8003376 <HAL_RCC_GetSysClockFreq+0x76>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003344:	6813      	ldr	r3, [r2, #0]
          pllinputfreq = HSE_VALUE / 2U;
 8003346:	4813      	ldr	r0, [pc, #76]	; (8003394 <HAL_RCC_GetSysClockFreq+0x94>)
 8003348:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800334c:	4b12      	ldr	r3, [pc, #72]	; (8003398 <HAL_RCC_GetSysClockFreq+0x98>)
 800334e:	bf18      	it	ne
 8003350:	4603      	movne	r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003352:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003356:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003358:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800335a:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800335c:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003360:	4358      	muls	r0, r3
 8003362:	f3c1 1302 	ubfx	r3, r1, #4, #3
 8003366:	3301      	adds	r3, #1
 8003368:	fbb0 f0f3 	udiv	r0, r0, r3
 800336c:	0f53      	lsrs	r3, r2, #29
 800336e:	3301      	adds	r3, #1
 8003370:	fbb0 f0f3 	udiv	r0, r0, r3
 8003374:	e7d2      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x1c>
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003376:	f7ff fb7c 	bl	8002a72 <LL_RCC_MSI_GetRange>
 800337a:	4b05      	ldr	r3, [pc, #20]	; (8003390 <HAL_RCC_GetSysClockFreq+0x90>)
 800337c:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8003380:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003384:	e7e5      	b.n	8003352 <HAL_RCC_GetSysClockFreq+0x52>
        pllinputfreq = HSI_VALUE;
 8003386:	4b03      	ldr	r3, [pc, #12]	; (8003394 <HAL_RCC_GetSysClockFreq+0x94>)
 8003388:	e7e3      	b.n	8003352 <HAL_RCC_GetSysClockFreq+0x52>
    sysclockfreq = HSI_VALUE;
 800338a:	4802      	ldr	r0, [pc, #8]	; (8003394 <HAL_RCC_GetSysClockFreq+0x94>)
 800338c:	e7c6      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x1c>
 800338e:	bf00      	nop
 8003390:	08006410 	.word	0x08006410
 8003394:	00f42400 	.word	0x00f42400
 8003398:	01e84800 	.word	0x01e84800

0800339c <HAL_RCC_GetHCLKFreq>:
{
 800339c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800339e:	f7ff ffaf 	bl	8003300 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80033a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a6:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <HAL_RCC_GetHCLKFreq+0x1c>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80033ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80033b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80033b6:	bd08      	pop	{r3, pc}
 80033b8:	08006450 	.word	0x08006450

080033bc <HAL_RCC_GetPCLK1Freq>:
{
 80033bc:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80033be:	f7ff ffed 	bl	800339c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80033c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c6:	4a05      	ldr	r2, [pc, #20]	; (80033dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80033ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d2:	f003 031f 	and.w	r3, r3, #31
}
 80033d6:	40d8      	lsrs	r0, r3
 80033d8:	bd08      	pop	{r3, pc}
 80033da:	bf00      	nop
 80033dc:	080064f0 	.word	0x080064f0

080033e0 <HAL_RCC_GetPCLK2Freq>:
{
 80033e0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80033e2:	f7ff ffdb 	bl	800339c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80033e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ea:	4a05      	ldr	r2, [pc, #20]	; (8003400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80033f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f6:	f003 031f 	and.w	r3, r3, #31
}
 80033fa:	40d8      	lsrs	r0, r3
 80033fc:	bd08      	pop	{r3, pc}
 80033fe:	bf00      	nop
 8003400:	080064f0 	.word	0x080064f0

08003404 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003408:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 800340c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003410:	4770      	bx	lr

08003412 <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003412:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003416:	0902      	lsrs	r2, r0, #4
 8003418:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800341c:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 8003420:	0100      	lsls	r0, r0, #4
 8003422:	ea23 0302 	bic.w	r3, r3, r2
 8003426:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 800342a:	4318      	orrs	r0, r3
 800342c:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
}
 8003430:	4770      	bx	lr

08003432 <LL_RCC_PLLSAI1_Enable>:
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003432:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003436:	6813      	ldr	r3, [r2, #0]
 8003438:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800343c:	6013      	str	r3, [r2, #0]
}
 800343e:	4770      	bx	lr

08003440 <LL_RCC_PLLSAI1_Disable>:
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003440:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003444:	6813      	ldr	r3, [r2, #0]
 8003446:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800344a:	6013      	str	r3, [r2, #0]
}
 800344c:	4770      	bx	lr

0800344e <LL_RCC_PLLSAI1_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800344e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003452:	6818      	ldr	r0, [r3, #0]
}
 8003454:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 8003458:	4770      	bx	lr

0800345a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800345a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800345c:	6805      	ldr	r5, [r0, #0]
 800345e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
{
 8003462:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003464:	d043      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003466:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800346c:	d015      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x40>
 800346e:	d802      	bhi.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003470:	b1d3      	cbz	r3, 80034a8 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003472:	2501      	movs	r5, #1
 8003474:	e03b      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 8003476:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800347a:	d002      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800347c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003480:	d1f7      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x18>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003482:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003486:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003488:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800348c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003490:	430b      	orrs	r3, r1
 8003492:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003496:	2500      	movs	r5, #0
 8003498:	e029      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x94>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800349a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800349e:	68d3      	ldr	r3, [r2, #12]
 80034a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a4:	60d3      	str	r3, [r2, #12]
 80034a6:	e7ec      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x28>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80034a8:	f7ff ffca 	bl	8003440 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80034ac:	f7fe fcbe 	bl	8001e2c <HAL_GetTick>
 80034b0:	4605      	mov	r5, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034b2:	f7ff ffcc 	bl	800344e <LL_RCC_PLLSAI1_IsReady>
 80034b6:	b9a0      	cbnz	r0, 80034e2 <HAL_RCCEx_PeriphCLKConfig+0x88>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80034b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034bc:	6861      	ldr	r1, [r4, #4]
 80034be:	6913      	ldr	r3, [r2, #16]
 80034c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034c4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80034c8:	6113      	str	r3, [r2, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80034ca:	6913      	ldr	r3, [r2, #16]
 80034cc:	68a1      	ldr	r1, [r4, #8]
 80034ce:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 80034d2:	430b      	orrs	r3, r1
 80034d4:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80034d6:	f7ff ffac 	bl	8003432 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034da:	f7fe fca7 	bl	8001e2c <HAL_GetTick>
 80034de:	4605      	mov	r5, r0
 80034e0:	e0cd      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x224>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034e2:	f7fe fca3 	bl	8001e2c <HAL_GetTick>
 80034e6:	1b40      	subs	r0, r0, r5
 80034e8:	2802      	cmp	r0, #2
 80034ea:	d9e2      	bls.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80034ec:	2503      	movs	r5, #3
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034ee:	6823      	ldr	r3, [r4, #0]
 80034f0:	051a      	lsls	r2, r3, #20
 80034f2:	d515      	bpl.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80034f4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80034f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034fa:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 80034fe:	f407 7740 	and.w	r7, r7, #768	; 0x300
 8003502:	42bb      	cmp	r3, r7
 8003504:	d00c      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      HAL_PWR_EnableBkUpAccess();
 8003506:	f7ff fa83 	bl	8002a10 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800350a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800350e:	2f00      	cmp	r7, #0
 8003510:	f040 80c0 	bne.w	8003694 <HAL_RCCEx_PeriphCLKConfig+0x23a>
 8003514:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003520:	6823      	ldr	r3, [r4, #0]
 8003522:	07df      	lsls	r7, r3, #31
 8003524:	d509      	bpl.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xe0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003526:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800352a:	69a0      	ldr	r0, [r4, #24]
 800352c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003530:	f022 0203 	bic.w	r2, r2, #3
 8003534:	4302      	orrs	r2, r0
 8003536:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800353a:	079e      	lsls	r6, r3, #30
 800353c:	d509      	bpl.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800353e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003542:	69e0      	ldr	r0, [r4, #28]
 8003544:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003548:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800354c:	4302      	orrs	r2, r0
 800354e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003552:	06d8      	lsls	r0, r3, #27
 8003554:	d50c      	bpl.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003556:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003558:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800355c:	0c31      	lsrs	r1, r6, #16
 800355e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8003562:	0409      	lsls	r1, r1, #16
 8003564:	ea22 0201 	bic.w	r2, r2, r1
 8003568:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800356c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003570:	0699      	lsls	r1, r3, #26
 8003572:	d50c      	bpl.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x134>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003574:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003576:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800357a:	0c31      	lsrs	r1, r6, #16
 800357c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8003580:	0409      	lsls	r1, r1, #16
 8003582:	ea22 0201 	bic.w	r2, r2, r1
 8003586:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800358a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800358e:	075a      	lsls	r2, r3, #29
 8003590:	d502      	bpl.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003592:	6a20      	ldr	r0, [r4, #32]
 8003594:	f7ff ff3d 	bl	8003412 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	071b      	lsls	r3, r3, #28
 800359c:	d502      	bpl.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x14a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800359e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80035a0:	f7ff ff37 	bl	8003412 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035a4:	6823      	ldr	r3, [r4, #0]
 80035a6:	05df      	lsls	r7, r3, #23
 80035a8:	d511      	bpl.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x174>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80035aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035b0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80035b4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80035b8:	430b      	orrs	r3, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035ba:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 80035be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80035c2:	f040 808f 	bne.w	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80035c6:	68d3      	ldr	r3, [r2, #12]
 80035c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035cc:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	059e      	lsls	r6, r3, #22
 80035d2:	d51a      	bpl.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80035d6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80035da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035de:	d003      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80035e0:	f032 4180 	bics.w	r1, r2, #1073741824	; 0x40000000
 80035e4:	f040 80b6 	bne.w	8003754 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80035e8:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80035ec:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 80035f0:	4311      	orrs	r1, r2
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035f2:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80035f6:	bf08      	it	eq
 80035f8:	f04f 42b0 	moveq.w	r2, #1476395008	; 0x58000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80035fc:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
 8003600:	bf02      	ittt	eq
 8003602:	68d3      	ldreq	r3, [r2, #12]
 8003604:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
 8003608:	60d3      	streq	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	0558      	lsls	r0, r3, #21
 800360e:	d511      	bpl.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003610:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003614:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003616:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800361a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800361e:	430b      	orrs	r3, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003620:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8003624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003628:	f040 80a2 	bne.w	8003770 <HAL_RCCEx_PeriphCLKConfig+0x316>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800362c:	68d3      	ldr	r3, [r2, #12]
 800362e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003632:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003634:	6822      	ldr	r2, [r4, #0]
 8003636:	04d1      	lsls	r1, r2, #19
 8003638:	d509      	bpl.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800363a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800363e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003640:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 8003644:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003648:	4303      	orrs	r3, r0
 800364a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800364e:	0493      	lsls	r3, r2, #18
 8003650:	d50d      	bpl.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x214>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003652:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003656:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003658:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800365a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800365e:	430b      	orrs	r3, r1
 8003660:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003662:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003664:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003666:	f023 0303 	bic.w	r3, r3, #3
 800366a:	430b      	orrs	r3, r1
 800366c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800366e:	4628      	mov	r0, r5
 8003670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003672:	f7fe fbdb 	bl	8001e2c <HAL_GetTick>
 8003676:	1b40      	subs	r0, r0, r5
 8003678:	2802      	cmp	r0, #2
 800367a:	f63f af37 	bhi.w	80034ec <HAL_RCCEx_PeriphCLKConfig+0x92>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800367e:	f7ff fee6 	bl	800344e <LL_RCC_PLLSAI1_IsReady>
 8003682:	2801      	cmp	r0, #1
 8003684:	d1f5      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x218>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003686:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800368a:	6961      	ldr	r1, [r4, #20]
 800368c:	6913      	ldr	r3, [r2, #16]
 800368e:	430b      	orrs	r3, r1
 8003690:	6113      	str	r3, [r2, #16]
 8003692:	e6f6      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x28>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003694:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8003698:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800369c:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80036a0:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80036a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80036a8:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80036ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80036ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036b2:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 80036b4:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80036b8:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80036bc:	07db      	lsls	r3, r3, #31
 80036be:	f57f af2f 	bpl.w	8003520 <HAL_RCCEx_PeriphCLKConfig+0xc6>
          tickstart = HAL_GetTick();
 80036c2:	f7fe fbb3 	bl	8001e2c <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c6:	f241 3788 	movw	r7, #5000	; 0x1388
          tickstart = HAL_GetTick();
 80036ca:	4606      	mov	r6, r0
          while (LL_RCC_LSE_IsReady() != 1U)
 80036cc:	f7ff fe9a 	bl	8003404 <LL_RCC_LSE_IsReady>
 80036d0:	2801      	cmp	r0, #1
 80036d2:	f43f af25 	beq.w	8003520 <HAL_RCCEx_PeriphCLKConfig+0xc6>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d6:	f7fe fba9 	bl	8001e2c <HAL_GetTick>
 80036da:	1b80      	subs	r0, r0, r6
 80036dc:	42b8      	cmp	r0, r7
 80036de:	d9f5      	bls.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x272>
              ret = HAL_TIMEOUT;
 80036e0:	2503      	movs	r5, #3
 80036e2:	e71d      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036e4:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80036e8:	f47f af71 	bne.w	80035ce <HAL_RCCEx_PeriphCLKConfig+0x174>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80036ec:	f7ff fea8 	bl	8003440 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80036f0:	f7fe fb9c 	bl	8001e2c <HAL_GetTick>
 80036f4:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80036f6:	f7ff feaa 	bl	800344e <LL_RCC_PLLSAI1_IsReady>
 80036fa:	b9a0      	cbnz	r0, 8003726 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80036fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003700:	6861      	ldr	r1, [r4, #4]
 8003702:	6913      	ldr	r3, [r2, #16]
 8003704:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003708:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800370c:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800370e:	6913      	ldr	r3, [r2, #16]
 8003710:	68e1      	ldr	r1, [r4, #12]
 8003712:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8003716:	430b      	orrs	r3, r1
 8003718:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800371a:	f7ff fe8a 	bl	8003432 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800371e:	f7fe fb85 	bl	8001e2c <HAL_GetTick>
 8003722:	4606      	mov	r6, r0
 8003724:	e00b      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003726:	f7fe fb81 	bl	8001e2c <HAL_GetTick>
 800372a:	1b80      	subs	r0, r0, r6
 800372c:	2802      	cmp	r0, #2
 800372e:	d9e2      	bls.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x29c>
              ret = HAL_TIMEOUT;
 8003730:	2503      	movs	r5, #3
 8003732:	e74c      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x174>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003734:	f7fe fb7a 	bl	8001e2c <HAL_GetTick>
 8003738:	1b80      	subs	r0, r0, r6
 800373a:	2802      	cmp	r0, #2
 800373c:	d8f8      	bhi.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800373e:	f7ff fe86 	bl	800344e <LL_RCC_PLLSAI1_IsReady>
 8003742:	2801      	cmp	r0, #1
 8003744:	d1f6      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003746:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800374a:	6961      	ldr	r1, [r4, #20]
 800374c:	6913      	ldr	r3, [r2, #16]
 800374e:	430b      	orrs	r3, r1
 8003750:	6113      	str	r3, [r2, #16]
 8003752:	e73c      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x174>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003754:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003758:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 800375c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003760:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003764:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8003768:	f020 6040 	bic.w	r0, r0, #201326592	; 0xc000000
 800376c:	4301      	orrs	r1, r0
 800376e:	e740      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x198>
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003770:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8003774:	f47f af5e 	bne.w	8003634 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003778:	f7ff fe62 	bl	8003440 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800377c:	f7fe fb56 	bl	8001e2c <HAL_GetTick>
 8003780:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003782:	f7ff fe64 	bl	800344e <LL_RCC_PLLSAI1_IsReady>
 8003786:	b9a0      	cbnz	r0, 80037b2 <HAL_RCCEx_PeriphCLKConfig+0x358>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003788:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800378c:	6861      	ldr	r1, [r4, #4]
 800378e:	6913      	ldr	r3, [r2, #16]
 8003790:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003794:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003798:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800379a:	6913      	ldr	r3, [r2, #16]
 800379c:	6921      	ldr	r1, [r4, #16]
 800379e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80037a2:	430b      	orrs	r3, r1
 80037a4:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80037a6:	f7ff fe44 	bl	8003432 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037aa:	f7fe fb3f 	bl	8001e2c <HAL_GetTick>
 80037ae:	4606      	mov	r6, r0
 80037b0:	e00b      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x370>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037b2:	f7fe fb3b 	bl	8001e2c <HAL_GetTick>
 80037b6:	1b80      	subs	r0, r0, r6
 80037b8:	2802      	cmp	r0, #2
 80037ba:	d9e2      	bls.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x328>
              ret = HAL_TIMEOUT;
 80037bc:	2503      	movs	r5, #3
 80037be:	e739      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x1da>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037c0:	f7fe fb34 	bl	8001e2c <HAL_GetTick>
 80037c4:	1b80      	subs	r0, r0, r6
 80037c6:	2802      	cmp	r0, #2
 80037c8:	d8f8      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x362>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80037ca:	f7ff fe40 	bl	800344e <LL_RCC_PLLSAI1_IsReady>
 80037ce:	2801      	cmp	r0, #1
 80037d0:	d1f6      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x366>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80037d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037d6:	6961      	ldr	r1, [r4, #20]
 80037d8:	6913      	ldr	r3, [r2, #16]
 80037da:	430b      	orrs	r3, r1
 80037dc:	6113      	str	r3, [r2, #16]
 80037de:	e729      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x1da>

080037e0 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80037e0:	6802      	ldr	r2, [r0, #0]
{
 80037e2:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80037e4:	68d3      	ldr	r3, [r2, #12]
 80037e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037ea:	60d3      	str	r3, [r2, #12]
{
 80037ec:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 80037ee:	f7fe fb1d 	bl	8001e2c <HAL_GetTick>
 80037f2:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	069b      	lsls	r3, r3, #26
 80037fa:	d501      	bpl.n	8003800 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80037fc:	2000      	movs	r0, #0
}
 80037fe:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003800:	f7fe fb14 	bl	8001e2c <HAL_GetTick>
 8003804:	1b40      	subs	r0, r0, r5
 8003806:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800380a:	d9f3      	bls.n	80037f4 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 800380c:	2003      	movs	r0, #3
 800380e:	e7f6      	b.n	80037fe <HAL_RTC_WaitForSynchro+0x1e>

08003810 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003810:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003812:	6803      	ldr	r3, [r0, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	0652      	lsls	r2, r2, #25
{
 8003818:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800381a:	d501      	bpl.n	8003820 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800381c:	2000      	movs	r0, #0
}
 800381e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003820:	f04f 32ff 	mov.w	r2, #4294967295
 8003824:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8003826:	f7fe fb01 	bl	8001e2c <HAL_GetTick>
 800382a:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	065b      	lsls	r3, r3, #25
 8003832:	d4f3      	bmi.n	800381c <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003834:	f7fe fafa 	bl	8001e2c <HAL_GetTick>
 8003838:	1b40      	subs	r0, r0, r5
 800383a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800383e:	d9f5      	bls.n	800382c <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8003840:	2003      	movs	r0, #3
 8003842:	e7ec      	b.n	800381e <RTC_EnterInitMode+0xe>

08003844 <HAL_RTC_Init>:
{
 8003844:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8003846:	4604      	mov	r4, r0
 8003848:	b1d8      	cbz	r0, 8003882 <HAL_RTC_Init+0x3e>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800384a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800384e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003852:	b91b      	cbnz	r3, 800385c <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 8003854:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 8003858:	f7fd fefa 	bl	8001650 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800385c:	2302      	movs	r3, #2
 800385e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	22ca      	movs	r2, #202	; 0xca
 8003866:	625a      	str	r2, [r3, #36]	; 0x24
 8003868:	2253      	movs	r2, #83	; 0x53
 800386a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800386c:	4620      	mov	r0, r4
 800386e:	f7ff ffcf 	bl	8003810 <RTC_EnterInitMode>
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	4605      	mov	r5, r0
 8003876:	b130      	cbz	r0, 8003886 <HAL_RTC_Init+0x42>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003878:	22ff      	movs	r2, #255	; 0xff
 800387a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800387c:	2304      	movs	r3, #4
 800387e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
     return HAL_ERROR;
 8003882:	2501      	movs	r5, #1
 8003884:	e038      	b.n	80038f8 <HAL_RTC_Init+0xb4>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003886:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003888:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800388a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800388e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003892:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003894:	6862      	ldr	r2, [r4, #4]
 8003896:	6899      	ldr	r1, [r3, #8]
 8003898:	4302      	orrs	r2, r0
 800389a:	69a0      	ldr	r0, [r4, #24]
 800389c:	4302      	orrs	r2, r0
 800389e:	430a      	orrs	r2, r1
 80038a0:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80038a2:	68e2      	ldr	r2, [r4, #12]
 80038a4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80038aa:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80038ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80038b0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038b8:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80038ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038bc:	f022 0203 	bic.w	r2, r2, #3
 80038c0:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80038c2:	69e2      	ldr	r2, [r4, #28]
 80038c4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80038c6:	4302      	orrs	r2, r0
 80038c8:	430a      	orrs	r2, r1
 80038ca:	64da      	str	r2, [r3, #76]	; 0x4c
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	069b      	lsls	r3, r3, #26
 80038d0:	d40c      	bmi.n	80038ec <HAL_RTC_Init+0xa8>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038d2:	4620      	mov	r0, r4
 80038d4:	f7ff ff84 	bl	80037e0 <HAL_RTC_WaitForSynchro>
 80038d8:	b140      	cbz	r0, 80038ec <HAL_RTC_Init+0xa8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038da:	6823      	ldr	r3, [r4, #0]
 80038dc:	22ff      	movs	r2, #255	; 0xff
 80038de:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80038e0:	2304      	movs	r3, #4
 80038e2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 80038e6:	f884 5020 	strb.w	r5, [r4, #32]
 80038ea:	e7ca      	b.n	8003882 <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	22ff      	movs	r2, #255	; 0xff
 80038f0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80038f2:	2301      	movs	r3, #1
 80038f4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 80038f8:	4628      	mov	r0, r5
 80038fa:	bd38      	pop	{r3, r4, r5, pc}

080038fc <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038fc:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003900:	2b01      	cmp	r3, #1
 8003902:	f04f 0302 	mov.w	r3, #2
 8003906:	d012      	beq.n	800392e <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003908:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800390c:	6803      	ldr	r3, [r0, #0]
 800390e:	22ca      	movs	r2, #202	; 0xca
 8003910:	625a      	str	r2, [r3, #36]	; 0x24
 8003912:	2253      	movs	r2, #83	; 0x53
 8003914:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	f042 0220 	orr.w	r2, r2, #32
 800391c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800391e:	22ff      	movs	r2, #255	; 0xff
 8003920:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003922:	2301      	movs	r3, #1
 8003924:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003928:	2300      	movs	r3, #0
 800392a:	f880 3020 	strb.w	r3, [r0, #32]
  __HAL_LOCK(hrtc);
 800392e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003930:	4770      	bx	lr

08003932 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003932:	6802      	ldr	r2, [r0, #0]
 8003934:	6813      	ldr	r3, [r2, #0]
 8003936:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800393a:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800393c:	6893      	ldr	r3, [r2, #8]
 800393e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003942:	f023 0301 	bic.w	r3, r3, #1
 8003946:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003948:	2320      	movs	r3, #32
 800394a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800394e:	2300      	movs	r3, #0
 8003950:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 8003952:	4770      	bx	lr

08003954 <HAL_UART_Transmit_DMA>:
{
 8003954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003956:	4604      	mov	r4, r0
 8003958:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800395a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800395e:	2f20      	cmp	r7, #32
 8003960:	d13a      	bne.n	80039d8 <HAL_UART_Transmit_DMA+0x84>
    if ((pData == NULL) || (Size == 0U))
 8003962:	b361      	cbz	r1, 80039be <HAL_UART_Transmit_DMA+0x6a>
 8003964:	b35a      	cbz	r2, 80039be <HAL_UART_Transmit_DMA+0x6a>
    __HAL_LOCK(huart);
 8003966:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 800396a:	2a01      	cmp	r2, #1
 800396c:	d034      	beq.n	80039d8 <HAL_UART_Transmit_DMA+0x84>
    if (huart->hdmatx != NULL)
 800396e:	6f60      	ldr	r0, [r4, #116]	; 0x74
    huart->TxXferCount = Size;
 8003970:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    __HAL_LOCK(huart);
 8003974:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003976:	2600      	movs	r6, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003978:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397a:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    __HAL_LOCK(huart);
 800397e:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    huart->pTxBuffPtr  = pData;
 8003982:	6521      	str	r1, [r4, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003984:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003988:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (huart->hdmatx != NULL)
 800398c:	b1c8      	cbz	r0, 80039c2 <HAL_UART_Transmit_DMA+0x6e>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800398e:	f8df c04c 	ldr.w	ip, [pc, #76]	; 80039dc <HAL_UART_Transmit_DMA+0x88>
 8003992:	6822      	ldr	r2, [r4, #0]
 8003994:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003998:	f8df c044 	ldr.w	ip, [pc, #68]	; 80039e0 <HAL_UART_Transmit_DMA+0x8c>
 800399c:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80039a0:	f8df c040 	ldr.w	ip, [pc, #64]	; 80039e4 <HAL_UART_Transmit_DMA+0x90>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80039a4:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 80039a6:	e9c0 c60d 	strd	ip, r6, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80039aa:	f7fe fbb1 	bl	8002110 <HAL_DMA_Start_IT>
 80039ae:	b140      	cbz	r0, 80039c2 <HAL_UART_Transmit_DMA+0x6e>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80039b0:	2310      	movs	r3, #16
 80039b2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        __HAL_UNLOCK(huart);
 80039b6:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 80039ba:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
      return HAL_ERROR;
 80039be:	2001      	movs	r0, #1
 80039c0:	e009      	b.n	80039d6 <HAL_UART_Transmit_DMA+0x82>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	2240      	movs	r2, #64	; 0x40
 80039c6:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80039c8:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 80039ca:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80039cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    __HAL_UNLOCK(huart);
 80039d0:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80039d4:	609a      	str	r2, [r3, #8]
}
 80039d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80039d8:	2002      	movs	r0, #2
 80039da:	e7fc      	b.n	80039d6 <HAL_UART_Transmit_DMA+0x82>
 80039dc:	080039e9 	.word	0x080039e9
 80039e0:	08003a19 	.word	0x08003a19
 80039e4:	08003a25 	.word	0x08003a25

080039e8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80039e8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80039ea:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039ec:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f013 0320 	ands.w	r3, r3, #32
 80039f4:	d10b      	bne.n	8003a0e <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 80039f6:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80039fa:	6813      	ldr	r3, [r2, #0]
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a02:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a0a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a0c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8003a0e:	4610      	mov	r0, r2
 8003a10:	f7fd fb00 	bl	8001014 <HAL_UART_TxCpltCallback>
}
 8003a14:	e7fa      	b.n	8003a0c <UART_DMATransmitCplt+0x24>

08003a16 <HAL_UART_TxHalfCpltCallback>:
 8003a16:	4770      	bx	lr

08003a18 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a18:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003a1a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003a1c:	f7ff fffb 	bl	8003a16 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a20:	bd08      	pop	{r3, pc}

08003a22 <HAL_UART_ErrorCallback>:
 8003a22:	4770      	bx	lr

08003a24 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a24:	6a81      	ldr	r1, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003a26:	680b      	ldr	r3, [r1, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003a28:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003a2c:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
{
 8003a30:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003a32:	689c      	ldr	r4, [r3, #8]
 8003a34:	0624      	lsls	r4, r4, #24
 8003a36:	d50f      	bpl.n	8003a58 <UART_DMAError+0x34>
 8003a38:	2a21      	cmp	r2, #33	; 0x21
 8003a3a:	d10d      	bne.n	8003a58 <UART_DMAError+0x34>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003a48:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003a50:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 8003a52:	2220      	movs	r2, #32
 8003a54:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	065b      	lsls	r3, r3, #25
 8003a5c:	d507      	bpl.n	8003a6e <UART_DMAError+0x4a>
 8003a5e:	2822      	cmp	r0, #34	; 0x22
 8003a60:	d105      	bne.n	8003a6e <UART_DMAError+0x4a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	f8a1 305e 	strh.w	r3, [r1, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8003a68:	4608      	mov	r0, r1
 8003a6a:	f7ff ff62 	bl	8003932 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003a6e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003a72:	f043 0310 	orr.w	r3, r3, #16
 8003a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a7a:	4608      	mov	r0, r1
 8003a7c:	f7ff ffd1 	bl	8003a22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a80:	bd10      	pop	{r4, pc}
	...

08003a84 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a84:	6802      	ldr	r2, [r0, #0]
 8003a86:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a88:	6811      	ldr	r1, [r2, #0]
{
 8003a8a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 8003a8c:	f640 050f 	movw	r5, #2063	; 0x80f
 8003a90:	422b      	tst	r3, r5
{
 8003a92:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a94:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 8003a96:	d10b      	bne.n	8003ab0 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003a98:	069e      	lsls	r6, r3, #26
 8003a9a:	f140 8083 	bpl.w	8003ba4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003a9e:	068d      	lsls	r5, r1, #26
 8003aa0:	d401      	bmi.n	8003aa6 <HAL_UART_IRQHandler+0x22>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003aa2:	00c6      	lsls	r6, r0, #3
 8003aa4:	d57e      	bpl.n	8003ba4 <HAL_UART_IRQHandler+0x120>
      if (huart->RxISR != NULL)
 8003aa6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    if (huart->TxISR != NULL)
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d075      	beq.n	8003b98 <HAL_UART_IRQHandler+0x114>
      huart->TxISR(huart);
 8003aac:	4620      	mov	r0, r4
 8003aae:	e06d      	b.n	8003b8c <HAL_UART_IRQHandler+0x108>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003ab0:	4e58      	ldr	r6, [pc, #352]	; (8003c14 <HAL_UART_IRQHandler+0x190>)
 8003ab2:	4006      	ands	r6, r0
 8003ab4:	d102      	bne.n	8003abc <HAL_UART_IRQHandler+0x38>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003ab6:	4d58      	ldr	r5, [pc, #352]	; (8003c18 <HAL_UART_IRQHandler+0x194>)
 8003ab8:	4229      	tst	r1, r5
 8003aba:	d073      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x120>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003abc:	07dd      	lsls	r5, r3, #31
 8003abe:	d509      	bpl.n	8003ad4 <HAL_UART_IRQHandler+0x50>
 8003ac0:	05cd      	lsls	r5, r1, #23
 8003ac2:	d507      	bpl.n	8003ad4 <HAL_UART_IRQHandler+0x50>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ac4:	2501      	movs	r5, #1
 8003ac6:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ac8:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8003acc:	f045 0501 	orr.w	r5, r5, #1
 8003ad0:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ad4:	079d      	lsls	r5, r3, #30
 8003ad6:	d509      	bpl.n	8003aec <HAL_UART_IRQHandler+0x68>
 8003ad8:	07c5      	lsls	r5, r0, #31
 8003ada:	d507      	bpl.n	8003aec <HAL_UART_IRQHandler+0x68>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003adc:	2502      	movs	r5, #2
 8003ade:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ae0:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8003ae4:	f045 0504 	orr.w	r5, r5, #4
 8003ae8:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003aec:	075d      	lsls	r5, r3, #29
 8003aee:	d509      	bpl.n	8003b04 <HAL_UART_IRQHandler+0x80>
 8003af0:	07c5      	lsls	r5, r0, #31
 8003af2:	d507      	bpl.n	8003b04 <HAL_UART_IRQHandler+0x80>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003af4:	2504      	movs	r5, #4
 8003af6:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003af8:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8003afc:	f045 0502 	orr.w	r5, r5, #2
 8003b00:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b04:	071d      	lsls	r5, r3, #28
 8003b06:	d50a      	bpl.n	8003b1e <HAL_UART_IRQHandler+0x9a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003b08:	068d      	lsls	r5, r1, #26
 8003b0a:	d400      	bmi.n	8003b0e <HAL_UART_IRQHandler+0x8a>
 8003b0c:	b13e      	cbz	r6, 8003b1e <HAL_UART_IRQHandler+0x9a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b0e:	2508      	movs	r5, #8
 8003b10:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b12:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8003b16:	f045 0508 	orr.w	r5, r5, #8
 8003b1a:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b1e:	051e      	lsls	r6, r3, #20
 8003b20:	d50a      	bpl.n	8003b38 <HAL_UART_IRQHandler+0xb4>
 8003b22:	014d      	lsls	r5, r1, #5
 8003b24:	d508      	bpl.n	8003b38 <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b26:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8003b2a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b2c:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8003b30:	f042 0220 	orr.w	r2, r2, #32
 8003b34:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b38:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8003b3c:	b362      	cbz	r2, 8003b98 <HAL_UART_IRQHandler+0x114>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003b3e:	069e      	lsls	r6, r3, #26
 8003b40:	d507      	bpl.n	8003b52 <HAL_UART_IRQHandler+0xce>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003b42:	068d      	lsls	r5, r1, #26
 8003b44:	d401      	bmi.n	8003b4a <HAL_UART_IRQHandler+0xc6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003b46:	00c0      	lsls	r0, r0, #3
 8003b48:	d503      	bpl.n	8003b52 <HAL_UART_IRQHandler+0xce>
        if (huart->RxISR != NULL)
 8003b4a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003b4c:	b10b      	cbz	r3, 8003b52 <HAL_UART_IRQHandler+0xce>
          huart->RxISR(huart);
 8003b4e:	4620      	mov	r0, r4
 8003b50:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b52:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8003b54:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b58:	6892      	ldr	r2, [r2, #8]
 8003b5a:	0651      	lsls	r1, r2, #25
        UART_EndRxTransfer(huart);
 8003b5c:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b5e:	d402      	bmi.n	8003b66 <HAL_UART_IRQHandler+0xe2>
 8003b60:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 8003b64:	d019      	beq.n	8003b9a <HAL_UART_IRQHandler+0x116>
        UART_EndRxTransfer(huart);
 8003b66:	f7ff fee4 	bl	8003932 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	0652      	lsls	r2, r2, #25
 8003b70:	d50f      	bpl.n	8003b92 <HAL_UART_IRQHandler+0x10e>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b72:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003b74:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b7a:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003b7c:	b148      	cbz	r0, 8003b92 <HAL_UART_IRQHandler+0x10e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b7e:	4b27      	ldr	r3, [pc, #156]	; (8003c1c <HAL_UART_IRQHandler+0x198>)
 8003b80:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b82:	f7fe fb07 	bl	8002194 <HAL_DMA_Abort_IT>
 8003b86:	b138      	cbz	r0, 8003b98 <HAL_UART_IRQHandler+0x114>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b88:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003b8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8003b8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b90:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003b92:	4620      	mov	r0, r4
 8003b94:	f7ff ff45 	bl	8003a22 <HAL_UART_ErrorCallback>
}
 8003b98:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003b9a:	f7ff ff42 	bl	8003a22 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9e:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8003ba2:	e7f9      	b.n	8003b98 <HAL_UART_IRQHandler+0x114>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ba4:	02de      	lsls	r6, r3, #11
 8003ba6:	d509      	bpl.n	8003bbc <HAL_UART_IRQHandler+0x138>
 8003ba8:	0245      	lsls	r5, r0, #9
 8003baa:	d507      	bpl.n	8003bbc <HAL_UART_IRQHandler+0x138>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003bac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8003bb0:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003bb2:	6213      	str	r3, [r2, #32]
}
 8003bb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8003bb8:	f000 bdcc 	b.w	8004754 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003bbc:	061e      	lsls	r6, r3, #24
 8003bbe:	d505      	bpl.n	8003bcc <HAL_UART_IRQHandler+0x148>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003bc0:	060d      	lsls	r5, r1, #24
 8003bc2:	d401      	bmi.n	8003bc8 <HAL_UART_IRQHandler+0x144>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003bc4:	0200      	lsls	r0, r0, #8
 8003bc6:	d501      	bpl.n	8003bcc <HAL_UART_IRQHandler+0x148>
    if (huart->TxISR != NULL)
 8003bc8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003bca:	e76d      	b.n	8003aa8 <HAL_UART_IRQHandler+0x24>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003bcc:	065e      	lsls	r6, r3, #25
 8003bce:	d50e      	bpl.n	8003bee <HAL_UART_IRQHandler+0x16a>
 8003bd0:	064d      	lsls	r5, r1, #25
 8003bd2:	d50c      	bpl.n	8003bee <HAL_UART_IRQHandler+0x16a>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bd4:	6813      	ldr	r3, [r2, #0]
 8003bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bda:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bdc:	2320      	movs	r3, #32
 8003bde:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	6723      	str	r3, [r4, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003be6:	4620      	mov	r0, r4
 8003be8:	f7fd fa14 	bl	8001014 <HAL_UART_TxCpltCallback>
 8003bec:	e7d4      	b.n	8003b98 <HAL_UART_IRQHandler+0x114>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003bee:	0218      	lsls	r0, r3, #8
 8003bf0:	d506      	bpl.n	8003c00 <HAL_UART_IRQHandler+0x17c>
 8003bf2:	004a      	lsls	r2, r1, #1
 8003bf4:	d504      	bpl.n	8003c00 <HAL_UART_IRQHandler+0x17c>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003bf6:	4620      	mov	r0, r4
}
 8003bf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003bfc:	f000 bdac 	b.w	8004758 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003c00:	01db      	lsls	r3, r3, #7
 8003c02:	d5c9      	bpl.n	8003b98 <HAL_UART_IRQHandler+0x114>
 8003c04:	2900      	cmp	r1, #0
 8003c06:	dac7      	bge.n	8003b98 <HAL_UART_IRQHandler+0x114>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003c08:	4620      	mov	r0, r4
}
 8003c0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003c0e:	f000 bda2 	b.w	8004756 <HAL_UARTEx_RxFifoFullCallback>
 8003c12:	bf00      	nop
 8003c14:	10000001 	.word	0x10000001
 8003c18:	04000120 	.word	0x04000120
 8003c1c:	08003c21 	.word	0x08003c21

08003c20 <UART_DMAAbortOnError>:
{
 8003c20:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c22:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003c2a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8003c2e:	f7ff fef8 	bl	8003a22 <HAL_UART_ErrorCallback>
}
 8003c32:	bd08      	pop	{r3, pc}
 8003c34:	0000      	movs	r0, r0
	...

08003c38 <UART_SetConfig>:
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c38:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c3a:	69c1      	ldr	r1, [r0, #28]
 8003c3c:	6882      	ldr	r2, [r0, #8]
{
 8003c3e:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8003c42:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c44:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c46:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c48:	4302      	orrs	r2, r0
 8003c4a:	6960      	ldr	r0, [r4, #20]
 8003c4c:	4302      	orrs	r2, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 8003c4e:	6e60      	ldr	r0, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c50:	430a      	orrs	r2, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 8003c52:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c54:	48ac      	ldr	r0, [pc, #688]	; (8003f08 <UART_SetConfig+0x2d0>)
 8003c56:	4028      	ands	r0, r5
 8003c58:	4302      	orrs	r2, r0
 8003c5a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	68e0      	ldr	r0, [r4, #12]
 8003c60:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003c64:	4302      	orrs	r2, r0
 8003c66:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c68:	4aa8      	ldr	r2, [pc, #672]	; (8003f0c <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c6a:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c6c:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8003c6e:	bf1c      	itt	ne
 8003c70:	6a22      	ldrne	r2, [r4, #32]
 8003c72:	4310      	orrne	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8003c7a:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8003c7e:	4302      	orrs	r2, r0
 8003c80:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c84:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003c86:	f022 020f 	bic.w	r2, r2, #15
 8003c8a:	4302      	orrs	r2, r0
 8003c8c:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c8e:	4aa0      	ldr	r2, [pc, #640]	; (8003f10 <UART_SetConfig+0x2d8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d11a      	bne.n	8003cca <UART_SetConfig+0x92>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c98:	4a9e      	ldr	r2, [pc, #632]	; (8003f14 <UART_SetConfig+0x2dc>)
 8003c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9e:	f003 0303 	and.w	r3, r3, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ca2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003ca6:	5cd3      	ldrb	r3, [r2, r3]
 8003ca8:	f103 33ff 	add.w	r3, r3, #4294967295
 8003cac:	f040 8334 	bne.w	8004318 <UART_SetConfig+0x6e0>
    switch (clocksource)
 8003cb0:	2b07      	cmp	r3, #7
 8003cb2:	f200 832e 	bhi.w	8004312 <UART_SetConfig+0x6da>
 8003cb6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003cba:	022a      	.short	0x022a
 8003cbc:	032c0251 	.word	0x032c0251
 8003cc0:	032c0298 	.word	0x032c0298
 8003cc4:	032c032c 	.word	0x032c032c
 8003cc8:	02b1      	.short	0x02b1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cca:	4a90      	ldr	r2, [pc, #576]	; (8003f0c <UART_SetConfig+0x2d4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	f040 83ef 	bne.w	80044b0 <UART_SetConfig+0x878>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cda:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce2:	f000 80ac 	beq.w	8003e3e <UART_SetConfig+0x206>
 8003ce6:	d80a      	bhi.n	8003cfe <UART_SetConfig+0xc6>
 8003ce8:	b3c3      	cbz	r3, 8003d5c <UART_SetConfig+0x124>
        ret = HAL_ERROR;
 8003cea:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
 8003cec:	2300      	movs	r3, #0
 8003cee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cf2:	e9c4 131a 	strd	r1, r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8003cf6:	6723      	str	r3, [r4, #112]	; 0x70
}
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d02:	d065      	beq.n	8003dd0 <UART_SetConfig+0x198>
 8003d04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d08:	d1ef      	bne.n	8003cea <UART_SetConfig+0xb2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	f000 80e7 	beq.w	8003ede <UART_SetConfig+0x2a6>
 8003d10:	2801      	cmp	r0, #1
 8003d12:	f000 80e8 	beq.w	8003ee6 <UART_SetConfig+0x2ae>
 8003d16:	2802      	cmp	r0, #2
 8003d18:	f000 80e9 	beq.w	8003eee <UART_SetConfig+0x2b6>
 8003d1c:	2803      	cmp	r0, #3
 8003d1e:	f000 80ea 	beq.w	8003ef6 <UART_SetConfig+0x2be>
 8003d22:	2804      	cmp	r0, #4
 8003d24:	f000 80eb 	beq.w	8003efe <UART_SetConfig+0x2c6>
 8003d28:	2805      	cmp	r0, #5
 8003d2a:	f000 810b 	beq.w	8003f44 <UART_SetConfig+0x30c>
 8003d2e:	2806      	cmp	r0, #6
 8003d30:	f000 810c 	beq.w	8003f4c <UART_SetConfig+0x314>
 8003d34:	2807      	cmp	r0, #7
 8003d36:	f000 810d 	beq.w	8003f54 <UART_SetConfig+0x31c>
 8003d3a:	2808      	cmp	r0, #8
 8003d3c:	f000 810e 	beq.w	8003f5c <UART_SetConfig+0x324>
 8003d40:	2809      	cmp	r0, #9
 8003d42:	f000 810f 	beq.w	8003f64 <UART_SetConfig+0x32c>
 8003d46:	280a      	cmp	r0, #10
 8003d48:	f000 8110 	beq.w	8003f6c <UART_SetConfig+0x334>
 8003d4c:	280b      	cmp	r0, #11
 8003d4e:	f04f 0108 	mov.w	r1, #8
 8003d52:	bf14      	ite	ne
 8003d54:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8003d58:	2080      	moveq	r0, #128	; 0x80
 8003d5a:	e058      	b.n	8003e0e <UART_SetConfig+0x1d6>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003d5c:	f7ff fb2e 	bl	80033bc <HAL_RCC_GetPCLK1Freq>
 8003d60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d62:	b1fb      	cbz	r3, 8003da4 <UART_SetConfig+0x16c>
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d01f      	beq.n	8003da8 <UART_SetConfig+0x170>
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d01f      	beq.n	8003dac <UART_SetConfig+0x174>
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d01f      	beq.n	8003db0 <UART_SetConfig+0x178>
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d01f      	beq.n	8003db4 <UART_SetConfig+0x17c>
 8003d74:	2b05      	cmp	r3, #5
 8003d76:	d01f      	beq.n	8003db8 <UART_SetConfig+0x180>
 8003d78:	2b06      	cmp	r3, #6
 8003d7a:	d01f      	beq.n	8003dbc <UART_SetConfig+0x184>
 8003d7c:	2b07      	cmp	r3, #7
 8003d7e:	d01f      	beq.n	8003dc0 <UART_SetConfig+0x188>
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d01f      	beq.n	8003dc4 <UART_SetConfig+0x18c>
 8003d84:	2b09      	cmp	r3, #9
 8003d86:	d01f      	beq.n	8003dc8 <UART_SetConfig+0x190>
 8003d88:	2b0a      	cmp	r3, #10
 8003d8a:	d01f      	beq.n	8003dcc <UART_SetConfig+0x194>
 8003d8c:	2b0b      	cmp	r3, #11
 8003d8e:	bf14      	ite	ne
 8003d90:	2301      	movne	r3, #1
 8003d92:	f44f 7380 	moveq.w	r3, #256	; 0x100
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d96:	2100      	movs	r1, #0
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003d98:	fbb0 f0f3 	udiv	r0, r0, r3
    if (lpuart_ker_ck_pres != 0U)
 8003d9c:	2800      	cmp	r0, #0
 8003d9e:	d136      	bne.n	8003e0e <UART_SetConfig+0x1d6>
 8003da0:	4602      	mov	r2, r0
 8003da2:	e7a3      	b.n	8003cec <UART_SetConfig+0xb4>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003da4:	2301      	movs	r3, #1
 8003da6:	e7f6      	b.n	8003d96 <UART_SetConfig+0x15e>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e7f4      	b.n	8003d96 <UART_SetConfig+0x15e>
 8003dac:	2304      	movs	r3, #4
 8003dae:	e7f2      	b.n	8003d96 <UART_SetConfig+0x15e>
 8003db0:	2306      	movs	r3, #6
 8003db2:	e7f0      	b.n	8003d96 <UART_SetConfig+0x15e>
 8003db4:	2308      	movs	r3, #8
 8003db6:	e7ee      	b.n	8003d96 <UART_SetConfig+0x15e>
 8003db8:	230a      	movs	r3, #10
 8003dba:	e7ec      	b.n	8003d96 <UART_SetConfig+0x15e>
 8003dbc:	230c      	movs	r3, #12
 8003dbe:	e7ea      	b.n	8003d96 <UART_SetConfig+0x15e>
 8003dc0:	2310      	movs	r3, #16
 8003dc2:	e7e8      	b.n	8003d96 <UART_SetConfig+0x15e>
 8003dc4:	2320      	movs	r3, #32
 8003dc6:	e7e6      	b.n	8003d96 <UART_SetConfig+0x15e>
 8003dc8:	2340      	movs	r3, #64	; 0x40
 8003dca:	e7e4      	b.n	8003d96 <UART_SetConfig+0x15e>
 8003dcc:	2380      	movs	r3, #128	; 0x80
 8003dce:	e7e2      	b.n	8003d96 <UART_SetConfig+0x15e>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	d06b      	beq.n	8003eac <UART_SetConfig+0x274>
 8003dd4:	2801      	cmp	r0, #1
 8003dd6:	d06c      	beq.n	8003eb2 <UART_SetConfig+0x27a>
 8003dd8:	2802      	cmp	r0, #2
 8003dda:	d06d      	beq.n	8003eb8 <UART_SetConfig+0x280>
 8003ddc:	2803      	cmp	r0, #3
 8003dde:	f04f 0102 	mov.w	r1, #2
 8003de2:	d06c      	beq.n	8003ebe <UART_SetConfig+0x286>
 8003de4:	2804      	cmp	r0, #4
 8003de6:	d06c      	beq.n	8003ec2 <UART_SetConfig+0x28a>
 8003de8:	2805      	cmp	r0, #5
 8003dea:	d06c      	beq.n	8003ec6 <UART_SetConfig+0x28e>
 8003dec:	2806      	cmp	r0, #6
 8003dee:	d06c      	beq.n	8003eca <UART_SetConfig+0x292>
 8003df0:	2807      	cmp	r0, #7
 8003df2:	d06c      	beq.n	8003ece <UART_SetConfig+0x296>
 8003df4:	2808      	cmp	r0, #8
 8003df6:	d06c      	beq.n	8003ed2 <UART_SetConfig+0x29a>
 8003df8:	2809      	cmp	r0, #9
 8003dfa:	d06c      	beq.n	8003ed6 <UART_SetConfig+0x29e>
 8003dfc:	280a      	cmp	r0, #10
 8003dfe:	d06c      	beq.n	8003eda <UART_SetConfig+0x2a2>
 8003e00:	4b45      	ldr	r3, [pc, #276]	; (8003f18 <UART_SetConfig+0x2e0>)
 8003e02:	f24f 4224 	movw	r2, #62500	; 0xf424
 8003e06:	280b      	cmp	r0, #11
 8003e08:	bf14      	ite	ne
 8003e0a:	4618      	movne	r0, r3
 8003e0c:	4610      	moveq	r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e0e:	6862      	ldr	r2, [r4, #4]
 8003e10:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003e14:	4283      	cmp	r3, r0
 8003e16:	f63f af68 	bhi.w	8003cea <UART_SetConfig+0xb2>
 8003e1a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8003e1e:	f63f af64 	bhi.w	8003cea <UART_SetConfig+0xb2>
        switch (clocksource)
 8003e22:	2908      	cmp	r1, #8
 8003e24:	f200 8170 	bhi.w	8004108 <UART_SetConfig+0x4d0>
 8003e28:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003e2c:	016e00a4 	.word	0x016e00a4
 8003e30:	016e00e0 	.word	0x016e00e0
 8003e34:	016e011c 	.word	0x016e011c
 8003e38:	016e016e 	.word	0x016e016e
 8003e3c:	0135      	.short	0x0135
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003e3e:	f7ff fa5f 	bl	8003300 <HAL_RCC_GetSysClockFreq>
 8003e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e44:	b1e3      	cbz	r3, 8003e80 <UART_SetConfig+0x248>
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d01c      	beq.n	8003e84 <UART_SetConfig+0x24c>
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d01c      	beq.n	8003e88 <UART_SetConfig+0x250>
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d01c      	beq.n	8003e8c <UART_SetConfig+0x254>
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d01c      	beq.n	8003e90 <UART_SetConfig+0x258>
 8003e56:	2b05      	cmp	r3, #5
 8003e58:	d01c      	beq.n	8003e94 <UART_SetConfig+0x25c>
 8003e5a:	2b06      	cmp	r3, #6
 8003e5c:	d01c      	beq.n	8003e98 <UART_SetConfig+0x260>
 8003e5e:	2b07      	cmp	r3, #7
 8003e60:	d01c      	beq.n	8003e9c <UART_SetConfig+0x264>
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d01c      	beq.n	8003ea0 <UART_SetConfig+0x268>
 8003e66:	2b09      	cmp	r3, #9
 8003e68:	d01c      	beq.n	8003ea4 <UART_SetConfig+0x26c>
 8003e6a:	2b0a      	cmp	r3, #10
 8003e6c:	d01c      	beq.n	8003ea8 <UART_SetConfig+0x270>
 8003e6e:	2b0b      	cmp	r3, #11
 8003e70:	bf14      	ite	ne
 8003e72:	2301      	movne	r3, #1
 8003e74:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003e78:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8003e7c:	2104      	movs	r1, #4
 8003e7e:	e78d      	b.n	8003d9c <UART_SetConfig+0x164>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003e80:	2301      	movs	r3, #1
 8003e82:	e7f9      	b.n	8003e78 <UART_SetConfig+0x240>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e7f7      	b.n	8003e78 <UART_SetConfig+0x240>
 8003e88:	2304      	movs	r3, #4
 8003e8a:	e7f5      	b.n	8003e78 <UART_SetConfig+0x240>
 8003e8c:	2306      	movs	r3, #6
 8003e8e:	e7f3      	b.n	8003e78 <UART_SetConfig+0x240>
 8003e90:	2308      	movs	r3, #8
 8003e92:	e7f1      	b.n	8003e78 <UART_SetConfig+0x240>
 8003e94:	230a      	movs	r3, #10
 8003e96:	e7ef      	b.n	8003e78 <UART_SetConfig+0x240>
 8003e98:	230c      	movs	r3, #12
 8003e9a:	e7ed      	b.n	8003e78 <UART_SetConfig+0x240>
 8003e9c:	2310      	movs	r3, #16
 8003e9e:	e7eb      	b.n	8003e78 <UART_SetConfig+0x240>
 8003ea0:	2320      	movs	r3, #32
 8003ea2:	e7e9      	b.n	8003e78 <UART_SetConfig+0x240>
 8003ea4:	2340      	movs	r3, #64	; 0x40
 8003ea6:	e7e7      	b.n	8003e78 <UART_SetConfig+0x240>
 8003ea8:	2380      	movs	r3, #128	; 0x80
 8003eaa:	e7e5      	b.n	8003e78 <UART_SetConfig+0x240>
 8003eac:	2102      	movs	r1, #2
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003eae:	481a      	ldr	r0, [pc, #104]	; (8003f18 <UART_SetConfig+0x2e0>)
 8003eb0:	e7ad      	b.n	8003e0e <UART_SetConfig+0x1d6>
 8003eb2:	2102      	movs	r1, #2
 8003eb4:	4819      	ldr	r0, [pc, #100]	; (8003f1c <UART_SetConfig+0x2e4>)
 8003eb6:	e7aa      	b.n	8003e0e <UART_SetConfig+0x1d6>
 8003eb8:	4601      	mov	r1, r0
 8003eba:	4819      	ldr	r0, [pc, #100]	; (8003f20 <UART_SetConfig+0x2e8>)
 8003ebc:	e7a7      	b.n	8003e0e <UART_SetConfig+0x1d6>
 8003ebe:	4819      	ldr	r0, [pc, #100]	; (8003f24 <UART_SetConfig+0x2ec>)
 8003ec0:	e7a5      	b.n	8003e0e <UART_SetConfig+0x1d6>
 8003ec2:	4819      	ldr	r0, [pc, #100]	; (8003f28 <UART_SetConfig+0x2f0>)
 8003ec4:	e7a3      	b.n	8003e0e <UART_SetConfig+0x1d6>
 8003ec6:	4819      	ldr	r0, [pc, #100]	; (8003f2c <UART_SetConfig+0x2f4>)
 8003ec8:	e7a1      	b.n	8003e0e <UART_SetConfig+0x1d6>
 8003eca:	4819      	ldr	r0, [pc, #100]	; (8003f30 <UART_SetConfig+0x2f8>)
 8003ecc:	e79f      	b.n	8003e0e <UART_SetConfig+0x1d6>
 8003ece:	4819      	ldr	r0, [pc, #100]	; (8003f34 <UART_SetConfig+0x2fc>)
 8003ed0:	e79d      	b.n	8003e0e <UART_SetConfig+0x1d6>
 8003ed2:	4819      	ldr	r0, [pc, #100]	; (8003f38 <UART_SetConfig+0x300>)
 8003ed4:	e79b      	b.n	8003e0e <UART_SetConfig+0x1d6>
 8003ed6:	4819      	ldr	r0, [pc, #100]	; (8003f3c <UART_SetConfig+0x304>)
 8003ed8:	e799      	b.n	8003e0e <UART_SetConfig+0x1d6>
 8003eda:	4819      	ldr	r0, [pc, #100]	; (8003f40 <UART_SetConfig+0x308>)
 8003edc:	e797      	b.n	8003e0e <UART_SetConfig+0x1d6>
 8003ede:	2108      	movs	r1, #8
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003ee0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003ee4:	e793      	b.n	8003e0e <UART_SetConfig+0x1d6>
 8003ee6:	2108      	movs	r1, #8
 8003ee8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003eec:	e78f      	b.n	8003e0e <UART_SetConfig+0x1d6>
 8003eee:	2108      	movs	r1, #8
 8003ef0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003ef4:	e78b      	b.n	8003e0e <UART_SetConfig+0x1d6>
 8003ef6:	2108      	movs	r1, #8
 8003ef8:	f241 5055 	movw	r0, #5461	; 0x1555
 8003efc:	e787      	b.n	8003e0e <UART_SetConfig+0x1d6>
 8003efe:	2108      	movs	r1, #8
 8003f00:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003f04:	e783      	b.n	8003e0e <UART_SetConfig+0x1d6>
 8003f06:	bf00      	nop
 8003f08:	cfff69f3 	.word	0xcfff69f3
 8003f0c:	40008000 	.word	0x40008000
 8003f10:	40013800 	.word	0x40013800
 8003f14:	08006530 	.word	0x08006530
 8003f18:	00f42400 	.word	0x00f42400
 8003f1c:	007a1200 	.word	0x007a1200
 8003f20:	003d0900 	.word	0x003d0900
 8003f24:	0028b0aa 	.word	0x0028b0aa
 8003f28:	001e8480 	.word	0x001e8480
 8003f2c:	00186a00 	.word	0x00186a00
 8003f30:	00145855 	.word	0x00145855
 8003f34:	000f4240 	.word	0x000f4240
 8003f38:	0007a120 	.word	0x0007a120
 8003f3c:	0003d090 	.word	0x0003d090
 8003f40:	0001e848 	.word	0x0001e848
 8003f44:	2108      	movs	r1, #8
 8003f46:	f640 40cc 	movw	r0, #3276	; 0xccc
 8003f4a:	e760      	b.n	8003e0e <UART_SetConfig+0x1d6>
 8003f4c:	2108      	movs	r1, #8
 8003f4e:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8003f52:	e75c      	b.n	8003e0e <UART_SetConfig+0x1d6>
 8003f54:	2108      	movs	r1, #8
 8003f56:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003f5a:	e758      	b.n	8003e0e <UART_SetConfig+0x1d6>
 8003f5c:	4601      	mov	r1, r0
 8003f5e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003f62:	e754      	b.n	8003e0e <UART_SetConfig+0x1d6>
 8003f64:	2108      	movs	r1, #8
 8003f66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003f6a:	e750      	b.n	8003e0e <UART_SetConfig+0x1d6>
 8003f6c:	2108      	movs	r1, #8
 8003f6e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003f72:	e74c      	b.n	8003e0e <UART_SetConfig+0x1d6>
            pclk = HAL_RCC_GetPCLK1Freq();
 8003f74:	f7ff fa22 	bl	80033bc <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 8089 	beq.w	8004092 <UART_SetConfig+0x45a>
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d072      	beq.n	800406a <UART_SetConfig+0x432>
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d072      	beq.n	800406e <UART_SetConfig+0x436>
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d072      	beq.n	8004072 <UART_SetConfig+0x43a>
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d072      	beq.n	8004076 <UART_SetConfig+0x43e>
 8003f90:	2b05      	cmp	r3, #5
 8003f92:	d072      	beq.n	800407a <UART_SetConfig+0x442>
 8003f94:	2b06      	cmp	r3, #6
 8003f96:	d072      	beq.n	800407e <UART_SetConfig+0x446>
 8003f98:	2b07      	cmp	r3, #7
 8003f9a:	d072      	beq.n	8004082 <UART_SetConfig+0x44a>
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d072      	beq.n	8004086 <UART_SetConfig+0x44e>
 8003fa0:	2b09      	cmp	r3, #9
 8003fa2:	d072      	beq.n	800408a <UART_SetConfig+0x452>
 8003fa4:	2b0a      	cmp	r3, #10
 8003fa6:	d072      	beq.n	800408e <UART_SetConfig+0x456>
 8003fa8:	2b0b      	cmp	r3, #11
 8003faa:	d172      	bne.n	8004092 <UART_SetConfig+0x45a>
 8003fac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	f7fc f8e4 	bl	8000180 <__aeabi_uldivmod>
 8003fb8:	6865      	ldr	r5, [r4, #4]
 8003fba:	020f      	lsls	r7, r1, #8
 8003fbc:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8003fc0:	0206      	lsls	r6, r0, #8
 8003fc2:	0868      	lsrs	r0, r5, #1
 8003fc4:	eb16 0b00 	adds.w	fp, r6, r0
 8003fc8:	f147 0c00 	adc.w	ip, r7, #0
 8003fcc:	462a      	mov	r2, r5
 8003fce:	2300      	movs	r3, #0
 8003fd0:	4658      	mov	r0, fp
 8003fd2:	4661      	mov	r1, ip
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fd4:	f7fc f8d4 	bl	8000180 <__aeabi_uldivmod>
            break;
 8003fd8:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fda:	4ba5      	ldr	r3, [pc, #660]	; (8004270 <UART_SetConfig+0x638>)
 8003fdc:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8003fe0:	4299      	cmp	r1, r3
 8003fe2:	f63f ae82 	bhi.w	8003cea <UART_SetConfig+0xb2>
          huart->Instance->BRR = usartdiv;
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	60d8      	str	r0, [r3, #12]
 8003fea:	e67f      	b.n	8003cec <UART_SetConfig+0xb4>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d036      	beq.n	8004060 <UART_SetConfig+0x428>
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d016      	beq.n	8004024 <UART_SetConfig+0x3ec>
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d016      	beq.n	8004028 <UART_SetConfig+0x3f0>
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	d016      	beq.n	800402c <UART_SetConfig+0x3f4>
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d01e      	beq.n	8004040 <UART_SetConfig+0x408>
 8004002:	2b05      	cmp	r3, #5
 8004004:	d01e      	beq.n	8004044 <UART_SetConfig+0x40c>
 8004006:	2b06      	cmp	r3, #6
 8004008:	d01e      	beq.n	8004048 <UART_SetConfig+0x410>
 800400a:	2b07      	cmp	r3, #7
 800400c:	d020      	beq.n	8004050 <UART_SetConfig+0x418>
 800400e:	2b08      	cmp	r3, #8
 8004010:	d020      	beq.n	8004054 <UART_SetConfig+0x41c>
 8004012:	2b09      	cmp	r3, #9
 8004014:	d020      	beq.n	8004058 <UART_SetConfig+0x420>
 8004016:	2b0a      	cmp	r3, #10
 8004018:	d020      	beq.n	800405c <UART_SetConfig+0x424>
 800401a:	2b0b      	cmp	r3, #11
 800401c:	d120      	bne.n	8004060 <UART_SetConfig+0x428>
 800401e:	4e95      	ldr	r6, [pc, #596]	; (8004274 <UART_SetConfig+0x63c>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004020:	2700      	movs	r7, #0
 8004022:	e006      	b.n	8004032 <UART_SetConfig+0x3fa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004024:	4e94      	ldr	r6, [pc, #592]	; (8004278 <UART_SetConfig+0x640>)
 8004026:	e7fb      	b.n	8004020 <UART_SetConfig+0x3e8>
 8004028:	4e94      	ldr	r6, [pc, #592]	; (800427c <UART_SetConfig+0x644>)
 800402a:	e7f9      	b.n	8004020 <UART_SetConfig+0x3e8>
 800402c:	a78c      	add	r7, pc, #560	; (adr r7, 8004260 <UART_SetConfig+0x628>)
 800402e:	e9d7 6700 	ldrd	r6, r7, [r7]
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004032:	0855      	lsrs	r5, r2, #1
 8004034:	1970      	adds	r0, r6, r5
 8004036:	f04f 0300 	mov.w	r3, #0
 800403a:	f147 0100 	adc.w	r1, r7, #0
 800403e:	e7c9      	b.n	8003fd4 <UART_SetConfig+0x39c>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004040:	4e8f      	ldr	r6, [pc, #572]	; (8004280 <UART_SetConfig+0x648>)
 8004042:	e7ed      	b.n	8004020 <UART_SetConfig+0x3e8>
 8004044:	4e8f      	ldr	r6, [pc, #572]	; (8004284 <UART_SetConfig+0x64c>)
 8004046:	e7eb      	b.n	8004020 <UART_SetConfig+0x3e8>
 8004048:	a787      	add	r7, pc, #540	; (adr r7, 8004268 <UART_SetConfig+0x630>)
 800404a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800404e:	e7f0      	b.n	8004032 <UART_SetConfig+0x3fa>
 8004050:	4e8d      	ldr	r6, [pc, #564]	; (8004288 <UART_SetConfig+0x650>)
 8004052:	e7e5      	b.n	8004020 <UART_SetConfig+0x3e8>
 8004054:	4e8d      	ldr	r6, [pc, #564]	; (800428c <UART_SetConfig+0x654>)
 8004056:	e7e3      	b.n	8004020 <UART_SetConfig+0x3e8>
 8004058:	4e8d      	ldr	r6, [pc, #564]	; (8004290 <UART_SetConfig+0x658>)
 800405a:	e7e1      	b.n	8004020 <UART_SetConfig+0x3e8>
 800405c:	4e8d      	ldr	r6, [pc, #564]	; (8004294 <UART_SetConfig+0x65c>)
 800405e:	e7df      	b.n	8004020 <UART_SetConfig+0x3e8>
 8004060:	4e8d      	ldr	r6, [pc, #564]	; (8004298 <UART_SetConfig+0x660>)
 8004062:	e7dd      	b.n	8004020 <UART_SetConfig+0x3e8>
            pclk = HAL_RCC_GetSysClockFreq();
 8004064:	f7ff f94c 	bl	8003300 <HAL_RCC_GetSysClockFreq>
 8004068:	e786      	b.n	8003f78 <UART_SetConfig+0x340>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800406a:	2202      	movs	r2, #2
 800406c:	e7a0      	b.n	8003fb0 <UART_SetConfig+0x378>
 800406e:	2204      	movs	r2, #4
 8004070:	e79e      	b.n	8003fb0 <UART_SetConfig+0x378>
 8004072:	2206      	movs	r2, #6
 8004074:	e79c      	b.n	8003fb0 <UART_SetConfig+0x378>
 8004076:	2208      	movs	r2, #8
 8004078:	e79a      	b.n	8003fb0 <UART_SetConfig+0x378>
 800407a:	220a      	movs	r2, #10
 800407c:	e798      	b.n	8003fb0 <UART_SetConfig+0x378>
 800407e:	220c      	movs	r2, #12
 8004080:	e796      	b.n	8003fb0 <UART_SetConfig+0x378>
 8004082:	2210      	movs	r2, #16
 8004084:	e794      	b.n	8003fb0 <UART_SetConfig+0x378>
 8004086:	2220      	movs	r2, #32
 8004088:	e792      	b.n	8003fb0 <UART_SetConfig+0x378>
 800408a:	2240      	movs	r2, #64	; 0x40
 800408c:	e790      	b.n	8003fb0 <UART_SetConfig+0x378>
 800408e:	2280      	movs	r2, #128	; 0x80
 8004090:	e78e      	b.n	8003fb0 <UART_SetConfig+0x378>
 8004092:	2201      	movs	r2, #1
 8004094:	e78c      	b.n	8003fb0 <UART_SetConfig+0x378>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004096:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004098:	b39b      	cbz	r3, 8004102 <UART_SetConfig+0x4ca>
 800409a:	2b01      	cmp	r3, #1
 800409c:	d016      	beq.n	80040cc <UART_SetConfig+0x494>
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d017      	beq.n	80040d2 <UART_SetConfig+0x49a>
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d018      	beq.n	80040d8 <UART_SetConfig+0x4a0>
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d018      	beq.n	80040dc <UART_SetConfig+0x4a4>
 80040aa:	2b05      	cmp	r3, #5
 80040ac:	d019      	beq.n	80040e2 <UART_SetConfig+0x4aa>
 80040ae:	2b06      	cmp	r3, #6
 80040b0:	d019      	beq.n	80040e6 <UART_SetConfig+0x4ae>
 80040b2:	2b07      	cmp	r3, #7
 80040b4:	d019      	beq.n	80040ea <UART_SetConfig+0x4b2>
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d01a      	beq.n	80040f0 <UART_SetConfig+0x4b8>
 80040ba:	2b09      	cmp	r3, #9
 80040bc:	d01b      	beq.n	80040f6 <UART_SetConfig+0x4be>
 80040be:	2b0a      	cmp	r3, #10
 80040c0:	d01c      	beq.n	80040fc <UART_SetConfig+0x4c4>
 80040c2:	2b0b      	cmp	r3, #11
 80040c4:	d11d      	bne.n	8004102 <UART_SetConfig+0x4ca>
 80040c6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 80040ca:	e7a9      	b.n	8004020 <UART_SetConfig+0x3e8>
 80040cc:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 80040d0:	e7a6      	b.n	8004020 <UART_SetConfig+0x3e8>
 80040d2:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80040d6:	e7a3      	b.n	8004020 <UART_SetConfig+0x3e8>
 80040d8:	4e70      	ldr	r6, [pc, #448]	; (800429c <UART_SetConfig+0x664>)
 80040da:	e7a1      	b.n	8004020 <UART_SetConfig+0x3e8>
 80040dc:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 80040e0:	e79e      	b.n	8004020 <UART_SetConfig+0x3e8>
 80040e2:	4e6f      	ldr	r6, [pc, #444]	; (80042a0 <UART_SetConfig+0x668>)
 80040e4:	e79c      	b.n	8004020 <UART_SetConfig+0x3e8>
 80040e6:	4e6f      	ldr	r6, [pc, #444]	; (80042a4 <UART_SetConfig+0x66c>)
 80040e8:	e79a      	b.n	8004020 <UART_SetConfig+0x3e8>
 80040ea:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 80040ee:	e797      	b.n	8004020 <UART_SetConfig+0x3e8>
 80040f0:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80040f4:	e794      	b.n	8004020 <UART_SetConfig+0x3e8>
 80040f6:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80040fa:	e791      	b.n	8004020 <UART_SetConfig+0x3e8>
 80040fc:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8004100:	e78e      	b.n	8004020 <UART_SetConfig+0x3e8>
 8004102:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 8004106:	e78b      	b.n	8004020 <UART_SetConfig+0x3e8>
            ret = HAL_ERROR;
 8004108:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800410a:	2000      	movs	r0, #0
 800410c:	e765      	b.n	8003fda <UART_SetConfig+0x3a2>
        pclk = HAL_RCC_GetPCLK2Freq();
 800410e:	f7ff f967 	bl	80033e0 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004112:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004114:	2900      	cmp	r1, #0
 8004116:	d06b      	beq.n	80041f0 <UART_SetConfig+0x5b8>
 8004118:	2901      	cmp	r1, #1
 800411a:	d06b      	beq.n	80041f4 <UART_SetConfig+0x5bc>
 800411c:	2902      	cmp	r1, #2
 800411e:	d06b      	beq.n	80041f8 <UART_SetConfig+0x5c0>
 8004120:	2903      	cmp	r1, #3
 8004122:	d06b      	beq.n	80041fc <UART_SetConfig+0x5c4>
 8004124:	2904      	cmp	r1, #4
 8004126:	d06b      	beq.n	8004200 <UART_SetConfig+0x5c8>
 8004128:	2905      	cmp	r1, #5
 800412a:	d06b      	beq.n	8004204 <UART_SetConfig+0x5cc>
 800412c:	2906      	cmp	r1, #6
 800412e:	d06b      	beq.n	8004208 <UART_SetConfig+0x5d0>
 8004130:	2907      	cmp	r1, #7
 8004132:	d06b      	beq.n	800420c <UART_SetConfig+0x5d4>
 8004134:	2908      	cmp	r1, #8
 8004136:	d06b      	beq.n	8004210 <UART_SetConfig+0x5d8>
 8004138:	2909      	cmp	r1, #9
 800413a:	d06b      	beq.n	8004214 <UART_SetConfig+0x5dc>
 800413c:	290a      	cmp	r1, #10
 800413e:	d06b      	beq.n	8004218 <UART_SetConfig+0x5e0>
 8004140:	290b      	cmp	r1, #11
 8004142:	bf14      	ite	ne
 8004144:	2201      	movne	r2, #1
 8004146:	f44f 7280 	moveq.w	r2, #256	; 0x100
 800414a:	6861      	ldr	r1, [r4, #4]
 800414c:	fbb0 f2f2 	udiv	r2, r0, r2
 8004150:	084b      	lsrs	r3, r1, #1
 8004152:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8004156:	fbb3 f3f1 	udiv	r3, r3, r1
 800415a:	e01f      	b.n	800419c <UART_SetConfig+0x564>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800415c:	b378      	cbz	r0, 80041be <UART_SetConfig+0x586>
 800415e:	2801      	cmp	r0, #1
 8004160:	d02f      	beq.n	80041c2 <UART_SetConfig+0x58a>
 8004162:	2802      	cmp	r0, #2
 8004164:	d02f      	beq.n	80041c6 <UART_SetConfig+0x58e>
 8004166:	2803      	cmp	r0, #3
 8004168:	d02f      	beq.n	80041ca <UART_SetConfig+0x592>
 800416a:	2804      	cmp	r0, #4
 800416c:	d02f      	beq.n	80041ce <UART_SetConfig+0x596>
 800416e:	2805      	cmp	r0, #5
 8004170:	d02f      	beq.n	80041d2 <UART_SetConfig+0x59a>
 8004172:	2806      	cmp	r0, #6
 8004174:	d02f      	beq.n	80041d6 <UART_SetConfig+0x59e>
 8004176:	2807      	cmp	r0, #7
 8004178:	d02f      	beq.n	80041da <UART_SetConfig+0x5a2>
 800417a:	2808      	cmp	r0, #8
 800417c:	d02f      	beq.n	80041de <UART_SetConfig+0x5a6>
 800417e:	2809      	cmp	r0, #9
 8004180:	d02f      	beq.n	80041e2 <UART_SetConfig+0x5aa>
 8004182:	280a      	cmp	r0, #10
 8004184:	d02f      	beq.n	80041e6 <UART_SetConfig+0x5ae>
 8004186:	4b43      	ldr	r3, [pc, #268]	; (8004294 <UART_SetConfig+0x65c>)
 8004188:	4a47      	ldr	r2, [pc, #284]	; (80042a8 <UART_SetConfig+0x670>)
 800418a:	280b      	cmp	r0, #11
 800418c:	bf14      	ite	ne
 800418e:	4618      	movne	r0, r3
 8004190:	4610      	moveq	r0, r2
 8004192:	6863      	ldr	r3, [r4, #4]
 8004194:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004198:	fbb0 f3f3 	udiv	r3, r0, r3
 800419c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800419e:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041a0:	f1a3 0010 	sub.w	r0, r3, #16
 80041a4:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80041a8:	4288      	cmp	r0, r1
 80041aa:	f63f ad9e 	bhi.w	8003cea <UART_SetConfig+0xb2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041ae:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 80041b2:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041b4:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 80041b8:	430b      	orrs	r3, r1
 80041ba:	60c3      	str	r3, [r0, #12]
 80041bc:	e596      	b.n	8003cec <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041be:	4835      	ldr	r0, [pc, #212]	; (8004294 <UART_SetConfig+0x65c>)
 80041c0:	e7e7      	b.n	8004192 <UART_SetConfig+0x55a>
 80041c2:	482c      	ldr	r0, [pc, #176]	; (8004274 <UART_SetConfig+0x63c>)
 80041c4:	e7e5      	b.n	8004192 <UART_SetConfig+0x55a>
 80041c6:	4839      	ldr	r0, [pc, #228]	; (80042ac <UART_SetConfig+0x674>)
 80041c8:	e7e3      	b.n	8004192 <UART_SetConfig+0x55a>
 80041ca:	4839      	ldr	r0, [pc, #228]	; (80042b0 <UART_SetConfig+0x678>)
 80041cc:	e7e1      	b.n	8004192 <UART_SetConfig+0x55a>
 80041ce:	4839      	ldr	r0, [pc, #228]	; (80042b4 <UART_SetConfig+0x67c>)
 80041d0:	e7df      	b.n	8004192 <UART_SetConfig+0x55a>
 80041d2:	4839      	ldr	r0, [pc, #228]	; (80042b8 <UART_SetConfig+0x680>)
 80041d4:	e7dd      	b.n	8004192 <UART_SetConfig+0x55a>
 80041d6:	4839      	ldr	r0, [pc, #228]	; (80042bc <UART_SetConfig+0x684>)
 80041d8:	e7db      	b.n	8004192 <UART_SetConfig+0x55a>
 80041da:	4839      	ldr	r0, [pc, #228]	; (80042c0 <UART_SetConfig+0x688>)
 80041dc:	e7d9      	b.n	8004192 <UART_SetConfig+0x55a>
 80041de:	4839      	ldr	r0, [pc, #228]	; (80042c4 <UART_SetConfig+0x68c>)
 80041e0:	e7d7      	b.n	8004192 <UART_SetConfig+0x55a>
 80041e2:	4839      	ldr	r0, [pc, #228]	; (80042c8 <UART_SetConfig+0x690>)
 80041e4:	e7d5      	b.n	8004192 <UART_SetConfig+0x55a>
 80041e6:	4839      	ldr	r0, [pc, #228]	; (80042cc <UART_SetConfig+0x694>)
 80041e8:	e7d3      	b.n	8004192 <UART_SetConfig+0x55a>
        pclk = HAL_RCC_GetSysClockFreq();
 80041ea:	f7ff f889 	bl	8003300 <HAL_RCC_GetSysClockFreq>
 80041ee:	e790      	b.n	8004112 <UART_SetConfig+0x4da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041f0:	2201      	movs	r2, #1
 80041f2:	e7aa      	b.n	800414a <UART_SetConfig+0x512>
 80041f4:	2202      	movs	r2, #2
 80041f6:	e7a8      	b.n	800414a <UART_SetConfig+0x512>
 80041f8:	2204      	movs	r2, #4
 80041fa:	e7a6      	b.n	800414a <UART_SetConfig+0x512>
 80041fc:	2206      	movs	r2, #6
 80041fe:	e7a4      	b.n	800414a <UART_SetConfig+0x512>
 8004200:	2208      	movs	r2, #8
 8004202:	e7a2      	b.n	800414a <UART_SetConfig+0x512>
 8004204:	220a      	movs	r2, #10
 8004206:	e7a0      	b.n	800414a <UART_SetConfig+0x512>
 8004208:	220c      	movs	r2, #12
 800420a:	e79e      	b.n	800414a <UART_SetConfig+0x512>
 800420c:	2210      	movs	r2, #16
 800420e:	e79c      	b.n	800414a <UART_SetConfig+0x512>
 8004210:	2220      	movs	r2, #32
 8004212:	e79a      	b.n	800414a <UART_SetConfig+0x512>
 8004214:	2240      	movs	r2, #64	; 0x40
 8004216:	e798      	b.n	800414a <UART_SetConfig+0x512>
 8004218:	2280      	movs	r2, #128	; 0x80
 800421a:	e796      	b.n	800414a <UART_SetConfig+0x512>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800421c:	2800      	cmp	r0, #0
 800421e:	d057      	beq.n	80042d0 <UART_SetConfig+0x698>
 8004220:	2801      	cmp	r0, #1
 8004222:	d058      	beq.n	80042d6 <UART_SetConfig+0x69e>
 8004224:	2802      	cmp	r0, #2
 8004226:	d059      	beq.n	80042dc <UART_SetConfig+0x6a4>
 8004228:	2803      	cmp	r0, #3
 800422a:	d05a      	beq.n	80042e2 <UART_SetConfig+0x6aa>
 800422c:	2804      	cmp	r0, #4
 800422e:	d05b      	beq.n	80042e8 <UART_SetConfig+0x6b0>
 8004230:	2805      	cmp	r0, #5
 8004232:	d05c      	beq.n	80042ee <UART_SetConfig+0x6b6>
 8004234:	2806      	cmp	r0, #6
 8004236:	d05d      	beq.n	80042f4 <UART_SetConfig+0x6bc>
 8004238:	2807      	cmp	r0, #7
 800423a:	d05e      	beq.n	80042fa <UART_SetConfig+0x6c2>
 800423c:	2808      	cmp	r0, #8
 800423e:	d05f      	beq.n	8004300 <UART_SetConfig+0x6c8>
 8004240:	2809      	cmp	r0, #9
 8004242:	d060      	beq.n	8004306 <UART_SetConfig+0x6ce>
 8004244:	280a      	cmp	r0, #10
 8004246:	d061      	beq.n	800430c <UART_SetConfig+0x6d4>
 8004248:	280b      	cmp	r0, #11
 800424a:	bf14      	ite	ne
 800424c:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8004250:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8004254:	6860      	ldr	r0, [r4, #4]
 8004256:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 800425a:	fbb3 f3f0 	udiv	r3, r3, r0
 800425e:	e79d      	b.n	800419c <UART_SetConfig+0x564>
 8004260:	28b0aa00 	.word	0x28b0aa00
 8004264:	00000000 	.word	0x00000000
 8004268:	14585500 	.word	0x14585500
 800426c:	00000000 	.word	0x00000000
 8004270:	000ffcff 	.word	0x000ffcff
 8004274:	00f42400 	.word	0x00f42400
 8004278:	7a120000 	.word	0x7a120000
 800427c:	3d090000 	.word	0x3d090000
 8004280:	1e848000 	.word	0x1e848000
 8004284:	186a0000 	.word	0x186a0000
 8004288:	0f424000 	.word	0x0f424000
 800428c:	07a12000 	.word	0x07a12000
 8004290:	03d09000 	.word	0x03d09000
 8004294:	01e84800 	.word	0x01e84800
 8004298:	f4240000 	.word	0xf4240000
 800429c:	00155500 	.word	0x00155500
 80042a0:	000ccc00 	.word	0x000ccc00
 80042a4:	000aaa00 	.word	0x000aaa00
 80042a8:	0001e848 	.word	0x0001e848
 80042ac:	007a1200 	.word	0x007a1200
 80042b0:	00516154 	.word	0x00516154
 80042b4:	003d0900 	.word	0x003d0900
 80042b8:	0030d400 	.word	0x0030d400
 80042bc:	0028b0aa 	.word	0x0028b0aa
 80042c0:	001e8480 	.word	0x001e8480
 80042c4:	000f4240 	.word	0x000f4240
 80042c8:	0007a120 	.word	0x0007a120
 80042cc:	0003d090 	.word	0x0003d090
 80042d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042d4:	e7be      	b.n	8004254 <UART_SetConfig+0x61c>
 80042d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042da:	e7bb      	b.n	8004254 <UART_SetConfig+0x61c>
 80042dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042e0:	e7b8      	b.n	8004254 <UART_SetConfig+0x61c>
 80042e2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80042e6:	e7b5      	b.n	8004254 <UART_SetConfig+0x61c>
 80042e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042ec:	e7b2      	b.n	8004254 <UART_SetConfig+0x61c>
 80042ee:	f641 1398 	movw	r3, #6552	; 0x1998
 80042f2:	e7af      	b.n	8004254 <UART_SetConfig+0x61c>
 80042f4:	f241 5354 	movw	r3, #5460	; 0x1554
 80042f8:	e7ac      	b.n	8004254 <UART_SetConfig+0x61c>
 80042fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042fe:	e7a9      	b.n	8004254 <UART_SetConfig+0x61c>
 8004300:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004304:	e7a6      	b.n	8004254 <UART_SetConfig+0x61c>
 8004306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800430a:	e7a3      	b.n	8004254 <UART_SetConfig+0x61c>
 800430c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004310:	e7a0      	b.n	8004254 <UART_SetConfig+0x61c>
        ret = HAL_ERROR;
 8004312:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8004314:	2300      	movs	r3, #0
 8004316:	e743      	b.n	80041a0 <UART_SetConfig+0x568>
    switch (clocksource)
 8004318:	2b07      	cmp	r3, #7
 800431a:	f200 80cd 	bhi.w	80044b8 <UART_SetConfig+0x880>
 800431e:	e8df f003 	tbb	[pc, r3]
 8004322:	2a04      	.short	0x2a04
 8004324:	cbcb6dcb 	.word	0xcbcb6dcb
 8004328:	86cb      	.short	0x86cb
        pclk = HAL_RCC_GetPCLK2Freq();
 800432a:	f7ff f859 	bl	80033e0 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800432e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004330:	2b00      	cmp	r3, #0
 8004332:	d066      	beq.n	8004402 <UART_SetConfig+0x7ca>
 8004334:	2b01      	cmp	r3, #1
 8004336:	d066      	beq.n	8004406 <UART_SetConfig+0x7ce>
 8004338:	2b02      	cmp	r3, #2
 800433a:	d066      	beq.n	800440a <UART_SetConfig+0x7d2>
 800433c:	2b03      	cmp	r3, #3
 800433e:	d066      	beq.n	800440e <UART_SetConfig+0x7d6>
 8004340:	2b04      	cmp	r3, #4
 8004342:	d066      	beq.n	8004412 <UART_SetConfig+0x7da>
 8004344:	2b05      	cmp	r3, #5
 8004346:	d066      	beq.n	8004416 <UART_SetConfig+0x7de>
 8004348:	2b06      	cmp	r3, #6
 800434a:	d066      	beq.n	800441a <UART_SetConfig+0x7e2>
 800434c:	2b07      	cmp	r3, #7
 800434e:	d066      	beq.n	800441e <UART_SetConfig+0x7e6>
 8004350:	2b08      	cmp	r3, #8
 8004352:	d066      	beq.n	8004422 <UART_SetConfig+0x7ea>
 8004354:	2b09      	cmp	r3, #9
 8004356:	d066      	beq.n	8004426 <UART_SetConfig+0x7ee>
 8004358:	2b0a      	cmp	r3, #10
 800435a:	d066      	beq.n	800442a <UART_SetConfig+0x7f2>
 800435c:	2b0b      	cmp	r3, #11
 800435e:	bf14      	ite	ne
 8004360:	2301      	movne	r3, #1
 8004362:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8004366:	6862      	ldr	r2, [r4, #4]
 8004368:	fbb0 f3f3 	udiv	r3, r0, r3
 800436c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004370:	fbb3 f3f2 	udiv	r3, r3, r2
 8004374:	e020      	b.n	80043b8 <UART_SetConfig+0x780>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004376:	b358      	cbz	r0, 80043d0 <UART_SetConfig+0x798>
 8004378:	2801      	cmp	r0, #1
 800437a:	d02b      	beq.n	80043d4 <UART_SetConfig+0x79c>
 800437c:	2802      	cmp	r0, #2
 800437e:	d02b      	beq.n	80043d8 <UART_SetConfig+0x7a0>
 8004380:	2803      	cmp	r0, #3
 8004382:	d02b      	beq.n	80043dc <UART_SetConfig+0x7a4>
 8004384:	2804      	cmp	r0, #4
 8004386:	d02b      	beq.n	80043e0 <UART_SetConfig+0x7a8>
 8004388:	2805      	cmp	r0, #5
 800438a:	d02b      	beq.n	80043e4 <UART_SetConfig+0x7ac>
 800438c:	2806      	cmp	r0, #6
 800438e:	d02b      	beq.n	80043e8 <UART_SetConfig+0x7b0>
 8004390:	2807      	cmp	r0, #7
 8004392:	d02b      	beq.n	80043ec <UART_SetConfig+0x7b4>
 8004394:	2808      	cmp	r0, #8
 8004396:	d02b      	beq.n	80043f0 <UART_SetConfig+0x7b8>
 8004398:	2809      	cmp	r0, #9
 800439a:	d02b      	beq.n	80043f4 <UART_SetConfig+0x7bc>
 800439c:	280a      	cmp	r0, #10
 800439e:	d02b      	beq.n	80043f8 <UART_SetConfig+0x7c0>
 80043a0:	4b47      	ldr	r3, [pc, #284]	; (80044c0 <UART_SetConfig+0x888>)
 80043a2:	f24f 4224 	movw	r2, #62500	; 0xf424
 80043a6:	280b      	cmp	r0, #11
 80043a8:	bf14      	ite	ne
 80043aa:	4618      	movne	r0, r3
 80043ac:	4610      	moveq	r0, r2
 80043ae:	6863      	ldr	r3, [r4, #4]
 80043b0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80043b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80043b8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80043ba:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043bc:	f1a3 0010 	sub.w	r0, r3, #16
 80043c0:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80043c4:	4288      	cmp	r0, r1
 80043c6:	f63f ac90 	bhi.w	8003cea <UART_SetConfig+0xb2>
      huart->Instance->BRR = usartdiv;
 80043ca:	6821      	ldr	r1, [r4, #0]
 80043cc:	60cb      	str	r3, [r1, #12]
 80043ce:	e48d      	b.n	8003cec <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043d0:	483b      	ldr	r0, [pc, #236]	; (80044c0 <UART_SetConfig+0x888>)
 80043d2:	e7ec      	b.n	80043ae <UART_SetConfig+0x776>
 80043d4:	483b      	ldr	r0, [pc, #236]	; (80044c4 <UART_SetConfig+0x88c>)
 80043d6:	e7ea      	b.n	80043ae <UART_SetConfig+0x776>
 80043d8:	483b      	ldr	r0, [pc, #236]	; (80044c8 <UART_SetConfig+0x890>)
 80043da:	e7e8      	b.n	80043ae <UART_SetConfig+0x776>
 80043dc:	483b      	ldr	r0, [pc, #236]	; (80044cc <UART_SetConfig+0x894>)
 80043de:	e7e6      	b.n	80043ae <UART_SetConfig+0x776>
 80043e0:	483b      	ldr	r0, [pc, #236]	; (80044d0 <UART_SetConfig+0x898>)
 80043e2:	e7e4      	b.n	80043ae <UART_SetConfig+0x776>
 80043e4:	483b      	ldr	r0, [pc, #236]	; (80044d4 <UART_SetConfig+0x89c>)
 80043e6:	e7e2      	b.n	80043ae <UART_SetConfig+0x776>
 80043e8:	483b      	ldr	r0, [pc, #236]	; (80044d8 <UART_SetConfig+0x8a0>)
 80043ea:	e7e0      	b.n	80043ae <UART_SetConfig+0x776>
 80043ec:	483b      	ldr	r0, [pc, #236]	; (80044dc <UART_SetConfig+0x8a4>)
 80043ee:	e7de      	b.n	80043ae <UART_SetConfig+0x776>
 80043f0:	483b      	ldr	r0, [pc, #236]	; (80044e0 <UART_SetConfig+0x8a8>)
 80043f2:	e7dc      	b.n	80043ae <UART_SetConfig+0x776>
 80043f4:	483b      	ldr	r0, [pc, #236]	; (80044e4 <UART_SetConfig+0x8ac>)
 80043f6:	e7da      	b.n	80043ae <UART_SetConfig+0x776>
 80043f8:	483b      	ldr	r0, [pc, #236]	; (80044e8 <UART_SetConfig+0x8b0>)
 80043fa:	e7d8      	b.n	80043ae <UART_SetConfig+0x776>
        pclk = HAL_RCC_GetSysClockFreq();
 80043fc:	f7fe ff80 	bl	8003300 <HAL_RCC_GetSysClockFreq>
 8004400:	e795      	b.n	800432e <UART_SetConfig+0x6f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004402:	2301      	movs	r3, #1
 8004404:	e7af      	b.n	8004366 <UART_SetConfig+0x72e>
 8004406:	2302      	movs	r3, #2
 8004408:	e7ad      	b.n	8004366 <UART_SetConfig+0x72e>
 800440a:	2304      	movs	r3, #4
 800440c:	e7ab      	b.n	8004366 <UART_SetConfig+0x72e>
 800440e:	2306      	movs	r3, #6
 8004410:	e7a9      	b.n	8004366 <UART_SetConfig+0x72e>
 8004412:	2308      	movs	r3, #8
 8004414:	e7a7      	b.n	8004366 <UART_SetConfig+0x72e>
 8004416:	230a      	movs	r3, #10
 8004418:	e7a5      	b.n	8004366 <UART_SetConfig+0x72e>
 800441a:	230c      	movs	r3, #12
 800441c:	e7a3      	b.n	8004366 <UART_SetConfig+0x72e>
 800441e:	2310      	movs	r3, #16
 8004420:	e7a1      	b.n	8004366 <UART_SetConfig+0x72e>
 8004422:	2320      	movs	r3, #32
 8004424:	e79f      	b.n	8004366 <UART_SetConfig+0x72e>
 8004426:	2340      	movs	r3, #64	; 0x40
 8004428:	e79d      	b.n	8004366 <UART_SetConfig+0x72e>
 800442a:	2380      	movs	r3, #128	; 0x80
 800442c:	e79b      	b.n	8004366 <UART_SetConfig+0x72e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800442e:	b1f0      	cbz	r0, 800446e <UART_SetConfig+0x836>
 8004430:	2801      	cmp	r0, #1
 8004432:	d01f      	beq.n	8004474 <UART_SetConfig+0x83c>
 8004434:	2802      	cmp	r0, #2
 8004436:	d020      	beq.n	800447a <UART_SetConfig+0x842>
 8004438:	2803      	cmp	r0, #3
 800443a:	d021      	beq.n	8004480 <UART_SetConfig+0x848>
 800443c:	2804      	cmp	r0, #4
 800443e:	d022      	beq.n	8004486 <UART_SetConfig+0x84e>
 8004440:	2805      	cmp	r0, #5
 8004442:	d023      	beq.n	800448c <UART_SetConfig+0x854>
 8004444:	2806      	cmp	r0, #6
 8004446:	d024      	beq.n	8004492 <UART_SetConfig+0x85a>
 8004448:	2807      	cmp	r0, #7
 800444a:	d025      	beq.n	8004498 <UART_SetConfig+0x860>
 800444c:	2808      	cmp	r0, #8
 800444e:	d026      	beq.n	800449e <UART_SetConfig+0x866>
 8004450:	2809      	cmp	r0, #9
 8004452:	d027      	beq.n	80044a4 <UART_SetConfig+0x86c>
 8004454:	280a      	cmp	r0, #10
 8004456:	d028      	beq.n	80044aa <UART_SetConfig+0x872>
 8004458:	280b      	cmp	r0, #11
 800445a:	bf14      	ite	ne
 800445c:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 8004460:	2380      	moveq	r3, #128	; 0x80
 8004462:	6860      	ldr	r0, [r4, #4]
 8004464:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8004468:	fbb3 f3f0 	udiv	r3, r3, r0
 800446c:	e7a4      	b.n	80043b8 <UART_SetConfig+0x780>
 800446e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004472:	e7f6      	b.n	8004462 <UART_SetConfig+0x82a>
 8004474:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004478:	e7f3      	b.n	8004462 <UART_SetConfig+0x82a>
 800447a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800447e:	e7f0      	b.n	8004462 <UART_SetConfig+0x82a>
 8004480:	f241 5355 	movw	r3, #5461	; 0x1555
 8004484:	e7ed      	b.n	8004462 <UART_SetConfig+0x82a>
 8004486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800448a:	e7ea      	b.n	8004462 <UART_SetConfig+0x82a>
 800448c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004490:	e7e7      	b.n	8004462 <UART_SetConfig+0x82a>
 8004492:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004496:	e7e4      	b.n	8004462 <UART_SetConfig+0x82a>
 8004498:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800449c:	e7e1      	b.n	8004462 <UART_SetConfig+0x82a>
 800449e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044a2:	e7de      	b.n	8004462 <UART_SetConfig+0x82a>
 80044a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044a8:	e7db      	b.n	8004462 <UART_SetConfig+0x82a>
 80044aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044ae:	e7d8      	b.n	8004462 <UART_SetConfig+0x82a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044b0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80044b4:	f43f af2d 	beq.w	8004312 <UART_SetConfig+0x6da>
        ret = HAL_ERROR;
 80044b8:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	e77e      	b.n	80043bc <UART_SetConfig+0x784>
 80044be:	bf00      	nop
 80044c0:	00f42400 	.word	0x00f42400
 80044c4:	007a1200 	.word	0x007a1200
 80044c8:	003d0900 	.word	0x003d0900
 80044cc:	0028b0aa 	.word	0x0028b0aa
 80044d0:	001e8480 	.word	0x001e8480
 80044d4:	00186a00 	.word	0x00186a00
 80044d8:	00145855 	.word	0x00145855
 80044dc:	000f4240 	.word	0x000f4240
 80044e0:	0007a120 	.word	0x0007a120
 80044e4:	0003d090 	.word	0x0003d090
 80044e8:	0001e848 	.word	0x0001e848

080044ec <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80044ee:	07da      	lsls	r2, r3, #31
{
 80044f0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044f2:	d506      	bpl.n	8004502 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044f4:	6801      	ldr	r1, [r0, #0]
 80044f6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80044f8:	684a      	ldr	r2, [r1, #4]
 80044fa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80044fe:	4322      	orrs	r2, r4
 8004500:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004502:	079c      	lsls	r4, r3, #30
 8004504:	d506      	bpl.n	8004514 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004506:	6801      	ldr	r1, [r0, #0]
 8004508:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800450a:	684a      	ldr	r2, [r1, #4]
 800450c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004510:	4322      	orrs	r2, r4
 8004512:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004514:	0759      	lsls	r1, r3, #29
 8004516:	d506      	bpl.n	8004526 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004518:	6801      	ldr	r1, [r0, #0]
 800451a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800451c:	684a      	ldr	r2, [r1, #4]
 800451e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004522:	4322      	orrs	r2, r4
 8004524:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004526:	071a      	lsls	r2, r3, #28
 8004528:	d506      	bpl.n	8004538 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800452a:	6801      	ldr	r1, [r0, #0]
 800452c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800452e:	684a      	ldr	r2, [r1, #4]
 8004530:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004534:	4322      	orrs	r2, r4
 8004536:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004538:	06dc      	lsls	r4, r3, #27
 800453a:	d506      	bpl.n	800454a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800453c:	6801      	ldr	r1, [r0, #0]
 800453e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004540:	688a      	ldr	r2, [r1, #8]
 8004542:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004546:	4322      	orrs	r2, r4
 8004548:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800454a:	0699      	lsls	r1, r3, #26
 800454c:	d506      	bpl.n	800455c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800454e:	6801      	ldr	r1, [r0, #0]
 8004550:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004552:	688a      	ldr	r2, [r1, #8]
 8004554:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004558:	4322      	orrs	r2, r4
 800455a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800455c:	065a      	lsls	r2, r3, #25
 800455e:	d50f      	bpl.n	8004580 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004560:	6801      	ldr	r1, [r0, #0]
 8004562:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004564:	684a      	ldr	r2, [r1, #4]
 8004566:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800456a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800456c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004570:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004572:	d105      	bne.n	8004580 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004574:	684a      	ldr	r2, [r1, #4]
 8004576:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8004578:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800457c:	4322      	orrs	r2, r4
 800457e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004580:	061b      	lsls	r3, r3, #24
 8004582:	d506      	bpl.n	8004592 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004584:	6802      	ldr	r2, [r0, #0]
 8004586:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004588:	6853      	ldr	r3, [r2, #4]
 800458a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800458e:	430b      	orrs	r3, r1
 8004590:	6053      	str	r3, [r2, #4]
}
 8004592:	bd10      	pop	{r4, pc}

08004594 <UART_WaitOnFlagUntilTimeout>:
{
 8004594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004598:	9d06      	ldr	r5, [sp, #24]
 800459a:	4604      	mov	r4, r0
 800459c:	460f      	mov	r7, r1
 800459e:	4616      	mov	r6, r2
 80045a0:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a2:	6821      	ldr	r1, [r4, #0]
 80045a4:	69ca      	ldr	r2, [r1, #28]
 80045a6:	ea37 0302 	bics.w	r3, r7, r2
 80045aa:	bf0c      	ite	eq
 80045ac:	2201      	moveq	r2, #1
 80045ae:	2200      	movne	r2, #0
 80045b0:	42b2      	cmp	r2, r6
 80045b2:	d001      	beq.n	80045b8 <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80045b4:	2000      	movs	r0, #0
 80045b6:	e01a      	b.n	80045ee <UART_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80045b8:	1c68      	adds	r0, r5, #1
 80045ba:	d0f3      	beq.n	80045a4 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045bc:	f7fd fc36 	bl	8001e2c <HAL_GetTick>
 80045c0:	eba0 0008 	sub.w	r0, r0, r8
 80045c4:	42a8      	cmp	r0, r5
 80045c6:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80045c8:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ca:	d800      	bhi.n	80045ce <UART_WaitOnFlagUntilTimeout+0x3a>
 80045cc:	b98d      	cbnz	r5, 80045f2 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80045ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045d2:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d4:	6883      	ldr	r3, [r0, #8]
 80045d6:	f023 0301 	bic.w	r3, r3, #1
 80045da:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 80045dc:	2320      	movs	r3, #32
 80045de:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80045e2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 80045e6:	2300      	movs	r3, #0
 80045e8:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 80045ec:	2003      	movs	r0, #3
}
 80045ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045f2:	075a      	lsls	r2, r3, #29
 80045f4:	d5d5      	bpl.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045f6:	69c3      	ldr	r3, [r0, #28]
 80045f8:	051b      	lsls	r3, r3, #20
 80045fa:	d5d2      	bpl.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004600:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004602:	6803      	ldr	r3, [r0, #0]
 8004604:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004608:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460a:	6883      	ldr	r3, [r0, #8]
 800460c:	f023 0301 	bic.w	r3, r3, #1
 8004610:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8004612:	2320      	movs	r3, #32
 8004614:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004618:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800461c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8004620:	e7e1      	b.n	80045e6 <UART_WaitOnFlagUntilTimeout+0x52>

08004622 <UART_CheckIdleState>:
{
 8004622:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004624:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004626:	2600      	movs	r6, #0
 8004628:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 800462c:	f7fd fbfe 	bl	8001e2c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8004636:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004638:	d417      	bmi.n	800466a <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	075b      	lsls	r3, r3, #29
 8004640:	d50a      	bpl.n	8004658 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004642:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	2200      	movs	r2, #0
 800464a:	462b      	mov	r3, r5
 800464c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004650:	4620      	mov	r0, r4
 8004652:	f7ff ff9f 	bl	8004594 <UART_WaitOnFlagUntilTimeout>
 8004656:	b9a0      	cbnz	r0, 8004682 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8004658:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800465a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800465c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8004660:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004664:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 8004668:	e00c      	b.n	8004684 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800466a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	4632      	mov	r2, r6
 8004672:	4603      	mov	r3, r0
 8004674:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004678:	4620      	mov	r0, r4
 800467a:	f7ff ff8b 	bl	8004594 <UART_WaitOnFlagUntilTimeout>
 800467e:	2800      	cmp	r0, #0
 8004680:	d0db      	beq.n	800463a <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8004682:	2003      	movs	r0, #3
}
 8004684:	b002      	add	sp, #8
 8004686:	bd70      	pop	{r4, r5, r6, pc}

08004688 <HAL_UART_Init>:
{
 8004688:	b510      	push	{r4, lr}
  if (huart == NULL)
 800468a:	4604      	mov	r4, r0
 800468c:	b350      	cbz	r0, 80046e4 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 800468e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8004692:	b91b      	cbnz	r3, 800469c <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8004694:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8004698:	f7fc ff1a 	bl	80014d0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800469c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800469e:	2324      	movs	r3, #36	; 0x24
 80046a0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 80046a4:	6813      	ldr	r3, [r2, #0]
 80046a6:	f023 0301 	bic.w	r3, r3, #1
 80046aa:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046ac:	4620      	mov	r0, r4
 80046ae:	f7ff fac3 	bl	8003c38 <UART_SetConfig>
 80046b2:	2801      	cmp	r0, #1
 80046b4:	d016      	beq.n	80046e4 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80046b8:	b113      	cbz	r3, 80046c0 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 80046ba:	4620      	mov	r0, r4
 80046bc:	f7ff ff16 	bl	80044ec <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046d0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80046d8:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80046da:	601a      	str	r2, [r3, #0]
}
 80046dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80046e0:	f7ff bf9f 	b.w	8004622 <UART_CheckIdleState>
}
 80046e4:	2001      	movs	r0, #1
 80046e6:	bd10      	pop	{r4, pc}

080046e8 <UARTEx_SetNbDataToProcess>:
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80046e8:	4a18      	ldr	r2, [pc, #96]	; (800474c <UARTEx_SetNbDataToProcess+0x64>)
{
 80046ea:	b084      	sub	sp, #16
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80046ec:	f240 1307 	movw	r3, #263	; 0x107
 80046f0:	e9cd 2300 	strd	r2, r3, [sp]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80046f4:	4b16      	ldr	r3, [pc, #88]	; (8004750 <UARTEx_SetNbDataToProcess+0x68>)
 80046f6:	9302      	str	r3, [sp, #8]
 80046f8:	f1a3 2303 	sub.w	r3, r3, #50332416	; 0x3000300
 80046fc:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8004700:	9303      	str	r3, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004702:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004704:	b923      	cbnz	r3, 8004710 <UARTEx_SetNbDataToProcess+0x28>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 8004706:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800470a:	6683      	str	r3, [r0, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800470c:	b004      	add	sp, #16
 800470e:	4770      	bx	lr
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004710:	6802      	ldr	r2, [r0, #0]
 8004712:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004714:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004716:	aa04      	add	r2, sp, #16
 8004718:	eb02 7151 	add.w	r1, r2, r1, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800471c:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004720:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 8004724:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8004728:	00d2      	lsls	r2, r2, #3
 800472a:	fb92 f2f1 	sdiv	r2, r2, r1
 800472e:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004732:	aa04      	add	r2, sp, #16
 8004734:	4413      	add	r3, r2
 8004736:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800473a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800473e:	00d2      	lsls	r2, r2, #3
 8004740:	fb92 f3f3 	sdiv	r3, r2, r3
 8004744:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 8004748:	e7e0      	b.n	800470c <UARTEx_SetNbDataToProcess+0x24>
 800474a:	bf00      	nop
 800474c:	03010101 	.word	0x03010101
 8004750:	04020408 	.word	0x04020408

08004754 <HAL_UARTEx_WakeupCallback>:
}
 8004754:	4770      	bx	lr

08004756 <HAL_UARTEx_RxFifoFullCallback>:
 8004756:	4770      	bx	lr

08004758 <HAL_UARTEx_TxFifoEmptyCallback>:
 8004758:	4770      	bx	lr

0800475a <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800475a:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800475e:	2b01      	cmp	r3, #1
 8004760:	d014      	beq.n	800478c <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004762:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004764:	2324      	movs	r3, #36	; 0x24
 8004766:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800476a:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800476c:	6813      	ldr	r3, [r2, #0]
 800476e:	f023 0301 	bic.w	r3, r3, #1
 8004772:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004774:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004778:	2300      	movs	r3, #0
 800477a:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800477c:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800477e:	2220      	movs	r2, #32
 8004780:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8004784:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 8004788:	4618      	mov	r0, r3
 800478a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800478c:	2002      	movs	r0, #2
}
 800478e:	4770      	bx	lr

08004790 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8004790:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8004792:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004796:	2b01      	cmp	r3, #1
{
 8004798:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800479a:	d01b      	beq.n	80047d4 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 800479c:	2301      	movs	r3, #1
 800479e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80047a2:	2324      	movs	r3, #36	; 0x24
 80047a4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047a8:	6803      	ldr	r3, [r0, #0]
 80047aa:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	f022 0201 	bic.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80047ba:	4311      	orrs	r1, r2
 80047bc:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80047be:	f7ff ff93 	bl	80046e8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047c2:	6803      	ldr	r3, [r0, #0]
 80047c4:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80047c6:	2320      	movs	r3, #32
 80047c8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80047cc:	2000      	movs	r0, #0
 80047ce:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80047d2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80047d4:	2002      	movs	r0, #2
 80047d6:	e7fc      	b.n	80047d2 <HAL_UARTEx_SetTxFifoThreshold+0x42>

080047d8 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80047d8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80047da:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80047de:	2b01      	cmp	r3, #1
{
 80047e0:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80047e2:	d01b      	beq.n	800481c <HAL_UARTEx_SetRxFifoThreshold+0x44>
 80047e4:	2301      	movs	r3, #1
 80047e6:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80047ea:	2324      	movs	r3, #36	; 0x24
 80047ec:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047f0:	6803      	ldr	r3, [r0, #0]
 80047f2:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	f022 0201 	bic.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8004802:	4311      	orrs	r1, r2
 8004804:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004806:	f7ff ff6f 	bl	80046e8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800480a:	6803      	ldr	r3, [r0, #0]
 800480c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800480e:	2320      	movs	r3, #32
 8004810:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8004814:	2000      	movs	r0, #0
 8004816:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800481a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800481c:	2002      	movs	r0, #2
 800481e:	e7fc      	b.n	800481a <HAL_UARTEx_SetRxFifoThreshold+0x42>

08004820 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 8004820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004824:	b0cb      	sub	sp, #300	; 0x12c
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
  tBleStatus status = 0;
 8004826:	f04f 0900 	mov.w	r9, #0
{
 800482a:	f89d 415c 	ldrb.w	r4, [sp, #348]	; 0x15c
 800482e:	9400      	str	r4, [sp, #0]
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8004830:	9d00      	ldr	r5, [sp, #0]
{
 8004832:	f89d 6154 	ldrb.w	r6, [sp, #340]	; 0x154
  int index_input = 0;
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8004836:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800483a:	f105 0709 	add.w	r7, r5, #9
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800483e:	ac0a      	add	r4, sp, #40	; 0x28
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8004840:	4437      	add	r7, r6
 8004842:	19e5      	adds	r5, r4, r7
  index_input += 1;
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8004844:	f8ad 1029 	strh.w	r1, [sp, #41]	; 0x29
  index_input += 2;
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8004848:	f8ad 202b 	strh.w	r2, [sp, #43]	; 0x2b
  index_input += 2;
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800484c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  index_input += 1;
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 8004850:	4632      	mov	r2, r6
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8004852:	f89d 3150 	ldrb.w	r3, [sp, #336]	; 0x150
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 8004856:	9956      	ldr	r1, [sp, #344]	; 0x158
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8004858:	9501      	str	r5, [sp, #4]
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 800485a:	a80c      	add	r0, sp, #48	; 0x30
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800485c:	f106 0a08 	add.w	sl, r6, #8
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8004860:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8004864:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
  tBleStatus status = 0;
 8004868:	f88d 900f 	strb.w	r9, [sp, #15]
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 800486c:	f000 faf0 	bl	8004e50 <Osal_MemCpy>
    index_input += Local_Name_Length;
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8004870:	9b00      	ldr	r3, [sp, #0]
 8004872:	f804 300a 	strb.w	r3, [r4, sl]
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8004876:	eb04 0b0a 	add.w	fp, r4, sl
    }
    index_input += 1;
    Osal_MemCpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length);
 800487a:	461a      	mov	r2, r3
 800487c:	9958      	ldr	r1, [sp, #352]	; 0x160
 800487e:	f10b 0001 	add.w	r0, fp, #1
 8004882:	f000 fae5 	bl	8004e50 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8004886:	9b00      	ldr	r3, [sp, #0]
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
    }
    index_input += 2;
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8004888:	9a01      	ldr	r2, [sp, #4]
    index_input += 1;
 800488a:	3609      	adds	r6, #9
    index_input += Service_Uuid_length;
 800488c:	4433      	add	r3, r6
 800488e:	461d      	mov	r5, r3
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8004890:	f8bd 3164 	ldrh.w	r3, [sp, #356]	; 0x164
 8004894:	53e3      	strh	r3, [r4, r7]
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8004896:	f8bd 3168 	ldrh.w	r3, [sp, #360]	; 0x168
 800489a:	8053      	strh	r3, [r2, #2]
    }
    index_input += 2;
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800489c:	4649      	mov	r1, r9
 800489e:	2218      	movs	r2, #24
 80048a0:	a804      	add	r0, sp, #16
 80048a2:	f000 fad7 	bl	8004e54 <Osal_MemSet>
  rq.ogf = 0x3f;
 80048a6:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <aci_gap_set_discoverable+0xb4>)
 80048a8:	9304      	str	r3, [sp, #16]
  tBleStatus status = 0;
 80048aa:	f10d 080f 	add.w	r8, sp, #15
  rq.ocf = 0x083;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 80048ae:	2301      	movs	r3, #1
    index_input += 2;
 80048b0:	3504      	adds	r5, #4
  if (hci_send_req(&rq, FALSE) < 0)
 80048b2:	4649      	mov	r1, r9
 80048b4:	a804      	add	r0, sp, #16
  rq.cparam = cmd_buffer;
 80048b6:	9406      	str	r4, [sp, #24]
  rq.rparam = &status;
 80048b8:	e9cd 5807 	strd	r5, r8, [sp, #28]
  rq.rlen = 1;
 80048bc:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 80048be:	f000 fa41 	bl	8004d44 <hci_send_req>
 80048c2:	4548      	cmp	r0, r9
    return BLE_STATUS_TIMEOUT;
  if (status) 
 80048c4:	bfac      	ite	ge
 80048c6:	f898 0000 	ldrbge.w	r0, [r8]
    return BLE_STATUS_TIMEOUT;
 80048ca:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 80048cc:	b04b      	add	sp, #300	; 0x12c
 80048ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048d2:	bf00      	nop
 80048d4:	0083003f 	.word	0x0083003f

080048d8 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 80048d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048dc:	b0c8      	sub	sp, #288	; 0x120
 80048de:	4680      	mov	r8, r0
 80048e0:	460f      	mov	r7, r1
 80048e2:	4616      	mov	r6, r2
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 80048e4:	2100      	movs	r1, #0
 80048e6:	2207      	movs	r2, #7
 80048e8:	4668      	mov	r0, sp
{
 80048ea:	461d      	mov	r5, r3
  Osal_MemSet(&resp, 0, sizeof(resp));
 80048ec:	f000 fab2 	bl	8004e54 <Osal_MemSet>
  index_input += 1;
  cp0->privacy_enabled = htob(privacy_enabled, 1);
  index_input += 1;
  cp0->device_name_char_len = htob(device_name_char_len, 1);
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 80048f0:	2218      	movs	r2, #24
 80048f2:	2100      	movs	r1, #0
 80048f4:	a802      	add	r0, sp, #8
  cp0->Role = htob(Role, 1);
 80048f6:	f88d 8020 	strb.w	r8, [sp, #32]
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 80048fa:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 80048fe:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004902:	f000 faa7 	bl	8004e54 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004906:	4b14      	ldr	r3, [pc, #80]	; (8004958 <aci_gap_init+0x80>)
 8004908:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x08a;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800490a:	2303      	movs	r3, #3
 800490c:	9305      	str	r3, [sp, #20]
  cp0->Role = htob(Role, 1);
 800490e:	ac08      	add	r4, sp, #32
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 8004910:	2307      	movs	r3, #7
  if (hci_send_req(&rq, FALSE) < 0)
 8004912:	2100      	movs	r1, #0
 8004914:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004916:	9404      	str	r4, [sp, #16]
  rq.rparam = &resp;
 8004918:	f8cd d018 	str.w	sp, [sp, #24]
  rq.rlen = sizeof(resp);
 800491c:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800491e:	f000 fa11 	bl	8004d44 <hci_send_req>
 8004922:	2800      	cmp	r0, #0
 8004924:	db16      	blt.n	8004954 <aci_gap_init+0x7c>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) 
 8004926:	f89d 0000 	ldrb.w	r0, [sp]
 800492a:	b980      	cbnz	r0, 800494e <aci_gap_init+0x76>
  {
    return resp.Status;
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800492c:	9a00      	ldr	r2, [sp, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800492e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8004932:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8004936:	802a      	strh	r2, [r5, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8004938:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800493c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004940:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 8004942:	8013      	strh	r3, [r2, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8004944:	9b01      	ldr	r3, [sp, #4]
 8004946:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 8004948:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800494c:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 800494e:	b048      	add	sp, #288	; 0x120
 8004950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 8004954:	20ff      	movs	r0, #255	; 0xff
 8004956:	e7fa      	b.n	800494e <aci_gap_init+0x76>
 8004958:	008a003f 	.word	0x008a003f

0800495c <aci_gap_update_adv_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 800495c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800495e:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004960:	2600      	movs	r6, #0
  int index_input = 0;
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 8004962:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 8004966:	4602      	mov	r2, r0
{
 8004968:	4604      	mov	r4, r0
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 800496a:	f10d 0021 	add.w	r0, sp, #33	; 0x21
  tBleStatus status = 0;
 800496e:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 8004972:	f000 fa6d 	bl	8004e50 <Osal_MemCpy>
  index_input += AdvDataLen;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004976:	2218      	movs	r2, #24
 8004978:	4631      	mov	r1, r6
 800497a:	a802      	add	r0, sp, #8
 800497c:	f000 fa6a 	bl	8004e54 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004980:	4b0a      	ldr	r3, [pc, #40]	; (80049ac <aci_gap_update_adv_data+0x50>)
 8004982:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 8004984:	f10d 0507 	add.w	r5, sp, #7
  rq.ocf = 0x08e;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8004988:	2301      	movs	r3, #1
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 800498a:	af08      	add	r7, sp, #32
  index_input += AdvDataLen;
 800498c:	3401      	adds	r4, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800498e:	4631      	mov	r1, r6
 8004990:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004992:	9704      	str	r7, [sp, #16]
  rq.rparam = &status;
 8004994:	e9cd 4505 	strd	r4, r5, [sp, #20]
  rq.rlen = 1;
 8004998:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800499a:	f000 f9d3 	bl	8004d44 <hci_send_req>
 800499e:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 80049a0:	bfac      	ite	ge
 80049a2:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 80049a4:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 80049a6:	b049      	add	sp, #292	; 0x124
 80049a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049aa:	bf00      	nop
 80049ac:	008e003f 	.word	0x008e003f

080049b0 <aci_gap_delete_ad_type>:

tBleStatus aci_gap_delete_ad_type(uint8_t ADType)
{
 80049b0:	b570      	push	{r4, r5, r6, lr}
 80049b2:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_delete_ad_type_cp0 *cp0 = (aci_gap_delete_ad_type_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80049b4:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->ADType = htob(ADType, 1);
 80049b6:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 80049ba:	2218      	movs	r2, #24
 80049bc:	4629      	mov	r1, r5
 80049be:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 80049c0:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 80049c4:	f000 fa46 	bl	8004e54 <Osal_MemSet>
  rq.ogf = 0x3f;
 80049c8:	4b09      	ldr	r3, [pc, #36]	; (80049f0 <aci_gap_delete_ad_type+0x40>)
 80049ca:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 80049cc:	f10d 0407 	add.w	r4, sp, #7
  rq.ocf = 0x08f;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 80049d0:	2301      	movs	r3, #1
  cp0->ADType = htob(ADType, 1);
 80049d2:	ae08      	add	r6, sp, #32
  rq.rparam = &status;
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 80049d4:	4629      	mov	r1, r5
 80049d6:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 80049d8:	9604      	str	r6, [sp, #16]
  rq.rparam = &status;
 80049da:	e9cd 3405 	strd	r3, r4, [sp, #20]
  rq.rlen = 1;
 80049de:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80049e0:	f000 f9b0 	bl	8004d44 <hci_send_req>
 80049e4:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) 
 80049e6:	bfac      	ite	ge
 80049e8:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 80049ea:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 80049ec:	b048      	add	sp, #288	; 0x120
 80049ee:	bd70      	pop	{r4, r5, r6, pc}
 80049f0:	008f003f 	.word	0x008f003f

080049f4 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 80049f4:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 80049f6:	2400      	movs	r4, #0
{
 80049f8:	b088      	sub	sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 80049fa:	2218      	movs	r2, #24
 80049fc:	4621      	mov	r1, r4
 80049fe:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8004a00:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004a04:	f000 fa26 	bl	8004e54 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004a08:	4b08      	ldr	r3, [pc, #32]	; (8004a2c <aci_gatt_init+0x38>)
 8004a0a:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x101;
  rq.rparam = &status;
 8004a0c:	f10d 0307 	add.w	r3, sp, #7
 8004a10:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 8004a12:	4621      	mov	r1, r4
  rq.rlen = 1;
 8004a14:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8004a16:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8004a18:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004a1a:	f000 f993 	bl	8004d44 <hci_send_req>
 8004a1e:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004a20:	bfac      	ite	ge
 8004a22:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8004a26:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004a28:	b008      	add	sp, #32
 8004a2a:	bd10      	pop	{r4, pc}
 8004a2c:	0101003f 	.word	0x0101003f

08004a30 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8004a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a32:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004a34:	2700      	movs	r7, #0
  int index_input = 0;
  cp0->Service_Handle = htob(Service_Handle, 2);
 8004a36:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  cp0->Char_Handle = htob(Char_Handle, 2);
 8004a3a:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  index_input += 2;
  cp0->Val_Offset = htob(Val_Offset, 1);
 8004a3e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  index_input += 1;
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
  index_input += 1;
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 8004a42:	994e      	ldr	r1, [sp, #312]	; 0x138
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8004a44:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 8004a48:	461a      	mov	r2, r3
 8004a4a:	f10d 0026 	add.w	r0, sp, #38	; 0x26
{
 8004a4e:	461c      	mov	r4, r3
  tBleStatus status = 0;
 8004a50:	f88d 7007 	strb.w	r7, [sp, #7]
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 8004a54:	f000 f9fc 	bl	8004e50 <Osal_MemCpy>
  index_input += Char_Value_Length;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004a58:	2218      	movs	r2, #24
 8004a5a:	4639      	mov	r1, r7
 8004a5c:	a802      	add	r0, sp, #8
 8004a5e:	f000 f9f9 	bl	8004e54 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004a62:	4b0a      	ldr	r3, [pc, #40]	; (8004a8c <aci_gatt_update_char_value+0x5c>)
 8004a64:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 8004a66:	f10d 0607 	add.w	r6, sp, #7
  rq.ocf = 0x106;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8004a6a:	2301      	movs	r3, #1
  cp0->Service_Handle = htob(Service_Handle, 2);
 8004a6c:	ad08      	add	r5, sp, #32
  index_input += Char_Value_Length;
 8004a6e:	3406      	adds	r4, #6
  if (hci_send_req(&rq, FALSE) < 0)
 8004a70:	4639      	mov	r1, r7
 8004a72:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004a74:	9504      	str	r5, [sp, #16]
  rq.rparam = &status;
 8004a76:	e9cd 4605 	strd	r4, r6, [sp, #20]
  rq.rlen = 1;
 8004a7a:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004a7c:	f000 f962 	bl	8004d44 <hci_send_req>
 8004a80:	42b8      	cmp	r0, r7
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004a82:	bfac      	ite	ge
 8004a84:	7830      	ldrbge	r0, [r6, #0]
    return BLE_STATUS_TIMEOUT;
 8004a86:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004a88:	b049      	add	sp, #292	; 0x124
 8004a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a8c:	0106003f 	.word	0x0106003f

08004a90 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8004a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a92:	b0c9      	sub	sp, #292	; 0x124
 8004a94:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004a96:	2600      	movs	r6, #0
{
 8004a98:	4611      	mov	r1, r2
  int index_input = 0;
  cp0->Offset = htob(Offset, 1);
 8004a9a:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  cp0->Length = htob(Length, 1);
  index_input += 1;
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 8004a9e:	4622      	mov	r2, r4
 8004aa0:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  cp0->Length = htob(Length, 1);
 8004aa4:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  tBleStatus status = 0;
 8004aa8:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 8004aac:	f000 f9d0 	bl	8004e50 <Osal_MemCpy>
  index_input += Length;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004ab0:	2218      	movs	r2, #24
 8004ab2:	4631      	mov	r1, r6
 8004ab4:	a802      	add	r0, sp, #8
 8004ab6:	f000 f9cd 	bl	8004e54 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004aba:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <aci_hal_write_config_data+0x54>)
 8004abc:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 8004abe:	f10d 0507 	add.w	r5, sp, #7
  rq.ocf = 0x00c;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8004ac2:	2301      	movs	r3, #1
  cp0->Offset = htob(Offset, 1);
 8004ac4:	af08      	add	r7, sp, #32
  index_input += Length;
 8004ac6:	3402      	adds	r4, #2
  if (hci_send_req(&rq, FALSE) < 0)
 8004ac8:	4631      	mov	r1, r6
 8004aca:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004acc:	9704      	str	r7, [sp, #16]
  rq.rparam = &status;
 8004ace:	e9cd 4505 	strd	r4, r5, [sp, #20]
  rq.rlen = 1;
 8004ad2:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004ad4:	f000 f936 	bl	8004d44 <hci_send_req>
 8004ad8:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004ada:	bfac      	ite	ge
 8004adc:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 8004ade:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004ae0:	b049      	add	sp, #292	; 0x124
 8004ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ae4:	000c003f 	.word	0x000c003f

08004ae8 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8004ae8:	b570      	push	{r4, r5, r6, lr}
 8004aea:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004aec:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->En_High_Power = htob(En_High_Power, 1);
 8004aee:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  cp0->PA_Level = htob(PA_Level, 1);
 8004af2:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004af6:	2218      	movs	r2, #24
 8004af8:	4629      	mov	r1, r5
 8004afa:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8004afc:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004b00:	f000 f9a8 	bl	8004e54 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004b04:	4b0a      	ldr	r3, [pc, #40]	; (8004b30 <aci_hal_set_tx_power_level+0x48>)
 8004b06:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 8004b08:	f10d 0407 	add.w	r4, sp, #7
  rq.ocf = 0x00f;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8004b0c:	2302      	movs	r3, #2
  rq.rparam = &status;
 8004b0e:	e9cd 3405 	strd	r3, r4, [sp, #20]
  cp0->En_High_Power = htob(En_High_Power, 1);
 8004b12:	ae08      	add	r6, sp, #32
  rq.rlen = 1;
 8004b14:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8004b16:	4629      	mov	r1, r5
 8004b18:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004b1a:	9604      	str	r6, [sp, #16]
  rq.rlen = 1;
 8004b1c:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004b1e:	f000 f911 	bl	8004d44 <hci_send_req>
 8004b22:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004b24:	bfac      	ite	ge
 8004b26:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 8004b28:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004b2a:	b048      	add	sp, #288	; 0x120
 8004b2c:	bd70      	pop	{r4, r5, r6, pc}
 8004b2e:	bf00      	nop
 8004b30:	000f003f 	.word	0x000f003f

08004b34 <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 8004b34:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 8004b36:	2400      	movs	r4, #0
{
 8004b38:	b088      	sub	sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004b3a:	2218      	movs	r2, #24
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8004b40:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004b44:	f000 f986 	bl	8004e54 <Osal_MemSet>
  rq.ogf = 0x03;
 8004b48:	f04f 1303 	mov.w	r3, #196611	; 0x30003
 8004b4c:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x003;
  rq.rparam = &status;
 8004b4e:	f10d 0307 	add.w	r3, sp, #7
 8004b52:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 8004b54:	4621      	mov	r1, r4
  rq.rlen = 1;
 8004b56:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8004b58:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8004b5a:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004b5c:	f000 f8f2 	bl	8004d44 <hci_send_req>
 8004b60:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004b62:	bfac      	ite	ge
 8004b64:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8004b68:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004b6a:	b008      	add	sp, #32
 8004b6c:	bd10      	pop	{r4, pc}
	...

08004b70 <hci_le_set_scan_response_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 8004b70:	b570      	push	{r4, r5, r6, lr}
 8004b72:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004b74:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 8004b76:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  Osal_MemCpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 8004b7a:	221f      	movs	r2, #31
 8004b7c:	f10d 0021 	add.w	r0, sp, #33	; 0x21
  tBleStatus status = 0;
 8004b80:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemCpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 8004b84:	f000 f964 	bl	8004e50 <Osal_MemCpy>
  index_input += 31;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004b88:	2218      	movs	r2, #24
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	a802      	add	r0, sp, #8
 8004b8e:	f000 f961 	bl	8004e54 <Osal_MemSet>
  rq.ogf = 0x08;
 8004b92:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <hci_le_set_scan_response_data+0x4c>)
 8004b94:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 8004b96:	f10d 0407 	add.w	r4, sp, #7
  rq.ocf = 0x009;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8004b9a:	2320      	movs	r3, #32
  rq.rparam = &status;
 8004b9c:	e9cd 3405 	strd	r3, r4, [sp, #20]
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 8004ba0:	ae08      	add	r6, sp, #32
  rq.rlen = 1;
 8004ba2:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8004ba4:	4629      	mov	r1, r5
 8004ba6:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004ba8:	9604      	str	r6, [sp, #16]
  rq.rlen = 1;
 8004baa:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004bac:	f000 f8ca 	bl	8004d44 <hci_send_req>
 8004bb0:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004bb2:	bfac      	ite	ge
 8004bb4:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 8004bb6:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004bb8:	b048      	add	sp, #288	; 0x120
 8004bba:	bd70      	pop	{r4, r5, r6, pc}
 8004bbc:	00090008 	.word	0x00090008

08004bc0 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8004bc0:	b513      	push	{r0, r1, r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bc2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004bc6:	b672      	cpsid	i

  BACKUP_PRIMASK();

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8004bc8:	480c      	ldr	r0, [pc, #48]	; (8004bfc <DbgTrace_TxCpltCallback+0x3c>)
 8004bca:	f10d 0106 	add.w	r1, sp, #6
 8004bce:	f000 fb74 	bl	80052ba <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8004bd2:	f10d 0106 	add.w	r1, sp, #6
 8004bd6:	4809      	ldr	r0, [pc, #36]	; (8004bfc <DbgTrace_TxCpltCallback+0x3c>)
 8004bd8:	f000 fbd0 	bl	800537c <CircularQueue_Sense>


  if ( buf != NULL) 
 8004bdc:	b140      	cbz	r0, 8004bf0 <DbgTrace_TxCpltCallback+0x30>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bde:	f384 8810 	msr	PRIMASK, r4
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8004be2:	4a07      	ldr	r2, [pc, #28]	; (8004c00 <DbgTrace_TxCpltCallback+0x40>)
 8004be4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8004be8:	f7fb fd68 	bl	80006bc <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8004bec:	b002      	add	sp, #8
 8004bee:	bd10      	pop	{r4, pc}
    DbgTracePeripheralReady = SET;
 8004bf0:	4b04      	ldr	r3, [pc, #16]	; (8004c04 <DbgTrace_TxCpltCallback+0x44>)
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	701a      	strb	r2, [r3, #0]
 8004bf6:	f384 8810 	msr	PRIMASK, r4
}
 8004bfa:	e7f7      	b.n	8004bec <DbgTrace_TxCpltCallback+0x2c>
 8004bfc:	200001bc 	.word	0x200001bc
 8004c00:	08004bc1 	.word	0x08004bc1
 8004c04:	2000002c 	.word	0x2000002c

08004c08 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8004c08:	b507      	push	{r0, r1, r2, lr}
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8004c0a:	f7fb fd55 	bl	80006b8 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8004c0e:	2302      	movs	r3, #2
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c16:	2300      	movs	r3, #0
 8004c18:	4903      	ldr	r1, [pc, #12]	; (8004c28 <DbgTraceInit+0x20>)
 8004c1a:	4804      	ldr	r0, [pc, #16]	; (8004c2c <DbgTraceInit+0x24>)
 8004c1c:	f000 fa34 	bl	8005088 <CircularQueue_Init>
#endif 
#endif
  return;
}
 8004c20:	b003      	add	sp, #12
 8004c22:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c26:	bf00      	nop
 8004c28:	200001dc 	.word	0x200001dc
 8004c2c:	200001bc 	.word	0x200001bc

08004c30 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8004c30:	b570      	push	{r4, r5, r6, lr}
 8004c32:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c34:	f3ef 8510 	mrs	r5, PRIMASK
  uint8_t* buffer;

  BACKUP_PRIMASK();

  /* Ignore flushes */
  if ( handle == -1 )
 8004c38:	1c43      	adds	r3, r0, #1
 8004c3a:	d01b      	beq.n	8004c74 <DbgTraceWrite+0x44>
  {
    chars_written = ( size_t ) 0;
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8004c3c:	3801      	subs	r0, #1
 8004c3e:	2801      	cmp	r0, #1
 8004c40:	d81a      	bhi.n	8004c78 <DbgTraceWrite+0x48>
  {
    chars_written = ( size_t ) - 1;
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8004c42:	b192      	cbz	r2, 8004c6a <DbgTraceWrite+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8004c44:	b672      	cpsid	i
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8004c46:	b296      	uxth	r6, r2
 8004c48:	2301      	movs	r3, #1
 8004c4a:	4632      	mov	r2, r6
 8004c4c:	480c      	ldr	r0, [pc, #48]	; (8004c80 <DbgTraceWrite+0x50>)
 8004c4e:	f000 fa2f 	bl	80050b0 <CircularQueue_Add>
    if (buffer && DbgTracePeripheralReady)
 8004c52:	b160      	cbz	r0, 8004c6e <DbgTraceWrite+0x3e>
 8004c54:	4b0b      	ldr	r3, [pc, #44]	; (8004c84 <DbgTraceWrite+0x54>)
 8004c56:	781a      	ldrb	r2, [r3, #0]
 8004c58:	b14a      	cbz	r2, 8004c6e <DbgTraceWrite+0x3e>
    {
      DbgTracePeripheralReady = RESET;
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c5e:	f385 8810 	msr	PRIMASK, r5
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8004c62:	4a09      	ldr	r2, [pc, #36]	; (8004c88 <DbgTraceWrite+0x58>)
 8004c64:	4631      	mov	r1, r6
 8004c66:	f7fb fd29 	bl	80006bc <DbgOutputTraces>
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
}
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	bd70      	pop	{r4, r5, r6, pc}
 8004c6e:	f385 8810 	msr	PRIMASK, r5
 8004c72:	e7fa      	b.n	8004c6a <DbgTraceWrite+0x3a>
    chars_written = ( size_t ) 0;
 8004c74:	2400      	movs	r4, #0
 8004c76:	e7f8      	b.n	8004c6a <DbgTraceWrite+0x3a>
    chars_written = ( size_t ) - 1;
 8004c78:	f04f 34ff 	mov.w	r4, #4294967295
 8004c7c:	e7f5      	b.n	8004c6a <DbgTraceWrite+0x3a>
 8004c7e:	bf00      	nop
 8004c80:	200001bc 	.word	0x200001bc
 8004c84:	2000002c 	.word	0x2000002c
 8004c88:	08004bc1 	.word	0x08004bc1

08004c8c <_write>:
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8004c8c:	f7ff bfd0 	b.w	8004c30 <DbgTraceWrite>

08004c90 <hci_init>:
static void OutputRspTrace(TL_EvtPacket_t *hcievt);
static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer);

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8004c90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8004c92:	4c0f      	ldr	r4, [pc, #60]	; (8004cd0 <hci_init+0x40>)
 8004c94:	684b      	ldr	r3, [r1, #4]
  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);

  pCmdBuffer = p_cmdbuffer;
 8004c96:	4e0f      	ldr	r6, [pc, #60]	; (8004cd4 <hci_init+0x44>)
  hciContext.UserEvtRx = UserEvtRx;
 8004c98:	6220      	str	r0, [r4, #32]
{
 8004c9a:	460d      	mov	r5, r1
  hci_register_io_bus (&hciContext.io);
 8004c9c:	1d20      	adds	r0, r4, #4
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8004c9e:	6023      	str	r3, [r4, #0]
  hci_register_io_bus (&hciContext.io);
 8004ca0:	f000 f8cc 	bl	8004e3c <hci_register_io_bus>
  LST_init_head (&HciCmdEventQueue);
 8004ca4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8004ca8:	682d      	ldr	r5, [r5, #0]
  LST_init_head (&HciCmdEventQueue);
 8004caa:	f000 f9b1 	bl	8005010 <LST_init_head>
  pCmdBuffer = p_cmdbuffer;
 8004cae:	4630      	mov	r0, r6
 8004cb0:	f840 5b04 	str.w	r5, [r0], #4

  LST_init_head (&HciAsynchEventQueue);
 8004cb4:	f000 f9ac 	bl	8005010 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	7333      	strb	r3, [r6, #12]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8004cbc:	6863      	ldr	r3, [r4, #4]
 8004cbe:	b12b      	cbz	r3, 8004ccc <hci_init+0x3c>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8004cc0:	a804      	add	r0, sp, #16
 8004cc2:	4a05      	ldr	r2, [pc, #20]	; (8004cd8 <hci_init+0x48>)
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8004cc4:	9502      	str	r5, [sp, #8]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8004cc6:	f840 2d10 	str.w	r2, [r0, #-16]!
    hciContext.io.Init(&Conf);
 8004cca:	4798      	blx	r3
}
 8004ccc:	b004      	add	sp, #16
 8004cce:	bd70      	pop	{r4, r5, r6, pc}
 8004cd0:	200011dc 	.word	0x200011dc
 8004cd4:	20000138 	.word	0x20000138
 8004cd8:	08004e09 	.word	0x08004e09

08004cdc <hci_user_evt_proc>:
{
 8004cdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8004cde:	4c16      	ldr	r4, [pc, #88]	; (8004d38 <hci_user_evt_proc+0x5c>)
 8004ce0:	1d20      	adds	r0, r4, #4
 8004ce2:	f000 f998 	bl	8005016 <LST_is_empty>
 8004ce6:	b9c0      	cbnz	r0, 8004d1a <hci_user_evt_proc+0x3e>
 8004ce8:	7b23      	ldrb	r3, [r4, #12]
 8004cea:	b1b3      	cbz	r3, 8004d1a <hci_user_evt_proc+0x3e>
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8004cec:	a901      	add	r1, sp, #4
 8004cee:	1d20      	adds	r0, r4, #4
 8004cf0:	f000 f9be 	bl	8005070 <LST_remove_head>
    if (hciContext.UserEvtRx != NULL)
 8004cf4:	4b11      	ldr	r3, [pc, #68]	; (8004d3c <hci_user_evt_proc+0x60>)
    OutputEvtTrace(phcievtbuffer);
 8004cf6:	9901      	ldr	r1, [sp, #4]
    if (hciContext.UserEvtRx != NULL)
 8004cf8:	6a1a      	ldr	r2, [r3, #32]
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	b132      	cbz	r2, 8004d0c <hci_user_evt_proc+0x30>
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8004cfe:	a804      	add	r0, sp, #16
      UserEvtRxParam.pckt = phcievtbuffer;
 8004d00:	9103      	str	r1, [sp, #12]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8004d02:	f800 3d08 	strb.w	r3, [r0, #-8]!
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8004d06:	4790      	blx	r2
      UserEventFlow = UserEvtRxParam.status;
 8004d08:	f89d 3008 	ldrb.w	r3, [sp, #8]
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8004d0c:	7323      	strb	r3, [r4, #12]
    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8004d0e:	7b23      	ldrb	r3, [r4, #12]
 8004d10:	9901      	ldr	r1, [sp, #4]
 8004d12:	b16b      	cbz	r3, 8004d30 <hci_user_evt_proc+0x54>
      TL_MM_EvtDone( phcievtbuffer );
 8004d14:	4608      	mov	r0, r1
 8004d16:	f000 fcc3 	bl	80056a0 <TL_MM_EvtDone>
  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8004d1a:	4809      	ldr	r0, [pc, #36]	; (8004d40 <hci_user_evt_proc+0x64>)
 8004d1c:	f000 f97b 	bl	8005016 <LST_is_empty>
 8004d20:	b920      	cbnz	r0, 8004d2c <hci_user_evt_proc+0x50>
 8004d22:	7b23      	ldrb	r3, [r4, #12]
 8004d24:	b113      	cbz	r3, 8004d2c <hci_user_evt_proc+0x50>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8004d26:	4806      	ldr	r0, [pc, #24]	; (8004d40 <hci_user_evt_proc+0x64>)
 8004d28:	f7fc fdd4 	bl	80018d4 <hci_notify_asynch_evt>
}
 8004d2c:	b004      	add	sp, #16
 8004d2e:	bd10      	pop	{r4, pc}
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8004d30:	4803      	ldr	r0, [pc, #12]	; (8004d40 <hci_user_evt_proc+0x64>)
 8004d32:	f000 f97a 	bl	800502a <LST_insert_head>
 8004d36:	e7f0      	b.n	8004d1a <hci_user_evt_proc+0x3e>
 8004d38:	20000138 	.word	0x20000138
 8004d3c:	200011dc 	.word	0x200011dc
 8004d40:	2000013c 	.word	0x2000013c

08004d44 <hci_send_req>:
{
 8004d44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
  if(hcicmdstatus == HCI_TL_CmdBusy)
  {
    if(StatusNotCallBackFunction != 0)
 8004d48:	4f2c      	ldr	r7, [pc, #176]	; (8004dfc <hci_send_req+0xb8>)
 8004d4a:	683b      	ldr	r3, [r7, #0]
{
 8004d4c:	4605      	mov	r5, r0
    if(StatusNotCallBackFunction != 0)
 8004d4e:	b10b      	cbz	r3, 8004d54 <hci_send_req+0x10>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8004d50:	2000      	movs	r0, #0
 8004d52:	4798      	blx	r3
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8004d54:	886c      	ldrh	r4, [r5, #2]
 8004d56:	882b      	ldrh	r3, [r5, #0]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8004d58:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8004e04 <hci_send_req+0xc0>
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8004d5c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004d60:	ea44 2483 	orr.w	r4, r4, r3, lsl #10
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8004d64:	4b26      	ldr	r3, [pc, #152]	; (8004e00 <hci_send_req+0xbc>)
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8004d66:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8004d6a:	6818      	ldr	r0, [r3, #0]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8004d6c:	b2a4      	uxth	r4, r4
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8004d6e:	72c2      	strb	r2, [r0, #11]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8004d70:	f8a0 4009 	strh.w	r4, [r0, #9]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	300c      	adds	r0, #12
 8004d78:	f000 fdfa 	bl	8005970 <memcpy>
  hciContext.io.Send(0,0);
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	4608      	mov	r0, r1
 8004d82:	4798      	blx	r3
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8004d84:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8004d88:	f7fc fdab 	bl	80018e2 <hci_cmd_resp_wait>
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8004d8c:	f04f 0800 	mov.w	r8, #0
 8004d90:	4648      	mov	r0, r9
 8004d92:	f000 f940 	bl	8005016 <LST_is_empty>
 8004d96:	b150      	cbz	r0, 8004dae <hci_send_req+0x6a>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8004d98:	f1b8 0f00 	cmp.w	r8, #0
 8004d9c:	d0f2      	beq.n	8004d84 <hci_send_req+0x40>
    }
  }
  else
  {
    if(StatusNotCallBackFunction != 0)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	b10b      	cbz	r3, 8004da6 <hci_send_req+0x62>
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8004da2:	2001      	movs	r0, #1
 8004da4:	4798      	blx	r3
}
 8004da6:	2000      	movs	r0, #0
 8004da8:	b003      	add	sp, #12
 8004daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8004dae:	a901      	add	r1, sp, #4
 8004db0:	4648      	mov	r0, r9
 8004db2:	f000 f95d 	bl	8005070 <LST_remove_head>
      OutputRspTrace(pevtpacket);
 8004db6:	9e01      	ldr	r6, [sp, #4]
      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8004db8:	7a73      	ldrb	r3, [r6, #9]
 8004dba:	2b0f      	cmp	r3, #15
 8004dbc:	d10c      	bne.n	8004dd8 <hci_send_req+0x94>
        if(pcommand_status_event->cmdcode == opcode)
 8004dbe:	f8b6 300d 	ldrh.w	r3, [r6, #13]
 8004dc2:	42a3      	cmp	r3, r4
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8004dc4:	bf02      	ittt	eq
 8004dc6:	692b      	ldreq	r3, [r5, #16]
 8004dc8:	7af2      	ldrbeq	r2, [r6, #11]
 8004dca:	701a      	strbeq	r2, [r3, #0]
        if(pcommand_status_event->numcmd != 0)
 8004dcc:	7b33      	ldrb	r3, [r6, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d0de      	beq.n	8004d90 <hci_send_req+0x4c>
          local_cmd_status = HCI_TL_CmdAvailable;
 8004dd2:	f04f 0801 	mov.w	r8, #1
 8004dd6:	e7db      	b.n	8004d90 <hci_send_req+0x4c>
        if(pcommand_complete_event->cmdcode == opcode)
 8004dd8:	89b3      	ldrh	r3, [r6, #12]
 8004dda:	42a3      	cmp	r3, r4
 8004ddc:	d10c      	bne.n	8004df8 <hci_send_req+0xb4>
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8004dde:	7ab2      	ldrb	r2, [r6, #10]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8004de0:	696b      	ldr	r3, [r5, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8004de2:	6928      	ldr	r0, [r5, #16]
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8004de4:	3a03      	subs	r2, #3
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	429a      	cmp	r2, r3
 8004dea:	bfa8      	it	ge
 8004dec:	461a      	movge	r2, r3
 8004dee:	616a      	str	r2, [r5, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8004df0:	f106 010e 	add.w	r1, r6, #14
 8004df4:	f000 fdbc 	bl	8005970 <memcpy>
        if(pcommand_complete_event->numcmd != 0)
 8004df8:	7af3      	ldrb	r3, [r6, #11]
 8004dfa:	e7e8      	b.n	8004dce <hci_send_req+0x8a>
 8004dfc:	200011dc 	.word	0x200011dc
 8004e00:	20000138 	.word	0x20000138
 8004e04:	20001200 	.word	0x20001200

08004e08 <TlEvtReceived>:

  return;
}

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8004e08:	b508      	push	{r3, lr}
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8004e0a:	7a43      	ldrb	r3, [r0, #9]
 8004e0c:	3b0e      	subs	r3, #14
 8004e0e:	2b01      	cmp	r3, #1
{
 8004e10:	4601      	mov	r1, r0
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8004e12:	d806      	bhi.n	8004e22 <TlEvtReceived+0x1a>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8004e14:	4807      	ldr	r0, [pc, #28]	; (8004e34 <TlEvtReceived+0x2c>)
 8004e16:	f000 f914 	bl	8005042 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	f7fc fd5e 	bl	80018dc <hci_cmd_resp_release>
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
  }

  return;
}
 8004e20:	bd08      	pop	{r3, pc}
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8004e22:	4805      	ldr	r0, [pc, #20]	; (8004e38 <TlEvtReceived+0x30>)
 8004e24:	f000 f90d 	bl	8005042 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8004e28:	4803      	ldr	r0, [pc, #12]	; (8004e38 <TlEvtReceived+0x30>)
}
 8004e2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8004e2e:	f7fc bd51 	b.w	80018d4 <hci_notify_asynch_evt>
 8004e32:	bf00      	nop
 8004e34:	20001200 	.word	0x20001200
 8004e38:	2000013c 	.word	0x2000013c

08004e3c <hci_register_io_bus>:


void hci_register_io_bus(tHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8004e3c:	4b02      	ldr	r3, [pc, #8]	; (8004e48 <hci_register_io_bus+0xc>)
 8004e3e:	6003      	str	r3, [r0, #0]
  fops->Send    = TL_BLE_SendCmd;
 8004e40:	4b02      	ldr	r3, [pc, #8]	; (8004e4c <hci_register_io_bus+0x10>)
 8004e42:	6103      	str	r3, [r0, #16]

  return;
}
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	08005545 	.word	0x08005545
 8004e4c:	08005585 	.word	0x08005585

08004e50 <Osal_MemCpy>:
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
  return memcpy( dest, src, size ); 
 8004e50:	f000 bd8e 	b.w	8005970 <memcpy>

08004e54 <Osal_MemSet>:
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
  return memset( ptr, value, size );
 8004e54:	f000 bd97 	b.w	8005986 <memset>

08004e58 <OTP_Read>:

uint8_t * OTP_Read( uint8_t id )
{
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8004e58:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <OTP_Read+0x18>)

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8004e5a:	4a06      	ldr	r2, [pc, #24]	; (8004e74 <OTP_Read+0x1c>)
 8004e5c:	79d9      	ldrb	r1, [r3, #7]
 8004e5e:	4281      	cmp	r1, r0
 8004e60:	d002      	beq.n	8004e68 <OTP_Read+0x10>
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d102      	bne.n	8004e6c <OTP_Read+0x14>
    p_id -= 8 ;
  }

  if((*( p_id + 7 )) != id)
  {
    p_id = 0 ;
 8004e66:	2300      	movs	r3, #0
  }

  return p_id ;
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	4770      	bx	lr
    p_id -= 8 ;
 8004e6c:	3b08      	subs	r3, #8
 8004e6e:	e7f5      	b.n	8004e5c <OTP_Read+0x4>
 8004e70:	1fff73f8 	.word	0x1fff73f8
 8004e74:	1fff7000 	.word	0x1fff7000

08004e78 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8004e78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8004e7a:	f100 020c 	add.w	r2, r0, #12
 8004e7e:	466b      	mov	r3, sp
 8004e80:	2121      	movs	r1, #33	; 0x21
 8004e82:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8004e86:	f000 f885 	bl	8004f94 <shci_send>
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 8004e8a:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8004e8e:	b005      	add	sp, #20
 8004e90:	f85d fb04 	ldr.w	pc, [sp], #4

08004e94 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8004e94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8004e96:	f100 020c 	add.w	r2, r0, #12
 8004e9a:	466b      	mov	r3, sp
 8004e9c:	210f      	movs	r1, #15
 8004e9e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8004ea2:	f000 f877 	bl	8004f94 <shci_send>
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 8004ea6:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8004eaa:	b005      	add	sp, #20
 8004eac:	f85d fb04 	ldr.w	pc, [sp], #4

08004eb0 <TlUserEvtReceived>:

  return;
}

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8004eb0:	b510      	push	{r4, lr}
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8004eb2:	4c05      	ldr	r4, [pc, #20]	; (8004ec8 <TlUserEvtReceived+0x18>)
 8004eb4:	4601      	mov	r1, r0
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	f000 f8c3 	bl	8005042 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8004ebc:	4620      	mov	r0, r4

  return;
}
 8004ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8004ec2:	f7fb bc62 	b.w	800078a <shci_notify_asynch_evt>
 8004ec6:	bf00      	nop
 8004ec8:	2000016c 	.word	0x2000016c

08004ecc <Cmd_SetStatus.constprop.4>:
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8004ecc:	4b03      	ldr	r3, [pc, #12]	; (8004edc <Cmd_SetStatus.constprop.4+0x10>)
 8004ece:	2001      	movs	r0, #1
 8004ed0:	7218      	strb	r0, [r3, #8]
    if(StatusNotCallBackFunction != 0)
 8004ed2:	4b03      	ldr	r3, [pc, #12]	; (8004ee0 <Cmd_SetStatus.constprop.4+0x14>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	b103      	cbz	r3, 8004eda <Cmd_SetStatus.constprop.4+0xe>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8004ed8:	4718      	bx	r3
}
 8004eda:	4770      	bx	lr
 8004edc:	2000016c 	.word	0x2000016c
 8004ee0:	2000120c 	.word	0x2000120c

08004ee4 <shci_init>:
{
 8004ee4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8004ee6:	4c0e      	ldr	r4, [pc, #56]	; (8004f20 <shci_init+0x3c>)
 8004ee8:	684b      	ldr	r3, [r1, #4]
  shciContext.UserEvtRx = UserEvtRx;
 8004eea:	6220      	str	r0, [r4, #32]
{
 8004eec:	460d      	mov	r5, r1
  shci_register_io_bus (&shciContext.io);
 8004eee:	1d20      	adds	r0, r4, #4
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8004ef0:	6023      	str	r3, [r4, #0]
  shci_register_io_bus (&shciContext.io);
 8004ef2:	f000 f883 	bl	8004ffc <shci_register_io_bus>
  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8004ef6:	682e      	ldr	r6, [r5, #0]
  pCmdBuffer = p_cmdbuffer;
 8004ef8:	4d0a      	ldr	r5, [pc, #40]	; (8004f24 <shci_init+0x40>)
  LST_init_head (&SHciAsynchEventQueue);
 8004efa:	4628      	mov	r0, r5
  pCmdBuffer = p_cmdbuffer;
 8004efc:	60ee      	str	r6, [r5, #12]
  LST_init_head (&SHciAsynchEventQueue);
 8004efe:	f000 f887 	bl	8005010 <LST_init_head>
  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8004f02:	f7ff ffe3 	bl	8004ecc <Cmd_SetStatus.constprop.4>
  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8004f06:	2301      	movs	r3, #1
 8004f08:	742b      	strb	r3, [r5, #16]
  if (shciContext.io.Init)
 8004f0a:	6863      	ldr	r3, [r4, #4]
 8004f0c:	b133      	cbz	r3, 8004f1c <shci_init+0x38>
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8004f0e:	4a06      	ldr	r2, [pc, #24]	; (8004f28 <shci_init+0x44>)
 8004f10:	9201      	str	r2, [sp, #4]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8004f12:	4a06      	ldr	r2, [pc, #24]	; (8004f2c <shci_init+0x48>)
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8004f14:	9603      	str	r6, [sp, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8004f16:	9202      	str	r2, [sp, #8]
    shciContext.io.Init(&Conf);
 8004f18:	a801      	add	r0, sp, #4
 8004f1a:	4798      	blx	r3
}
 8004f1c:	b004      	add	sp, #16
 8004f1e:	bd70      	pop	{r4, r5, r6, pc}
 8004f20:	2000120c 	.word	0x2000120c
 8004f24:	2000016c 	.word	0x2000016c
 8004f28:	08004ff1 	.word	0x08004ff1
 8004f2c:	08004eb1 	.word	0x08004eb1

08004f30 <shci_user_evt_proc>:
{
 8004f30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8004f32:	4c16      	ldr	r4, [pc, #88]	; (8004f8c <shci_user_evt_proc+0x5c>)
 8004f34:	4620      	mov	r0, r4
 8004f36:	f000 f86e 	bl	8005016 <LST_is_empty>
 8004f3a:	b9c0      	cbnz	r0, 8004f6e <shci_user_evt_proc+0x3e>
 8004f3c:	7c23      	ldrb	r3, [r4, #16]
 8004f3e:	b1b3      	cbz	r3, 8004f6e <shci_user_evt_proc+0x3e>
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8004f40:	a901      	add	r1, sp, #4
 8004f42:	4620      	mov	r0, r4
 8004f44:	f000 f894 	bl	8005070 <LST_remove_head>
    if (shciContext.UserEvtRx != NULL)
 8004f48:	4b11      	ldr	r3, [pc, #68]	; (8004f90 <shci_user_evt_proc+0x60>)
    OutputEvtTrace(phcievtbuffer);
 8004f4a:	9901      	ldr	r1, [sp, #4]
    if (shciContext.UserEvtRx != NULL)
 8004f4c:	6a1a      	ldr	r2, [r3, #32]
 8004f4e:	2301      	movs	r3, #1
 8004f50:	b132      	cbz	r2, 8004f60 <shci_user_evt_proc+0x30>
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8004f52:	a804      	add	r0, sp, #16
      UserEvtRxParam.pckt = phcievtbuffer;
 8004f54:	9103      	str	r1, [sp, #12]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8004f56:	f800 3d08 	strb.w	r3, [r0, #-8]!
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8004f5a:	4790      	blx	r2
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8004f5c:	f89d 3008 	ldrb.w	r3, [sp, #8]
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8004f60:	7423      	strb	r3, [r4, #16]
    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8004f62:	7c23      	ldrb	r3, [r4, #16]
 8004f64:	9901      	ldr	r1, [sp, #4]
 8004f66:	b16b      	cbz	r3, 8004f84 <shci_user_evt_proc+0x54>
      TL_MM_EvtDone( phcievtbuffer );
 8004f68:	4608      	mov	r0, r1
 8004f6a:	f000 fb99 	bl	80056a0 <TL_MM_EvtDone>
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8004f6e:	4807      	ldr	r0, [pc, #28]	; (8004f8c <shci_user_evt_proc+0x5c>)
 8004f70:	f000 f851 	bl	8005016 <LST_is_empty>
 8004f74:	b920      	cbnz	r0, 8004f80 <shci_user_evt_proc+0x50>
 8004f76:	7c23      	ldrb	r3, [r4, #16]
 8004f78:	b113      	cbz	r3, 8004f80 <shci_user_evt_proc+0x50>
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8004f7a:	4804      	ldr	r0, [pc, #16]	; (8004f8c <shci_user_evt_proc+0x5c>)
 8004f7c:	f7fb fc05 	bl	800078a <shci_notify_asynch_evt>
}
 8004f80:	b004      	add	sp, #16
 8004f82:	bd10      	pop	{r4, pc}
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8004f84:	4801      	ldr	r0, [pc, #4]	; (8004f8c <shci_user_evt_proc+0x5c>)
 8004f86:	f000 f850 	bl	800502a <LST_insert_head>
 8004f8a:	e7f0      	b.n	8004f6e <shci_user_evt_proc+0x3e>
 8004f8c:	2000016c 	.word	0x2000016c
 8004f90:	2000120c 	.word	0x2000120c

08004f94 <shci_send>:
{
 8004f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(StatusNotCallBackFunction != 0)
 8004f98:	4c13      	ldr	r4, [pc, #76]	; (8004fe8 <shci_send+0x54>)
{
 8004f9a:	4698      	mov	r8, r3
    if(StatusNotCallBackFunction != 0)
 8004f9c:	6823      	ldr	r3, [r4, #0]
{
 8004f9e:	4681      	mov	r9, r0
 8004fa0:	460f      	mov	r7, r1
 8004fa2:	4692      	mov	sl, r2
    if(StatusNotCallBackFunction != 0)
 8004fa4:	b10b      	cbz	r3, 8004faa <shci_send+0x16>
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	4798      	blx	r3
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8004faa:	4d10      	ldr	r5, [pc, #64]	; (8004fec <shci_send+0x58>)
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8004fac:	68e8      	ldr	r0, [r5, #12]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8004fae:	463a      	mov	r2, r7
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8004fb0:	2600      	movs	r6, #0
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8004fb2:	f8a0 9009 	strh.w	r9, [r0, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8004fb6:	72c7      	strb	r7, [r0, #11]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8004fb8:	4651      	mov	r1, sl
 8004fba:	300c      	adds	r0, #12
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8004fbc:	722e      	strb	r6, [r5, #8]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8004fbe:	f000 fcd7 	bl	8005970 <memcpy>
  shciContext.io.Send(0,0);
 8004fc2:	6963      	ldr	r3, [r4, #20]
 8004fc4:	4631      	mov	r1, r6
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	4798      	blx	r3
  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8004fca:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8004fce:	f7fb fbe3 	bl	8000798 <shci_cmd_resp_wait>
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8004fd2:	68e9      	ldr	r1, [r5, #12]
 8004fd4:	788a      	ldrb	r2, [r1, #2]
 8004fd6:	f108 0008 	add.w	r0, r8, #8
 8004fda:	3203      	adds	r2, #3
 8004fdc:	f000 fcc8 	bl	8005970 <memcpy>
}
 8004fe0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8004fe4:	f7ff bf72 	b.w	8004ecc <Cmd_SetStatus.constprop.4>
 8004fe8:	2000120c 	.word	0x2000120c
 8004fec:	2000016c 	.word	0x2000016c

08004ff0 <TlCmdEvtReceived>:
{
 8004ff0:	b508      	push	{r3, lr}
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	f7fb fbcd 	bl	8000792 <shci_cmd_resp_release>
}
 8004ff8:	bd08      	pop	{r3, pc}
	...

08004ffc <shci_register_io_bus>:


void shci_register_io_bus(tSHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8004ffc:	4b02      	ldr	r3, [pc, #8]	; (8005008 <shci_register_io_bus+0xc>)
 8004ffe:	6003      	str	r3, [r0, #0]
  fops->Send    = TL_SYS_SendCmd;
 8005000:	4b02      	ldr	r3, [pc, #8]	; (800500c <shci_register_io_bus+0x10>)
 8005002:	6103      	str	r3, [r0, #16]

  return;
}
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	080055d5 	.word	0x080055d5
 800500c:	08005609 	.word	0x08005609

08005010 <LST_init_head>:
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
  listHead->next = listHead;
  listHead->prev = listHead;
 8005010:	e9c0 0000 	strd	r0, r0, [r0]
}
 8005014:	4770      	bx	lr

08005016 <LST_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005016:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800501a:	b672      	cpsid	i
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800501c:	6803      	ldr	r3, [r0, #0]
  {
    return_value = TRUE;
 800501e:	1a1b      	subs	r3, r3, r0
 8005020:	4258      	negs	r0, r3
 8005022:	4158      	adcs	r0, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005024:	f382 8810 	msr	PRIMASK, r2
    return_value = FALSE;
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
}
 8005028:	4770      	bx	lr

0800502a <LST_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800502a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800502e:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8005030:	6802      	ldr	r2, [r0, #0]
  node->prev = listHead;
 8005032:	e9c1 2000 	strd	r2, r0, [r1]
  listHead->next = node;
 8005036:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 8005038:	680a      	ldr	r2, [r1, #0]
 800503a:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800503c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005040:	4770      	bx	lr

08005042 <LST_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005042:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005046:	b672      	cpsid	i

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
  node->prev = listHead->prev;
 8005048:	6842      	ldr	r2, [r0, #4]
 800504a:	604a      	str	r2, [r1, #4]
  node->next = listHead;
 800504c:	6008      	str	r0, [r1, #0]
  listHead->prev = node;
 800504e:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8005050:	684a      	ldr	r2, [r1, #4]
 8005052:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005054:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005058:	4770      	bx	lr

0800505a <LST_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800505a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800505e:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8005060:	e9d0 1300 	ldrd	r1, r3, [r0]
 8005064:	6019      	str	r1, [r3, #0]
  (node->next)->prev = node->prev;
 8005066:	6801      	ldr	r1, [r0, #0]
 8005068:	604b      	str	r3, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800506a:	f382 8810 	msr	PRIMASK, r2

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800506e:	4770      	bx	lr

08005070 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8005070:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005072:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005076:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8005078:	6803      	ldr	r3, [r0, #0]
 800507a:	600b      	str	r3, [r1, #0]
  LST_remove_node (listHead->next);
 800507c:	6800      	ldr	r0, [r0, #0]
 800507e:	f7ff ffec 	bl	800505a <LST_remove_node>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005082:	f384 8810 	msr	PRIMASK, r4

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005086:	bd10      	pop	{r4, pc}

08005088 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8005088:	b510      	push	{r4, lr}
 800508a:	f89d 4008 	ldrb.w	r4, [sp, #8]
  q->qBuff = queueBuffer;
 800508e:	6001      	str	r1, [r0, #0]
  q->first = 0;
 8005090:	2100      	movs	r1, #0
  q->last = 0; /* queueSize-1; */
 8005092:	e9c0 1103 	strd	r1, r1, [r0, #12]
  q->byteCount = 0;
  q->elementCount = 0;
 8005096:	e9c0 1105 	strd	r1, r1, [r0, #20]
  q->queueMaxSize = queueSize;
 800509a:	6042      	str	r2, [r0, #4]
  q->elementSize = elementSize;
 800509c:	8103      	strh	r3, [r0, #8]
  q->optionFlags = optionFlags;
 800509e:	7704      	strb	r4, [r0, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 80050a0:	f014 0002 	ands.w	r0, r4, #2
 80050a4:	d003      	beq.n	80050ae <CircularQueue_Init+0x26>
 80050a6:	1a58      	subs	r0, r3, r1
 80050a8:	bf18      	it	ne
 80050aa:	2001      	movne	r0, #1
 80050ac:	4240      	negs	r0, r0
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
  }
  return 0;
}
 80050ae:	bd10      	pop	{r4, pc}

080050b0 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 80050b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80050b4:	8905      	ldrh	r5, [r0, #8]
{
 80050b6:	4604      	mov	r4, r0
 80050b8:	468b      	mov	fp, r1
 80050ba:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 80050be:	b085      	sub	sp, #20
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80050c0:	2d00      	cmp	r5, #0
{
 80050c2:	9302      	str	r3, [sp, #8]
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80050c4:	bf14      	ite	ne
 80050c6:	f04f 0800 	movne.w	r8, #0
 80050ca:	f04f 0802 	moveq.w	r8, #2
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 80050ce:	2900      	cmp	r1, #0
 80050d0:	d033      	beq.n	800513a <CircularQueue_Add+0x8a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 80050d2:	2d00      	cmp	r5, #0
 80050d4:	d134      	bne.n	8005140 <CircularQueue_Add+0x90>
 80050d6:	6866      	ldr	r6, [r4, #4]
 80050d8:	6825      	ldr	r5, [r4, #0]
 80050da:	1c43      	adds	r3, r0, #1
 80050dc:	42b3      	cmp	r3, r6
 80050de:	bf28      	it	cs
 80050e0:	1b9b      	subcs	r3, r3, r6
 80050e2:	5c2f      	ldrb	r7, [r5, r0]
 80050e4:	5ceb      	ldrb	r3, [r5, r3]
 80050e6:	3702      	adds	r7, #2
 80050e8:	eb07 2703 	add.w	r7, r7, r3, lsl #8
 80050ec:	b2bf      	uxth	r7, r7
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 80050ee:	4615      	mov	r5, r2
  {
    elementSize = q->elementSize;
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 80050f0:	68e3      	ldr	r3, [r4, #12]
 80050f2:	4283      	cmp	r3, r0
 80050f4:	bf9e      	ittt	ls
 80050f6:	6863      	ldrls	r3, [r4, #4]
 80050f8:	1a1b      	subls	r3, r3, r0
 80050fa:	1bda      	subls	r2, r3, r7

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 80050fc:	9b02      	ldr	r3, [sp, #8]
 80050fe:	eb05 0008 	add.w	r0, r5, r8
   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8005102:	bf88      	it	hi
 8005104:	2200      	movhi	r2, #0
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8005106:	fb03 f600 	mul.w	r6, r3, r0
 800510a:	4296      	cmp	r6, r2
 800510c:	d31c      	bcc.n	8005148 <CircularQueue_Add+0x98>
 800510e:	fbb2 f3f0 	udiv	r3, r2, r0
 8005112:	fb00 2313 	mls	r3, r0, r3, r2
 8005116:	b2db      	uxtb	r3, r3
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8005118:	4598      	cmp	r8, r3
 800511a:	d215      	bcs.n	8005148 <CircularQueue_Add+0x98>
 800511c:	7f22      	ldrb	r2, [r4, #28]
 800511e:	f012 0f01 	tst.w	r2, #1
 8005122:	bf08      	it	eq
 8005124:	2300      	moveq	r3, #0
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8005126:	0790      	lsls	r0, r2, #30
 8005128:	bf54      	ite	pl
 800512a:	b29b      	uxthpl	r3, r3
 800512c:	fa1f f388 	uxthmi.w	r3, r8
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8005130:	b965      	cbnz	r5, 800514c <CircularQueue_Add+0x9c>
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
  }
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
 8005132:	2000      	movs	r0, #0
  }
  return ptr;
}
 8005134:	b005      	add	sp, #20
 8005136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (q->elementSize > 0)               
 800513a:	b91d      	cbnz	r5, 8005144 <CircularQueue_Add+0x94>
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800513c:	462f      	mov	r7, r5
 800513e:	e7d6      	b.n	80050ee <CircularQueue_Add+0x3e>
 8005140:	462f      	mov	r7, r5
 8005142:	e7d5      	b.n	80050f0 <CircularQueue_Add+0x40>
 8005144:	460f      	mov	r7, r1
 8005146:	e7d3      	b.n	80050f0 <CircularQueue_Add+0x40>
 8005148:	2300      	movs	r3, #0
 800514a:	e7f1      	b.n	8005130 <CircularQueue_Add+0x80>
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800514c:	4431      	add	r1, r6
 800514e:	6862      	ldr	r2, [r4, #4]
 8005150:	440b      	add	r3, r1
 8005152:	4293      	cmp	r3, r2
 8005154:	d8ed      	bhi.n	8005132 <CircularQueue_Add+0x82>
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8005156:	0a2b      	lsrs	r3, r5, #8
 8005158:	9301      	str	r3, [sp, #4]
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800515a:	eb05 0308 	add.w	r3, r5, r8
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800515e:	f04f 0a00 	mov.w	sl, #0
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8005162:	b29b      	uxth	r3, r3
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8005164:	46d1      	mov	r9, sl
    for (i=0; i < nbElements; i++) 
 8005166:	f8cd a000 	str.w	sl, [sp]
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800516a:	9303      	str	r3, [sp, #12]
    for (i=0; i < nbElements; i++) 
 800516c:	9b00      	ldr	r3, [sp, #0]
 800516e:	9902      	ldr	r1, [sp, #8]
 8005170:	6920      	ldr	r0, [r4, #16]
 8005172:	6862      	ldr	r2, [r4, #4]
 8005174:	428b      	cmp	r3, r1
 8005176:	d106      	bne.n	8005186 <CircularQueue_Add+0xd6>
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8005178:	4440      	add	r0, r8
 800517a:	4290      	cmp	r0, r2
 800517c:	6823      	ldr	r3, [r4, #0]
 800517e:	bf28      	it	cs
 8005180:	1a80      	subcs	r0, r0, r2
 8005182:	4418      	add	r0, r3
  return ptr;
 8005184:	e7d6      	b.n	8005134 <CircularQueue_Add+0x84>
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8005186:	4438      	add	r0, r7
 8005188:	4290      	cmp	r0, r2
      if (q->elementSize == 0) 
 800518a:	8923      	ldrh	r3, [r4, #8]
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800518c:	bf28      	it	cs
 800518e:	1a80      	subcs	r0, r0, r2
 8005190:	6120      	str	r0, [r4, #16]
      if (q->elementSize == 0) 
 8005192:	b98b      	cbnz	r3, 80051b8 <CircularQueue_Add+0x108>
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8005194:	6822      	ldr	r2, [r4, #0]
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8005196:	9901      	ldr	r1, [sp, #4]
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8005198:	5415      	strb	r5, [r2, r0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800519a:	6862      	ldr	r2, [r4, #4]
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800519c:	1c43      	adds	r3, r0, #1
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800519e:	429a      	cmp	r2, r3
 80051a0:	bf98      	it	ls
 80051a2:	1a9b      	subls	r3, r3, r2
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 80051a4:	6822      	ldr	r2, [r4, #0]
 80051a6:	54d1      	strb	r1, [r2, r3]
 80051a8:	1c58      	adds	r0, r3, #1
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80051aa:	6863      	ldr	r3, [r4, #4]
 80051ac:	4283      	cmp	r3, r0
 80051ae:	bf98      	it	ls
 80051b0:	1ac0      	subls	r0, r0, r3
        q->byteCount += 2;
 80051b2:	6963      	ldr	r3, [r4, #20]
 80051b4:	3302      	adds	r3, #2
 80051b6:	6163      	str	r3, [r4, #20]
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 80051b8:	6863      	ldr	r3, [r4, #4]
 80051ba:	1a1b      	subs	r3, r3, r0
 80051bc:	429d      	cmp	r5, r3
 80051be:	462e      	mov	r6, r5
 80051c0:	bf28      	it	cs
 80051c2:	461e      	movcs	r6, r3
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 80051c4:	429d      	cmp	r5, r3
 80051c6:	d903      	bls.n	80051d0 <CircularQueue_Add+0x120>
 80051c8:	42b5      	cmp	r5, r6
 80051ca:	7f23      	ldrb	r3, [r4, #28]
 80051cc:	d924      	bls.n	8005218 <CircularQueue_Add+0x168>
 80051ce:	bb0b      	cbnz	r3, 8005214 <CircularQueue_Add+0x164>
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	4632      	mov	r2, r6
 80051d4:	4418      	add	r0, r3
 80051d6:	eb0b 010a 	add.w	r1, fp, sl
 80051da:	f000 fbc9 	bl	8005970 <memcpy>
        q->byteCount += NbBytesToCopy;
 80051de:	6963      	ldr	r3, [r4, #20]
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 80051e0:	9f03      	ldr	r7, [sp, #12]
        q->byteCount += NbBytesToCopy;
 80051e2:	4433      	add	r3, r6
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 80051e4:	46b1      	mov	r9, r6
        q->byteCount += NbBytesToCopy;
 80051e6:	6163      	str	r3, [r4, #20]
        NbBytesToCopy = elementSize - NbBytesToCopy;
 80051e8:	1bae      	subs	r6, r5, r6
        curBuffPosition = 0; 
 80051ea:	2000      	movs	r0, #0
      if (NbBytesToCopy)      
 80051ec:	b156      	cbz	r6, 8005204 <CircularQueue_Add+0x154>
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	eb09 010a 	add.w	r1, r9, sl
 80051f4:	4632      	mov	r2, r6
 80051f6:	4418      	add	r0, r3
 80051f8:	4459      	add	r1, fp
 80051fa:	f000 fbb9 	bl	8005970 <memcpy>
        q->byteCount += NbBytesToCopy;
 80051fe:	6963      	ldr	r3, [r4, #20]
 8005200:	441e      	add	r6, r3
 8005202:	6166      	str	r6, [r4, #20]
      q->elementCount++;
 8005204:	69a3      	ldr	r3, [r4, #24]
 8005206:	3301      	adds	r3, #1
 8005208:	61a3      	str	r3, [r4, #24]
    for (i=0; i < nbElements; i++) 
 800520a:	9b00      	ldr	r3, [sp, #0]
 800520c:	3301      	adds	r3, #1
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	44aa      	add	sl, r5
 8005212:	e7ab      	b.n	800516c <CircularQueue_Add+0xbc>
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8005214:	2e00      	cmp	r6, #0
 8005216:	d0f5      	beq.n	8005204 <CircularQueue_Add+0x154>
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8005218:	07da      	lsls	r2, r3, #31
 800521a:	d521      	bpl.n	8005260 <CircularQueue_Add+0x1b0>
          if (q->elementSize == 0)
 800521c:	8923      	ldrh	r3, [r4, #8]
 800521e:	b943      	cbnz	r3, 8005232 <CircularQueue_Add+0x182>
             q->qBuff[curBuffPosition-2] = 0xFF;
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	4403      	add	r3, r0
 8005224:	22ff      	movs	r2, #255	; 0xff
 8005226:	f803 2c02 	strb.w	r2, [r3, #-2]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	4418      	add	r0, r3
 800522e:	f800 2c01 	strb.w	r2, [r0, #-1]
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8005232:	6963      	ldr	r3, [r4, #20]
          if (q->elementSize == 0)
 8005234:	8922      	ldrh	r2, [r4, #8]
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8005236:	441e      	add	r6, r3
 8005238:	6166      	str	r6, [r4, #20]
          if (q->elementSize == 0)
 800523a:	2a00      	cmp	r2, #0
 800523c:	d138      	bne.n	80052b0 <CircularQueue_Add+0x200>
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800523e:	6823      	ldr	r3, [r4, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8005240:	9901      	ldr	r1, [sp, #4]
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8005242:	701d      	strb	r5, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	7059      	strb	r1, [r3, #1]
            q->byteCount += 2;   
 8005248:	6963      	ldr	r3, [r4, #20]
 800524a:	3302      	adds	r3, #2
 800524c:	6163      	str	r3, [r4, #20]
 800524e:	462e      	mov	r6, r5
          NbCopiedBytes = 0;
 8005250:	4691      	mov	r9, r2
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8005252:	2002      	movs	r0, #2
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8005254:	eb08 0706 	add.w	r7, r8, r6
        q->last = 0;        
 8005258:	2300      	movs	r3, #0
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800525a:	b2bf      	uxth	r7, r7
        q->last = 0;        
 800525c:	6123      	str	r3, [r4, #16]
 800525e:	e7c5      	b.n	80051ec <CircularQueue_Add+0x13c>
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8005260:	079b      	lsls	r3, r3, #30
 8005262:	d5f7      	bpl.n	8005254 <CircularQueue_Add+0x1a4>
          if (q->elementSize == 0)
 8005264:	8923      	ldrh	r3, [r4, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	f47f af63 	bne.w	8005132 <CircularQueue_Add+0x82>
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	4403      	add	r3, r0
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8005270:	0a32      	lsrs	r2, r6, #8
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8005272:	f803 6c02 	strb.w	r6, [r3, #-2]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	4403      	add	r3, r0
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800527a:	eb0b 010a 	add.w	r1, fp, sl
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800527e:	f803 2c01 	strb.w	r2, [r3, #-1]
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	4632      	mov	r2, r6
 8005286:	4418      	add	r0, r3
 8005288:	f000 fb72 	bl	8005970 <memcpy>
             q->elementCount++;
 800528c:	69a2      	ldr	r2, [r4, #24]
             q->byteCount += NbBytesToCopy; 
 800528e:	6963      	ldr	r3, [r4, #20]
             q->elementCount++;
 8005290:	3201      	adds	r2, #1
             q->byteCount += NbBytesToCopy; 
 8005292:	4433      	add	r3, r6
             q->elementCount++;
 8005294:	61a2      	str	r2, [r4, #24]
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8005296:	6822      	ldr	r2, [r4, #0]
             q->byteCount += NbBytesToCopy; 
 8005298:	6163      	str	r3, [r4, #20]
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800529a:	1bab      	subs	r3, r5, r6
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800529c:	7013      	strb	r3, [r2, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800529e:	6822      	ldr	r2, [r4, #0]
 80052a0:	0a19      	lsrs	r1, r3, #8
 80052a2:	7051      	strb	r1, [r2, #1]
             q->byteCount += 2;              
 80052a4:	6962      	ldr	r2, [r4, #20]
 80052a6:	3202      	adds	r2, #2
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 80052a8:	46b1      	mov	r9, r6
             q->byteCount += 2;              
 80052aa:	6162      	str	r2, [r4, #20]
             NbBytesToCopy = elementSize - NbBytesToCopy;
 80052ac:	461e      	mov	r6, r3
 80052ae:	e7d0      	b.n	8005252 <CircularQueue_Add+0x1a2>
          NbCopiedBytes = 0;
 80052b0:	f04f 0900 	mov.w	r9, #0
 80052b4:	462e      	mov	r6, r5
          curBuffPosition = 0; 
 80052b6:	4648      	mov	r0, r9
 80052b8:	e7cc      	b.n	8005254 <CircularQueue_Add+0x1a4>

080052ba <CircularQueue_Remove>:
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
  uint8_t  elemSizeStorageRoom = 0;
  uint8_t* ptr= NULL;
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80052ba:	8902      	ldrh	r2, [r0, #8]
{
 80052bc:	4603      	mov	r3, r0
  *elementSize = 0;
  if (q->byteCount > 0) 
 80052be:	6940      	ldr	r0, [r0, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80052c0:	2a00      	cmp	r2, #0
  *elementSize = 0;
 80052c2:	f04f 0200 	mov.w	r2, #0
{
 80052c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80052c8:	bf14      	ite	ne
 80052ca:	2600      	movne	r6, #0
 80052cc:	2602      	moveq	r6, #2
  *elementSize = 0;
 80052ce:	800a      	strh	r2, [r1, #0]
  if (q->byteCount > 0) 
 80052d0:	2800      	cmp	r0, #0
 80052d2:	d052      	beq.n	800537a <CircularQueue_Remove+0xc0>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80052d4:	891d      	ldrh	r5, [r3, #8]
 80052d6:	681f      	ldr	r7, [r3, #0]
 80052d8:	68dc      	ldr	r4, [r3, #12]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	b95d      	cbnz	r5, 80052f6 <CircularQueue_Remove+0x3c>
 80052de:	f104 0c01 	add.w	ip, r4, #1
 80052e2:	4594      	cmp	ip, r2
 80052e4:	bf28      	it	cs
 80052e6:	ebac 0c02 	subcs.w	ip, ip, r2
 80052ea:	5d3d      	ldrb	r5, [r7, r4]
 80052ec:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80052f0:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 80052f4:	b2ad      	uxth	r5, r5
 80052f6:	800d      	strh	r5, [r1, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80052f8:	f893 c01c 	ldrb.w	ip, [r3, #28]
 80052fc:	f00c 0c03 	and.w	ip, ip, #3
 8005300:	f1bc 0f01 	cmp.w	ip, #1
 8005304:	d120      	bne.n	8005348 <CircularQueue_Remove+0x8e>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 8005306:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800530a:	4565      	cmp	r5, ip
 800530c:	d101      	bne.n	8005312 <CircularQueue_Remove+0x58>
 800530e:	891d      	ldrh	r5, [r3, #8]
 8005310:	b145      	cbz	r5, 8005324 <CircularQueue_Remove+0x6a>
 8005312:	691d      	ldr	r5, [r3, #16]
 8005314:	42a5      	cmp	r5, r4
 8005316:	d217      	bcs.n	8005348 <CircularQueue_Remove+0x8e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8005318:	891d      	ldrh	r5, [r3, #8]
 800531a:	b1ad      	cbz	r5, 8005348 <CircularQueue_Remove+0x8e>
 800531c:	eba2 0c04 	sub.w	ip, r2, r4
 8005320:	45ac      	cmp	ip, r5
 8005322:	d211      	bcs.n	8005348 <CircularQueue_Remove+0x8e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8005324:	4404      	add	r4, r0
 8005326:	1aa4      	subs	r4, r4, r2
 8005328:	615c      	str	r4, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800532a:	891c      	ldrh	r4, [r3, #8]
          q->first = 0;
 800532c:	2000      	movs	r0, #0
 800532e:	60d8      	str	r0, [r3, #12]
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8005330:	b94c      	cbnz	r4, 8005346 <CircularQueue_Remove+0x8c>
 8005332:	2a01      	cmp	r2, #1
 8005334:	bf94      	ite	ls
 8005336:	f1c2 0001 	rsbls	r0, r2, #1
 800533a:	2001      	movhi	r0, #1
 800533c:	783c      	ldrb	r4, [r7, #0]
 800533e:	5c38      	ldrb	r0, [r7, r0]
 8005340:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 8005344:	b2a4      	uxth	r4, r4
 8005346:	800c      	strh	r4, [r1, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8005348:	f8d3 c00c 	ldr.w	ip, [r3, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 800534c:	880c      	ldrh	r4, [r1, #0]
 800534e:	695d      	ldr	r5, [r3, #20]
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8005350:	eb0c 0006 	add.w	r0, ip, r6
 8005354:	4290      	cmp	r0, r2
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8005356:	eb04 0106 	add.w	r1, r4, r6
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800535a:	bf28      	it	cs
 800535c:	1a80      	subcs	r0, r0, r2
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 800535e:	1a6d      	subs	r5, r5, r1
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8005360:	4438      	add	r0, r7
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8005362:	615d      	str	r5, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8005364:	b135      	cbz	r5, 8005374 <CircularQueue_Remove+0xba>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 8005366:	eb04 010c 	add.w	r1, r4, ip
 800536a:	4431      	add	r1, r6
 800536c:	4291      	cmp	r1, r2
 800536e:	bf28      	it	cs
 8005370:	1a89      	subcs	r1, r1, r2
 8005372:	60d9      	str	r1, [r3, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8005374:	699a      	ldr	r2, [r3, #24]
 8005376:	3a01      	subs	r2, #1
 8005378:	619a      	str	r2, [r3, #24]
  }
  return ptr;
}
 800537a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800537c <CircularQueue_Sense>:
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
  uint8_t  elemSizeStorageRoom = 0;
  uint8_t* x= NULL;
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800537c:	8903      	ldrh	r3, [r0, #8]
 800537e:	2b00      	cmp	r3, #0
  *elementSize = 0;
 8005380:	f04f 0300 	mov.w	r3, #0
 8005384:	800b      	strh	r3, [r1, #0]
  uint32_t FirstElemetPos = 0;
    
  if (q->byteCount > 0) 
 8005386:	6943      	ldr	r3, [r0, #20]
{
 8005388:	b5f0      	push	{r4, r5, r6, r7, lr}
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800538a:	bf14      	ite	ne
 800538c:	2500      	movne	r5, #0
 800538e:	2502      	moveq	r5, #2
  if (q->byteCount > 0) 
 8005390:	2b00      	cmp	r3, #0
 8005392:	d035      	beq.n	8005400 <CircularQueue_Sense+0x84>
  {
    FirstElemetPos = q->first;
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8005394:	8902      	ldrh	r2, [r0, #8]
    FirstElemetPos = q->first;
 8005396:	68c6      	ldr	r6, [r0, #12]
 8005398:	e9d0 3400 	ldrd	r3, r4, [r0]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800539c:	b942      	cbnz	r2, 80053b0 <CircularQueue_Sense+0x34>
 800539e:	1c77      	adds	r7, r6, #1
 80053a0:	42a7      	cmp	r7, r4
 80053a2:	bf28      	it	cs
 80053a4:	1b3f      	subcs	r7, r7, r4
 80053a6:	5d9a      	ldrb	r2, [r3, r6]
 80053a8:	5ddf      	ldrb	r7, [r3, r7]
 80053aa:	eb02 2207 	add.w	r2, r2, r7, lsl #8
 80053ae:	b292      	uxth	r2, r2
 80053b0:	800a      	strh	r2, [r1, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80053b2:	7f07      	ldrb	r7, [r0, #28]
 80053b4:	f007 0703 	and.w	r7, r7, #3
 80053b8:	2f01      	cmp	r7, #1
 80053ba:	d11b      	bne.n	80053f4 <CircularQueue_Sense+0x78>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 80053bc:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80053c0:	42ba      	cmp	r2, r7
 80053c2:	d101      	bne.n	80053c8 <CircularQueue_Sense+0x4c>
 80053c4:	8902      	ldrh	r2, [r0, #8]
 80053c6:	b13a      	cbz	r2, 80053d8 <CircularQueue_Sense+0x5c>
 80053c8:	6902      	ldr	r2, [r0, #16]
 80053ca:	42b2      	cmp	r2, r6
 80053cc:	d212      	bcs.n	80053f4 <CircularQueue_Sense+0x78>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80053ce:	8902      	ldrh	r2, [r0, #8]
 80053d0:	b182      	cbz	r2, 80053f4 <CircularQueue_Sense+0x78>
 80053d2:	1ba7      	subs	r7, r4, r6
 80053d4:	4297      	cmp	r7, r2
 80053d6:	d20d      	bcs.n	80053f4 <CircularQueue_Sense+0x78>
      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 80053d8:	8902      	ldrh	r2, [r0, #8]
 80053da:	b94a      	cbnz	r2, 80053f0 <CircularQueue_Sense+0x74>
 80053dc:	2c01      	cmp	r4, #1
 80053de:	bf94      	ite	ls
 80053e0:	f1c4 0001 	rsbls	r0, r4, #1
 80053e4:	2001      	movhi	r0, #1
 80053e6:	781a      	ldrb	r2, [r3, #0]
 80053e8:	5c18      	ldrb	r0, [r3, r0]
 80053ea:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 80053ee:	b292      	uxth	r2, r2
 80053f0:	800a      	strh	r2, [r1, #0]
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 80053f2:	2600      	movs	r6, #0
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 80053f4:	19a8      	adds	r0, r5, r6
 80053f6:	42a0      	cmp	r0, r4
 80053f8:	bf28      	it	cs
 80053fa:	1b00      	subcs	r0, r0, r4
 80053fc:	4418      	add	r0, r3
  }
  return x;
}
 80053fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t* x= NULL;
 8005400:	4618      	mov	r0, r3
  return x;
 8005402:	e7fc      	b.n	80053fe <CircularQueue_Sense+0x82>

08005404 <BLS_Init>:
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
  return;
}
 8005404:	4770      	bx	lr

08005406 <CRS_STM_Init>:
 8005406:	4770      	bx	lr

08005408 <DIS_Init>:
 8005408:	4770      	bx	lr

0800540a <EDS_STM_Init>:
 800540a:	4770      	bx	lr

0800540c <HIDS_Init>:
 800540c:	4770      	bx	lr

0800540e <HRS_Init>:
 800540e:	4770      	bx	lr

08005410 <HTS_Init>:
 8005410:	4770      	bx	lr

08005412 <IAS_Init>:
 8005412:	4770      	bx	lr

08005414 <LLS_Init>:
 8005414:	4770      	bx	lr

08005416 <TPS_Init>:
 8005416:	4770      	bx	lr

08005418 <MOTENV_STM_Init>:
 8005418:	4770      	bx	lr

0800541a <P2PS_STM_Init>:
 800541a:	4770      	bx	lr

0800541c <OTAS_STM_Init>:
 800541c:	4770      	bx	lr

0800541e <MESH_Init>:
 800541e:	4770      	bx	lr

08005420 <BVOPUS_STM_Init>:
 8005420:	4770      	bx	lr

08005422 <SVCCTL_InitCustomSvc>:
 8005422:	4770      	bx	lr

08005424 <SVCCTL_SvcInit>:

  return;
}

__weak void SVCCTL_SvcInit(void)
{
 8005424:	b508      	push	{r3, lr}
  BLS_Init();
 8005426:	f7ff ffed 	bl	8005404 <BLS_Init>

  CRS_STM_Init();
 800542a:	f7ff ffec 	bl	8005406 <CRS_STM_Init>

  DIS_Init();
 800542e:	f7ff ffeb 	bl	8005408 <DIS_Init>

  EDS_STM_Init();
 8005432:	f7ff ffea 	bl	800540a <EDS_STM_Init>

  HIDS_Init();
 8005436:	f7ff ffe9 	bl	800540c <HIDS_Init>

  HRS_Init();
 800543a:	f7ff ffe8 	bl	800540e <HRS_Init>

  HTS_Init();
 800543e:	f7ff ffe7 	bl	8005410 <HTS_Init>

  IAS_Init();
 8005442:	f7ff ffe6 	bl	8005412 <IAS_Init>

  LLS_Init();
 8005446:	f7ff ffe5 	bl	8005414 <LLS_Init>

  TPS_Init();
 800544a:	f7ff ffe4 	bl	8005416 <TPS_Init>

  MOTENV_STM_Init();
 800544e:	f7ff ffe3 	bl	8005418 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8005452:	f7ff ffe2 	bl	800541a <P2PS_STM_Init>

  OTAS_STM_Init();
 8005456:	f7ff ffe1 	bl	800541c <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800545a:	f7ff ffe1 	bl	8005420 <BVOPUS_STM_Init>

  MESH_Init();
 800545e:	f7ff ffde 	bl	800541e <MESH_Init>

  SVCCTL_InitCustomSvc();
 8005462:	f7ff ffde 	bl	8005422 <SVCCTL_InitCustomSvc>
  
  return;
}
 8005466:	bd08      	pop	{r3, pc}

08005468 <SVCCTL_Init>:
{
 8005468:	b508      	push	{r3, lr}
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800546a:	4b04      	ldr	r3, [pc, #16]	; (800547c <SVCCTL_Init+0x14>)
 800546c:	2200      	movs	r2, #0
 800546e:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8005470:	f883 2020 	strb.w	r2, [r3, #32]
  SVCCTL_SvcInit();
 8005474:	f7ff ffd6 	bl	8005424 <SVCCTL_SvcInit>
}
 8005478:	bd08      	pop	{r3, pc}
 800547a:	bf00      	nop
 800547c:	20000148 	.word	0x20000148

08005480 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8005480:	b570      	push	{r4, r5, r6, lr}
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
  event_notification_status = SVCCTL_EvtNotAck;

  switch (event_pckt->evt)
 8005482:	7843      	ldrb	r3, [r0, #1]
 8005484:	2bff      	cmp	r3, #255	; 0xff
{
 8005486:	4604      	mov	r4, r0
  switch (event_pckt->evt)
 8005488:	d106      	bne.n	8005498 <SVCCTL_UserEvtRx+0x18>
  {
    case EVT_VENDOR:
    {
      blue_evt = (evt_blue_aci*) event_pckt->data;

      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800548a:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 800548e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005492:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005496:	d004      	beq.n	80054a2 <SVCCTL_UserEvtRx+0x22>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8005498:	4620      	mov	r0, r4
      return_status = SVCCTL_UserEvtFlowEnable;
      break;
  }

  return (return_status);
}
 800549a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return_status = SVCCTL_App_Notification(pckt);
 800549e:	f7fc ba17 	b.w	80018d0 <SVCCTL_App_Notification>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80054a2:	4e08      	ldr	r6, [pc, #32]	; (80054c4 <SVCCTL_UserEvtRx+0x44>)
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80054a4:	2500      	movs	r5, #0
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80054a6:	7f32      	ldrb	r2, [r6, #28]
 80054a8:	b2eb      	uxtb	r3, r5
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d9f4      	bls.n	8005498 <SVCCTL_UserEvtRx+0x18>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80054ae:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80054b2:	4620      	mov	r0, r4
 80054b4:	4798      	blx	r3
 80054b6:	3501      	adds	r5, #1
            if (event_notification_status != SVCCTL_EvtNotAck)
 80054b8:	2800      	cmp	r0, #0
 80054ba:	d0f4      	beq.n	80054a6 <SVCCTL_UserEvtRx+0x26>
      return_status = SVCCTL_UserEvtFlowEnable;
 80054bc:	3802      	subs	r0, #2
 80054be:	bf18      	it	ne
 80054c0:	2001      	movne	r0, #1
}
 80054c2:	bd70      	pop	{r4, r5, r6, pc}
 80054c4:	20000148 	.word	0x20000148

080054c8 <SendFreeBuf>:

  return;
}

static void SendFreeBuf( void )
{
 80054c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80054ca:	4c09      	ldr	r4, [pc, #36]	; (80054f0 <SendFreeBuf+0x28>)
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80054cc:	4d09      	ldr	r5, [pc, #36]	; (80054f4 <SendFreeBuf+0x2c>)
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80054ce:	4808      	ldr	r0, [pc, #32]	; (80054f0 <SendFreeBuf+0x28>)
 80054d0:	f7ff fda1 	bl	8005016 <LST_is_empty>
 80054d4:	b108      	cbz	r0, 80054da <SendFreeBuf+0x12>
  }

  return;
}
 80054d6:	b003      	add	sp, #12
 80054d8:	bd30      	pop	{r4, r5, pc}
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80054da:	a901      	add	r1, sp, #4
 80054dc:	4620      	mov	r0, r4
 80054de:	f7ff fdc7 	bl	8005070 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80054e2:	692b      	ldr	r3, [r5, #16]
 80054e4:	9901      	ldr	r1, [sp, #4]
 80054e6:	6918      	ldr	r0, [r3, #16]
 80054e8:	f7ff fdab 	bl	8005042 <LST_insert_tail>
 80054ec:	e7ef      	b.n	80054ce <SendFreeBuf+0x6>
 80054ee:	bf00      	nop
 80054f0:	20001234 	.word	0x20001234
 80054f4:	20030000 	.word	0x20030000

080054f8 <TL_Enable>:
  HW_IPCC_Enable();
 80054f8:	f7fc ba52 	b.w	80019a0 <HW_IPCC_Enable>

080054fc <TL_Init>:
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80054fc:	4b0f      	ldr	r3, [pc, #60]	; (800553c <TL_Init+0x40>)
 80054fe:	4a10      	ldr	r2, [pc, #64]	; (8005540 <TL_Init+0x44>)
  TL_RefTable.p_ble_table = &TL_BleTable;
 8005500:	f103 0120 	add.w	r1, r3, #32
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8005504:	6013      	str	r3, [r2, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8005506:	6051      	str	r1, [r2, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8005508:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800550c:	6091      	str	r1, [r2, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800550e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005512:	6211      	str	r1, [r2, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 8005514:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8005518:	6251      	str	r1, [r2, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800551a:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 800551e:	60d1      	str	r1, [r2, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8005520:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8005524:	6111      	str	r1, [r2, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8005526:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800552a:	6151      	str	r1, [r2, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800552c:	f103 0174 	add.w	r1, r3, #116	; 0x74
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8005530:	3380      	adds	r3, #128	; 0x80
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8005532:	6191      	str	r1, [r2, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8005534:	61d3      	str	r3, [r2, #28]
  HW_IPCC_Init();
 8005536:	f7fc ba4b 	b.w	80019d0 <HW_IPCC_Init>
 800553a:	bf00      	nop
 800553c:	20030134 	.word	0x20030134
 8005540:	20030000 	.word	0x20030000

08005544 <TL_BLE_Init>:
{
 8005544:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&EvtQueue);
 8005546:	4d0c      	ldr	r5, [pc, #48]	; (8005578 <TL_BLE_Init+0x34>)
{
 8005548:	4604      	mov	r4, r0
  LST_init_head (&EvtQueue);
 800554a:	4628      	mov	r0, r5
 800554c:	f7ff fd60 	bl	8005010 <LST_init_head>
  p_bletable = TL_RefTable.p_ble_table;
 8005550:	4b0a      	ldr	r3, [pc, #40]	; (800557c <TL_BLE_Init+0x38>)
  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005552:	68a2      	ldr	r2, [r4, #8]
  p_bletable = TL_RefTable.p_ble_table;
 8005554:	685b      	ldr	r3, [r3, #4]
  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005556:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8005558:	68e2      	ldr	r2, [r4, #12]
 800555a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800555c:	f105 0208 	add.w	r2, r5, #8
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8005560:	e9c3 2501 	strd	r2, r5, [r3, #4]
  HW_IPCC_BLE_Init();
 8005564:	f7fc fa54 	bl	8001a10 <HW_IPCC_BLE_Init>
  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8005568:	4b05      	ldr	r3, [pc, #20]	; (8005580 <TL_BLE_Init+0x3c>)
 800556a:	6822      	ldr	r2, [r4, #0]
 800556c:	609a      	str	r2, [r3, #8]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800556e:	6862      	ldr	r2, [r4, #4]
 8005570:	60da      	str	r2, [r3, #12]
}
 8005572:	2000      	movs	r0, #0
 8005574:	bd38      	pop	{r3, r4, r5, pc}
 8005576:	bf00      	nop
 8005578:	20030a38 	.word	0x20030a38
 800557c:	20030000 	.word	0x20030000
 8005580:	20001234 	.word	0x20001234

08005584 <TL_BLE_SendCmd>:
{
 8005584:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8005586:	4b04      	ldr	r3, [pc, #16]	; (8005598 <TL_BLE_SendCmd+0x14>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2201      	movs	r2, #1
 800558e:	721a      	strb	r2, [r3, #8]
  HW_IPCC_BLE_SendCmd();
 8005590:	f7fc fa46 	bl	8001a20 <HW_IPCC_BLE_SendCmd>
}
 8005594:	2000      	movs	r0, #0
 8005596:	bd08      	pop	{r3, pc}
 8005598:	20030000 	.word	0x20030000

0800559c <HW_IPCC_BLE_RxEvtNot>:
{
 800559c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  while(LST_is_empty(&EvtQueue) == FALSE)
 800559e:	4c08      	ldr	r4, [pc, #32]	; (80055c0 <HW_IPCC_BLE_RxEvtNot+0x24>)
    BLE_IoBusEvtCallBackFunction(phcievt);
 80055a0:	4d08      	ldr	r5, [pc, #32]	; (80055c4 <HW_IPCC_BLE_RxEvtNot+0x28>)
  while(LST_is_empty(&EvtQueue) == FALSE)
 80055a2:	4807      	ldr	r0, [pc, #28]	; (80055c0 <HW_IPCC_BLE_RxEvtNot+0x24>)
 80055a4:	f7ff fd37 	bl	8005016 <LST_is_empty>
 80055a8:	b108      	cbz	r0, 80055ae <HW_IPCC_BLE_RxEvtNot+0x12>
}
 80055aa:	b003      	add	sp, #12
 80055ac:	bd30      	pop	{r4, r5, pc}
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80055ae:	4620      	mov	r0, r4
 80055b0:	a901      	add	r1, sp, #4
 80055b2:	f7ff fd5d 	bl	8005070 <LST_remove_head>
    BLE_IoBusEvtCallBackFunction(phcievt);
 80055b6:	68ab      	ldr	r3, [r5, #8]
 80055b8:	9801      	ldr	r0, [sp, #4]
 80055ba:	4798      	blx	r3
 80055bc:	e7f1      	b.n	80055a2 <HW_IPCC_BLE_RxEvtNot+0x6>
 80055be:	bf00      	nop
 80055c0:	20030a38 	.word	0x20030a38
 80055c4:	20001234 	.word	0x20001234

080055c8 <HW_IPCC_BLE_AclDataAckNot>:
  BLE_IoBusAclDataTxAck( );
 80055c8:	4b01      	ldr	r3, [pc, #4]	; (80055d0 <HW_IPCC_BLE_AclDataAckNot+0x8>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	4718      	bx	r3
 80055ce:	bf00      	nop
 80055d0:	20001234 	.word	0x20001234

080055d4 <TL_SYS_Init>:
{
 80055d4:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&SystemEvtQueue);
 80055d6:	4d09      	ldr	r5, [pc, #36]	; (80055fc <TL_SYS_Init+0x28>)
{
 80055d8:	4604      	mov	r4, r0
  LST_init_head (&SystemEvtQueue);
 80055da:	4628      	mov	r0, r5
 80055dc:	f7ff fd18 	bl	8005010 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80055e0:	4b07      	ldr	r3, [pc, #28]	; (8005600 <TL_SYS_Init+0x2c>)
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80055e2:	68a2      	ldr	r2, [r4, #8]
  p_systable = TL_RefTable.p_sys_table;
 80055e4:	68db      	ldr	r3, [r3, #12]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80055e6:	e9c3 2500 	strd	r2, r5, [r3]
  HW_IPCC_SYS_Init();
 80055ea:	f7fc fa21 	bl	8001a30 <HW_IPCC_SYS_Init>
  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80055ee:	4b05      	ldr	r3, [pc, #20]	; (8005604 <TL_SYS_Init+0x30>)
 80055f0:	6822      	ldr	r2, [r4, #0]
 80055f2:	611a      	str	r2, [r3, #16]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80055f4:	6862      	ldr	r2, [r4, #4]
 80055f6:	615a      	str	r2, [r3, #20]
}
 80055f8:	2000      	movs	r0, #0
 80055fa:	bd38      	pop	{r3, r4, r5, pc}
 80055fc:	20030a50 	.word	0x20030a50
 8005600:	20030000 	.word	0x20030000
 8005604:	20001234 	.word	0x20001234

08005608 <TL_SYS_SendCmd>:
{
 8005608:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800560a:	4b04      	ldr	r3, [pc, #16]	; (800561c <TL_SYS_SendCmd+0x14>)
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2210      	movs	r2, #16
 8005612:	721a      	strb	r2, [r3, #8]
  HW_IPCC_SYS_SendCmd();
 8005614:	f7fc fa14 	bl	8001a40 <HW_IPCC_SYS_SendCmd>
}
 8005618:	2000      	movs	r0, #0
 800561a:	bd08      	pop	{r3, pc}
 800561c:	20030000 	.word	0x20030000

08005620 <HW_IPCC_SYS_CmdEvtNot>:
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005620:	4b02      	ldr	r3, [pc, #8]	; (800562c <HW_IPCC_SYS_CmdEvtNot+0xc>)
 8005622:	68da      	ldr	r2, [r3, #12]
 8005624:	4b02      	ldr	r3, [pc, #8]	; (8005630 <HW_IPCC_SYS_CmdEvtNot+0x10>)
 8005626:	6810      	ldr	r0, [r2, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	4718      	bx	r3
 800562c:	20030000 	.word	0x20030000
 8005630:	20001234 	.word	0x20001234

08005634 <HW_IPCC_SYS_EvtNot>:
{
 8005634:	b537      	push	{r0, r1, r2, r4, r5, lr}
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005636:	4c08      	ldr	r4, [pc, #32]	; (8005658 <HW_IPCC_SYS_EvtNot+0x24>)
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8005638:	4d08      	ldr	r5, [pc, #32]	; (800565c <HW_IPCC_SYS_EvtNot+0x28>)
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800563a:	4807      	ldr	r0, [pc, #28]	; (8005658 <HW_IPCC_SYS_EvtNot+0x24>)
 800563c:	f7ff fceb 	bl	8005016 <LST_is_empty>
 8005640:	b108      	cbz	r0, 8005646 <HW_IPCC_SYS_EvtNot+0x12>
}
 8005642:	b003      	add	sp, #12
 8005644:	bd30      	pop	{r4, r5, pc}
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8005646:	4620      	mov	r0, r4
 8005648:	a901      	add	r1, sp, #4
 800564a:	f7ff fd11 	bl	8005070 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800564e:	696b      	ldr	r3, [r5, #20]
 8005650:	9801      	ldr	r0, [sp, #4]
 8005652:	4798      	blx	r3
 8005654:	e7f1      	b.n	800563a <HW_IPCC_SYS_EvtNot+0x6>
 8005656:	bf00      	nop
 8005658:	20030a50 	.word	0x20030a50
 800565c:	20001234 	.word	0x20001234

08005660 <TL_MM_Init>:
{
 8005660:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&FreeBufQueue);
 8005662:	4d0c      	ldr	r5, [pc, #48]	; (8005694 <TL_MM_Init+0x34>)
{
 8005664:	4604      	mov	r4, r0
  LST_init_head (&FreeBufQueue);
 8005666:	4628      	mov	r0, r5
 8005668:	f7ff fcd2 	bl	8005010 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800566c:	480a      	ldr	r0, [pc, #40]	; (8005698 <TL_MM_Init+0x38>)
 800566e:	f7ff fccf 	bl	8005010 <LST_init_head>
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8005672:	4b0a      	ldr	r3, [pc, #40]	; (800569c <TL_MM_Init+0x3c>)
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8005674:	68a2      	ldr	r2, [r4, #8]
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8005676:	691b      	ldr	r3, [r3, #16]
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8005678:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800567a:	68e2      	ldr	r2, [r4, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800567c:	e9c3 2503 	strd	r2, r5, [r3, #12]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8005680:	6822      	ldr	r2, [r4, #0]
 8005682:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8005684:	6862      	ldr	r2, [r4, #4]
 8005686:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8005688:	6922      	ldr	r2, [r4, #16]
 800568a:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800568c:	6962      	ldr	r2, [r4, #20]
 800568e:	619a      	str	r2, [r3, #24]
}
 8005690:	bd38      	pop	{r3, r4, r5, pc}
 8005692:	bf00      	nop
 8005694:	200301c0 	.word	0x200301c0
 8005698:	20001234 	.word	0x20001234
 800569c:	20030000 	.word	0x20030000

080056a0 <TL_MM_EvtDone>:
{
 80056a0:	b508      	push	{r3, lr}
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80056a2:	4601      	mov	r1, r0
 80056a4:	4803      	ldr	r0, [pc, #12]	; (80056b4 <TL_MM_EvtDone+0x14>)
 80056a6:	f7ff fccc 	bl	8005042 <LST_insert_tail>
  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80056aa:	4803      	ldr	r0, [pc, #12]	; (80056b8 <TL_MM_EvtDone+0x18>)
}
 80056ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80056b0:	f7fc ba14 	b.w	8001adc <HW_IPCC_MM_SendFreeBuf>
 80056b4:	20001234 	.word	0x20001234
 80056b8:	080054c9 	.word	0x080054c9

080056bc <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80056bc:	b510      	push	{r4, lr}
  LST_init_head (&TracesEvtQueue);
 80056be:	4c05      	ldr	r4, [pc, #20]	; (80056d4 <TL_TRACES_Init+0x18>)
 80056c0:	4620      	mov	r0, r4
 80056c2:	f7ff fca5 	bl	8005010 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80056c6:	4b04      	ldr	r3, [pc, #16]	; (80056d8 <TL_TRACES_Init+0x1c>)
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	601c      	str	r4, [r3, #0]

  HW_IPCC_TRACES_Init();

  return;
}
 80056cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HW_IPCC_TRACES_Init();
 80056d0:	f7fc ba1a 	b.w	8001b08 <HW_IPCC_TRACES_Init>
 80056d4:	200301c8 	.word	0x200301c8
 80056d8:	20030000 	.word	0x20030000

080056dc <TL_TRACES_EvtReceived>:
}

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
  (void)(hcievt);
}
 80056dc:	4770      	bx	lr
	...

080056e0 <HW_IPCC_TRACES_EvtNot>:
{
 80056e0:	b513      	push	{r0, r1, r4, lr}
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80056e2:	4c07      	ldr	r4, [pc, #28]	; (8005700 <HW_IPCC_TRACES_EvtNot+0x20>)
 80056e4:	4806      	ldr	r0, [pc, #24]	; (8005700 <HW_IPCC_TRACES_EvtNot+0x20>)
 80056e6:	f7ff fc96 	bl	8005016 <LST_is_empty>
 80056ea:	b108      	cbz	r0, 80056f0 <HW_IPCC_TRACES_EvtNot+0x10>
}
 80056ec:	b002      	add	sp, #8
 80056ee:	bd10      	pop	{r4, pc}
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80056f0:	4620      	mov	r0, r4
 80056f2:	a901      	add	r1, sp, #4
 80056f4:	f7ff fcbc 	bl	8005070 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80056f8:	9801      	ldr	r0, [sp, #4]
 80056fa:	f7ff ffef 	bl	80056dc <TL_TRACES_EvtReceived>
 80056fe:	e7f1      	b.n	80056e4 <HW_IPCC_TRACES_EvtNot+0x4>
 8005700:	200301c8 	.word	0x200301c8

08005704 <UTIL_LPM_Init>:
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8005704:	4b02      	ldr	r3, [pc, #8]	; (8005710 <UTIL_LPM_Init+0xc>)
 8005706:	2200      	movs	r2, #0
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8005708:	e9c3 2200 	strd	r2, r2, [r3]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	2000124c 	.word	0x2000124c

08005714 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8005714:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005716:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800571a:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800571c:	b141      	cbz	r1, 8005730 <UTIL_LPM_SetOffMode+0x1c>
 800571e:	2901      	cmp	r1, #1
 8005720:	d103      	bne.n	800572a <UTIL_LPM_SetOffMode+0x16>
  {
    case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8005722:	4b06      	ldr	r3, [pc, #24]	; (800573c <UTIL_LPM_SetOffMode+0x28>)
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	4302      	orrs	r2, r0
 8005728:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572a:	f384 8810 	msr	PRIMASK, r4
    default:
      break;
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800572e:	bd10      	pop	{r4, pc}
      OffModeDisable &= ( ~lpm_id_bm );
 8005730:	4902      	ldr	r1, [pc, #8]	; (800573c <UTIL_LPM_SetOffMode+0x28>)
 8005732:	684b      	ldr	r3, [r1, #4]
 8005734:	ea23 0300 	bic.w	r3, r3, r0
 8005738:	604b      	str	r3, [r1, #4]
      break;
 800573a:	e7f6      	b.n	800572a <UTIL_LPM_SetOffMode+0x16>
 800573c:	2000124c 	.word	0x2000124c

08005740 <bit_position>:
static uint32_t bit_position(uint32_t value)
{

  uint32_t n = 0;

  if ((value & 0xFFFF0000) == 0)  { n  = 16; value <<= 16;  }
 8005740:	0c03      	lsrs	r3, r0, #16
 8005742:	041b      	lsls	r3, r3, #16
 8005744:	b9a3      	cbnz	r3, 8005770 <bit_position+0x30>
 8005746:	0400      	lsls	r0, r0, #16
 8005748:	2310      	movs	r3, #16
  if ((value & 0xFF000000) == 0)  { n +=  8; value <<=  8;  }
 800574a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800574e:	bf04      	itt	eq
 8005750:	0200      	lsleq	r0, r0, #8
 8005752:	3308      	addeq	r3, #8
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 8005754:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005758:	bf08      	it	eq
 800575a:	0100      	lsleq	r0, r0, #4

  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 800575c:	4a05      	ldr	r2, [pc, #20]	; (8005774 <bit_position+0x34>)
 800575e:	ea4f 7010 	mov.w	r0, r0, lsr #28
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 8005762:	bf08      	it	eq
 8005764:	3304      	addeq	r3, #4
  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 8005766:	5c10      	ldrb	r0, [r2, r0]

  return (31-n);
 8005768:	f1c3 031f 	rsb	r3, r3, #31
}
 800576c:	1a18      	subs	r0, r3, r0
 800576e:	4770      	bx	lr
  uint32_t n = 0;
 8005770:	2300      	movs	r3, #0
 8005772:	e7ea      	b.n	800574a <bit_position+0xa>
 8005774:	08006534 	.word	0x08006534

08005778 <UTIL_SEQ_RegTask>:
{
 8005778:	b510      	push	{r4, lr}
 800577a:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800577c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005780:	b672      	cpsid	i
  TaskCb[bit_position(task_id_bm)] = task;
 8005782:	f7ff ffdd 	bl	8005740 <bit_position>
 8005786:	4b03      	ldr	r3, [pc, #12]	; (8005794 <UTIL_SEQ_RegTask+0x1c>)
 8005788:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800578c:	6104      	str	r4, [r0, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800578e:	f381 8810 	msr	PRIMASK, r1
}
 8005792:	bd10      	pop	{r4, pc}
 8005794:	20001254 	.word	0x20001254

08005798 <UTIL_SEQ_SetTask>:
{
 8005798:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800579a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800579e:	b672      	cpsid	i
  TaskSet |= task_id_bm;
 80057a0:	4b06      	ldr	r3, [pc, #24]	; (80057bc <UTIL_SEQ_SetTask+0x24>)
 80057a2:	681c      	ldr	r4, [r3, #0]
 80057a4:	4304      	orrs	r4, r0
 80057a6:	601c      	str	r4, [r3, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 80057a8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80057ac:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80057b0:	4302      	orrs	r2, r0
 80057b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b6:	f385 8810 	msr	PRIMASK, r5
}
 80057ba:	bd30      	pop	{r4, r5, pc}
 80057bc:	20001254 	.word	0x20001254

080057c0 <UTIL_SEQ_PauseTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057c0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80057c4:	b672      	cpsid	i
  TaskMask &= (~task_id_bm);
 80057c6:	4a04      	ldr	r2, [pc, #16]	; (80057d8 <UTIL_SEQ_PauseTask+0x18>)
 80057c8:	6813      	ldr	r3, [r2, #0]
 80057ca:	ea23 0300 	bic.w	r3, r3, r0
 80057ce:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d0:	f381 8810 	msr	PRIMASK, r1
}
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	20000030 	.word	0x20000030

080057dc <UTIL_SEQ_ResumeTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057dc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80057e0:	b672      	cpsid	i
  TaskMask |= task_id_bm;
 80057e2:	4a03      	ldr	r2, [pc, #12]	; (80057f0 <UTIL_SEQ_ResumeTask+0x14>)
 80057e4:	6813      	ldr	r3, [r2, #0]
 80057e6:	4303      	orrs	r3, r0
 80057e8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ea:	f381 8810 	msr	PRIMASK, r1
}
 80057ee:	4770      	bx	lr
 80057f0:	20000030 	.word	0x20000030

080057f4 <UTIL_SEQ_SetEvt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80057f8:	b672      	cpsid	i
  EvtSet |= evt_id_bm;
 80057fa:	4a03      	ldr	r2, [pc, #12]	; (8005808 <UTIL_SEQ_SetEvt+0x14>)
 80057fc:	6853      	ldr	r3, [r2, #4]
 80057fe:	4303      	orrs	r3, r0
 8005800:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005802:	f381 8810 	msr	PRIMASK, r1
}
 8005806:	4770      	bx	lr
 8005808:	20001254 	.word	0x20001254

0800580c <UTIL_SEQ_PreIdle>:
 800580c:	4770      	bx	lr

0800580e <UTIL_SEQ_PostIdle>:
 800580e:	4770      	bx	lr

08005810 <UTIL_SEQ_Run>:
{
 8005810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  super_mask_backup = SuperMask;
 8005814:	4d32      	ldr	r5, [pc, #200]	; (80058e0 <UTIL_SEQ_Run+0xd0>)
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 8005816:	4f33      	ldr	r7, [pc, #204]	; (80058e4 <UTIL_SEQ_Run+0xd4>)
  super_mask_backup = SuperMask;
 8005818:	686e      	ldr	r6, [r5, #4]
  SuperMask &= mask_bm;
 800581a:	4030      	ands	r0, r6
 800581c:	6068      	str	r0, [r5, #4]
 800581e:	463c      	mov	r4, r7
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 8005820:	e9d5 2000 	ldrd	r2, r0, [r5]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	4013      	ands	r3, r2
 8005828:	4203      	tst	r3, r0
 800582a:	d040      	beq.n	80058ae <UTIL_SEQ_Run+0x9e>
 800582c:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 8005830:	400b      	ands	r3, r1
 8005832:	d13c      	bne.n	80058ae <UTIL_SEQ_Run+0x9e>
 8005834:	4002      	ands	r2, r0
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 8005836:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800583a:	4010      	ands	r0, r2
 800583c:	d103      	bne.n	8005846 <UTIL_SEQ_Run+0x36>
 800583e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
      counter++;
 8005842:	2301      	movs	r3, #1
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 8005844:	4010      	ands	r0, r2
    if (!(TaskPrio[counter].round_robin & current_task_set))
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	18e2      	adds	r2, r4, r3
 800584a:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
 800584e:	4208      	tst	r0, r1
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8005850:	bf04      	itt	eq
 8005852:	f04f 31ff 	moveq.w	r1, #4294967295
 8005856:	f8c2 1094 	streq.w	r1, [r2, #148]	; 0x94
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 800585a:	18e1      	adds	r1, r4, r3
 800585c:	f8d1 8094 	ldr.w	r8, [r1, #148]	; 0x94
 8005860:	ea08 0000 	and.w	r0, r8, r0
 8005864:	f7ff ff6c 	bl	8005740 <bit_position>
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 8005868:	2301      	movs	r3, #1
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 800586a:	60e0      	str	r0, [r4, #12]
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 800586c:	fa03 f000 	lsl.w	r0, r3, r0
 8005870:	ea28 0000 	bic.w	r0, r8, r0
 8005874:	f8c1 0094 	str.w	r0, [r1, #148]	; 0x94
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005878:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800587c:	b672      	cpsid	i
    TaskSet &= ~(1 << (CurrentTaskIdx));
 800587e:	68e2      	ldr	r2, [r4, #12]
 8005880:	4093      	lsls	r3, r2
 8005882:	6822      	ldr	r2, [r4, #0]
 8005884:	43db      	mvns	r3, r3
 8005886:	401a      	ands	r2, r3
 8005888:	6022      	str	r2, [r4, #0]
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 800588a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800588e:	401a      	ands	r2, r3
 8005890:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 8005894:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005898:	4013      	ands	r3, r2
 800589a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800589e:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 80058a2:	68e3      	ldr	r3, [r4, #12]
 80058a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	4798      	blx	r3
 80058ac:	e7b8      	b.n	8005820 <UTIL_SEQ_Run+0x10>
  UTIL_SEQ_PreIdle( );
 80058ae:	f7ff ffad 	bl	800580c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058b2:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80058b6:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 80058b8:	682a      	ldr	r2, [r5, #0]
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	4013      	ands	r3, r2
 80058be:	686a      	ldr	r2, [r5, #4]
 80058c0:	4213      	tst	r3, r2
 80058c2:	d105      	bne.n	80058d0 <UTIL_SEQ_Run+0xc0>
 80058c4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80058c8:	421a      	tst	r2, r3
 80058ca:	d101      	bne.n	80058d0 <UTIL_SEQ_Run+0xc0>
    UTIL_SEQ_Idle( );
 80058cc:	f7fa ff58 	bl	8000780 <UTIL_SEQ_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d0:	f387 8810 	msr	PRIMASK, r7
  UTIL_SEQ_PostIdle( );
 80058d4:	f7ff ff9b 	bl	800580e <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 80058d8:	606e      	str	r6, [r5, #4]
}
 80058da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058de:	bf00      	nop
 80058e0:	20000030 	.word	0x20000030
 80058e4:	20001254 	.word	0x20001254

080058e8 <UTIL_SEQ_WaitEvt>:
{
 80058e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  current_task_id_bm = (1 << CurrentTaskIdx);
 80058ea:	4c0b      	ldr	r4, [pc, #44]	; (8005918 <UTIL_SEQ_WaitEvt+0x30>)
 80058ec:	68e3      	ldr	r3, [r4, #12]
  event_waited_id_backup = EvtWaited;
 80058ee:	68a7      	ldr	r7, [r4, #8]
  EvtWaited = evt_id_bm;
 80058f0:	60a0      	str	r0, [r4, #8]
  current_task_id_bm = (1 << CurrentTaskIdx);
 80058f2:	2601      	movs	r6, #1
 80058f4:	409e      	lsls	r6, r3
  while((EvtSet & EvtWaited) == 0)
 80058f6:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
 80058fa:	420d      	tst	r5, r1
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 80058fc:	4630      	mov	r0, r6
  while((EvtSet & EvtWaited) == 0)
 80058fe:	d007      	beq.n	8005910 <UTIL_SEQ_WaitEvt+0x28>
  CurrentTaskIdx = bit_position(current_task_id_bm);
 8005900:	f7ff ff1e 	bl	8005740 <bit_position>
  EvtSet &= (~EvtWaited);
 8005904:	ea25 0501 	bic.w	r5, r5, r1
  CurrentTaskIdx = bit_position(current_task_id_bm);
 8005908:	60e0      	str	r0, [r4, #12]
  EvtWaited = event_waited_id_backup;
 800590a:	e9c4 5701 	strd	r5, r7, [r4, #4]
}
 800590e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 8005910:	f7fa ff37 	bl	8000782 <UTIL_SEQ_EvtIdle>
 8005914:	e7ef      	b.n	80058f6 <UTIL_SEQ_WaitEvt+0xe>
 8005916:	bf00      	nop
 8005918:	20001254 	.word	0x20001254

0800591c <__errno>:
 800591c:	4b01      	ldr	r3, [pc, #4]	; (8005924 <__errno+0x8>)
 800591e:	6818      	ldr	r0, [r3, #0]
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	20000038 	.word	0x20000038

08005928 <__libc_init_array>:
 8005928:	b570      	push	{r4, r5, r6, lr}
 800592a:	4e0d      	ldr	r6, [pc, #52]	; (8005960 <__libc_init_array+0x38>)
 800592c:	4c0d      	ldr	r4, [pc, #52]	; (8005964 <__libc_init_array+0x3c>)
 800592e:	1ba4      	subs	r4, r4, r6
 8005930:	10a4      	asrs	r4, r4, #2
 8005932:	2500      	movs	r5, #0
 8005934:	42a5      	cmp	r5, r4
 8005936:	d109      	bne.n	800594c <__libc_init_array+0x24>
 8005938:	4e0b      	ldr	r6, [pc, #44]	; (8005968 <__libc_init_array+0x40>)
 800593a:	4c0c      	ldr	r4, [pc, #48]	; (800596c <__libc_init_array+0x44>)
 800593c:	f000 fc94 	bl	8006268 <_init>
 8005940:	1ba4      	subs	r4, r4, r6
 8005942:	10a4      	asrs	r4, r4, #2
 8005944:	2500      	movs	r5, #0
 8005946:	42a5      	cmp	r5, r4
 8005948:	d105      	bne.n	8005956 <__libc_init_array+0x2e>
 800594a:	bd70      	pop	{r4, r5, r6, pc}
 800594c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005950:	4798      	blx	r3
 8005952:	3501      	adds	r5, #1
 8005954:	e7ee      	b.n	8005934 <__libc_init_array+0xc>
 8005956:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800595a:	4798      	blx	r3
 800595c:	3501      	adds	r5, #1
 800595e:	e7f2      	b.n	8005946 <__libc_init_array+0x1e>
 8005960:	08006628 	.word	0x08006628
 8005964:	08006628 	.word	0x08006628
 8005968:	08006628 	.word	0x08006628
 800596c:	0800662c 	.word	0x0800662c

08005970 <memcpy>:
 8005970:	b510      	push	{r4, lr}
 8005972:	1e43      	subs	r3, r0, #1
 8005974:	440a      	add	r2, r1
 8005976:	4291      	cmp	r1, r2
 8005978:	d100      	bne.n	800597c <memcpy+0xc>
 800597a:	bd10      	pop	{r4, pc}
 800597c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005980:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005984:	e7f7      	b.n	8005976 <memcpy+0x6>

08005986 <memset>:
 8005986:	4402      	add	r2, r0
 8005988:	4603      	mov	r3, r0
 800598a:	4293      	cmp	r3, r2
 800598c:	d100      	bne.n	8005990 <memset+0xa>
 800598e:	4770      	bx	lr
 8005990:	f803 1b01 	strb.w	r1, [r3], #1
 8005994:	e7f9      	b.n	800598a <memset+0x4>
	...

08005998 <_puts_r>:
 8005998:	b570      	push	{r4, r5, r6, lr}
 800599a:	460e      	mov	r6, r1
 800599c:	4605      	mov	r5, r0
 800599e:	b118      	cbz	r0, 80059a8 <_puts_r+0x10>
 80059a0:	6983      	ldr	r3, [r0, #24]
 80059a2:	b90b      	cbnz	r3, 80059a8 <_puts_r+0x10>
 80059a4:	f000 fa0c 	bl	8005dc0 <__sinit>
 80059a8:	69ab      	ldr	r3, [r5, #24]
 80059aa:	68ac      	ldr	r4, [r5, #8]
 80059ac:	b913      	cbnz	r3, 80059b4 <_puts_r+0x1c>
 80059ae:	4628      	mov	r0, r5
 80059b0:	f000 fa06 	bl	8005dc0 <__sinit>
 80059b4:	4b23      	ldr	r3, [pc, #140]	; (8005a44 <_puts_r+0xac>)
 80059b6:	429c      	cmp	r4, r3
 80059b8:	d117      	bne.n	80059ea <_puts_r+0x52>
 80059ba:	686c      	ldr	r4, [r5, #4]
 80059bc:	89a3      	ldrh	r3, [r4, #12]
 80059be:	071b      	lsls	r3, r3, #28
 80059c0:	d51d      	bpl.n	80059fe <_puts_r+0x66>
 80059c2:	6923      	ldr	r3, [r4, #16]
 80059c4:	b1db      	cbz	r3, 80059fe <_puts_r+0x66>
 80059c6:	3e01      	subs	r6, #1
 80059c8:	68a3      	ldr	r3, [r4, #8]
 80059ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80059ce:	3b01      	subs	r3, #1
 80059d0:	60a3      	str	r3, [r4, #8]
 80059d2:	b9e9      	cbnz	r1, 8005a10 <_puts_r+0x78>
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	da2e      	bge.n	8005a36 <_puts_r+0x9e>
 80059d8:	4622      	mov	r2, r4
 80059da:	210a      	movs	r1, #10
 80059dc:	4628      	mov	r0, r5
 80059de:	f000 f83f 	bl	8005a60 <__swbuf_r>
 80059e2:	3001      	adds	r0, #1
 80059e4:	d011      	beq.n	8005a0a <_puts_r+0x72>
 80059e6:	200a      	movs	r0, #10
 80059e8:	e011      	b.n	8005a0e <_puts_r+0x76>
 80059ea:	4b17      	ldr	r3, [pc, #92]	; (8005a48 <_puts_r+0xb0>)
 80059ec:	429c      	cmp	r4, r3
 80059ee:	d101      	bne.n	80059f4 <_puts_r+0x5c>
 80059f0:	68ac      	ldr	r4, [r5, #8]
 80059f2:	e7e3      	b.n	80059bc <_puts_r+0x24>
 80059f4:	4b15      	ldr	r3, [pc, #84]	; (8005a4c <_puts_r+0xb4>)
 80059f6:	429c      	cmp	r4, r3
 80059f8:	bf08      	it	eq
 80059fa:	68ec      	ldreq	r4, [r5, #12]
 80059fc:	e7de      	b.n	80059bc <_puts_r+0x24>
 80059fe:	4621      	mov	r1, r4
 8005a00:	4628      	mov	r0, r5
 8005a02:	f000 f87f 	bl	8005b04 <__swsetup_r>
 8005a06:	2800      	cmp	r0, #0
 8005a08:	d0dd      	beq.n	80059c6 <_puts_r+0x2e>
 8005a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a0e:	bd70      	pop	{r4, r5, r6, pc}
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	da04      	bge.n	8005a1e <_puts_r+0x86>
 8005a14:	69a2      	ldr	r2, [r4, #24]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	dc06      	bgt.n	8005a28 <_puts_r+0x90>
 8005a1a:	290a      	cmp	r1, #10
 8005a1c:	d004      	beq.n	8005a28 <_puts_r+0x90>
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	6022      	str	r2, [r4, #0]
 8005a24:	7019      	strb	r1, [r3, #0]
 8005a26:	e7cf      	b.n	80059c8 <_puts_r+0x30>
 8005a28:	4622      	mov	r2, r4
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f000 f818 	bl	8005a60 <__swbuf_r>
 8005a30:	3001      	adds	r0, #1
 8005a32:	d1c9      	bne.n	80059c8 <_puts_r+0x30>
 8005a34:	e7e9      	b.n	8005a0a <_puts_r+0x72>
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	200a      	movs	r0, #10
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	6022      	str	r2, [r4, #0]
 8005a3e:	7018      	strb	r0, [r3, #0]
 8005a40:	e7e5      	b.n	8005a0e <_puts_r+0x76>
 8005a42:	bf00      	nop
 8005a44:	080065e0 	.word	0x080065e0
 8005a48:	08006600 	.word	0x08006600
 8005a4c:	080065c0 	.word	0x080065c0

08005a50 <puts>:
 8005a50:	4b02      	ldr	r3, [pc, #8]	; (8005a5c <puts+0xc>)
 8005a52:	4601      	mov	r1, r0
 8005a54:	6818      	ldr	r0, [r3, #0]
 8005a56:	f7ff bf9f 	b.w	8005998 <_puts_r>
 8005a5a:	bf00      	nop
 8005a5c:	20000038 	.word	0x20000038

08005a60 <__swbuf_r>:
 8005a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a62:	460e      	mov	r6, r1
 8005a64:	4614      	mov	r4, r2
 8005a66:	4605      	mov	r5, r0
 8005a68:	b118      	cbz	r0, 8005a72 <__swbuf_r+0x12>
 8005a6a:	6983      	ldr	r3, [r0, #24]
 8005a6c:	b90b      	cbnz	r3, 8005a72 <__swbuf_r+0x12>
 8005a6e:	f000 f9a7 	bl	8005dc0 <__sinit>
 8005a72:	4b21      	ldr	r3, [pc, #132]	; (8005af8 <__swbuf_r+0x98>)
 8005a74:	429c      	cmp	r4, r3
 8005a76:	d12a      	bne.n	8005ace <__swbuf_r+0x6e>
 8005a78:	686c      	ldr	r4, [r5, #4]
 8005a7a:	69a3      	ldr	r3, [r4, #24]
 8005a7c:	60a3      	str	r3, [r4, #8]
 8005a7e:	89a3      	ldrh	r3, [r4, #12]
 8005a80:	071a      	lsls	r2, r3, #28
 8005a82:	d52e      	bpl.n	8005ae2 <__swbuf_r+0x82>
 8005a84:	6923      	ldr	r3, [r4, #16]
 8005a86:	b363      	cbz	r3, 8005ae2 <__swbuf_r+0x82>
 8005a88:	6923      	ldr	r3, [r4, #16]
 8005a8a:	6820      	ldr	r0, [r4, #0]
 8005a8c:	1ac0      	subs	r0, r0, r3
 8005a8e:	6963      	ldr	r3, [r4, #20]
 8005a90:	b2f6      	uxtb	r6, r6
 8005a92:	4283      	cmp	r3, r0
 8005a94:	4637      	mov	r7, r6
 8005a96:	dc04      	bgt.n	8005aa2 <__swbuf_r+0x42>
 8005a98:	4621      	mov	r1, r4
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	f000 f926 	bl	8005cec <_fflush_r>
 8005aa0:	bb28      	cbnz	r0, 8005aee <__swbuf_r+0x8e>
 8005aa2:	68a3      	ldr	r3, [r4, #8]
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	60a3      	str	r3, [r4, #8]
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	6022      	str	r2, [r4, #0]
 8005aae:	701e      	strb	r6, [r3, #0]
 8005ab0:	6963      	ldr	r3, [r4, #20]
 8005ab2:	3001      	adds	r0, #1
 8005ab4:	4283      	cmp	r3, r0
 8005ab6:	d004      	beq.n	8005ac2 <__swbuf_r+0x62>
 8005ab8:	89a3      	ldrh	r3, [r4, #12]
 8005aba:	07db      	lsls	r3, r3, #31
 8005abc:	d519      	bpl.n	8005af2 <__swbuf_r+0x92>
 8005abe:	2e0a      	cmp	r6, #10
 8005ac0:	d117      	bne.n	8005af2 <__swbuf_r+0x92>
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	f000 f911 	bl	8005cec <_fflush_r>
 8005aca:	b190      	cbz	r0, 8005af2 <__swbuf_r+0x92>
 8005acc:	e00f      	b.n	8005aee <__swbuf_r+0x8e>
 8005ace:	4b0b      	ldr	r3, [pc, #44]	; (8005afc <__swbuf_r+0x9c>)
 8005ad0:	429c      	cmp	r4, r3
 8005ad2:	d101      	bne.n	8005ad8 <__swbuf_r+0x78>
 8005ad4:	68ac      	ldr	r4, [r5, #8]
 8005ad6:	e7d0      	b.n	8005a7a <__swbuf_r+0x1a>
 8005ad8:	4b09      	ldr	r3, [pc, #36]	; (8005b00 <__swbuf_r+0xa0>)
 8005ada:	429c      	cmp	r4, r3
 8005adc:	bf08      	it	eq
 8005ade:	68ec      	ldreq	r4, [r5, #12]
 8005ae0:	e7cb      	b.n	8005a7a <__swbuf_r+0x1a>
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	f000 f80d 	bl	8005b04 <__swsetup_r>
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d0cc      	beq.n	8005a88 <__swbuf_r+0x28>
 8005aee:	f04f 37ff 	mov.w	r7, #4294967295
 8005af2:	4638      	mov	r0, r7
 8005af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005af6:	bf00      	nop
 8005af8:	080065e0 	.word	0x080065e0
 8005afc:	08006600 	.word	0x08006600
 8005b00:	080065c0 	.word	0x080065c0

08005b04 <__swsetup_r>:
 8005b04:	4b32      	ldr	r3, [pc, #200]	; (8005bd0 <__swsetup_r+0xcc>)
 8005b06:	b570      	push	{r4, r5, r6, lr}
 8005b08:	681d      	ldr	r5, [r3, #0]
 8005b0a:	4606      	mov	r6, r0
 8005b0c:	460c      	mov	r4, r1
 8005b0e:	b125      	cbz	r5, 8005b1a <__swsetup_r+0x16>
 8005b10:	69ab      	ldr	r3, [r5, #24]
 8005b12:	b913      	cbnz	r3, 8005b1a <__swsetup_r+0x16>
 8005b14:	4628      	mov	r0, r5
 8005b16:	f000 f953 	bl	8005dc0 <__sinit>
 8005b1a:	4b2e      	ldr	r3, [pc, #184]	; (8005bd4 <__swsetup_r+0xd0>)
 8005b1c:	429c      	cmp	r4, r3
 8005b1e:	d10f      	bne.n	8005b40 <__swsetup_r+0x3c>
 8005b20:	686c      	ldr	r4, [r5, #4]
 8005b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	0715      	lsls	r5, r2, #28
 8005b2a:	d42c      	bmi.n	8005b86 <__swsetup_r+0x82>
 8005b2c:	06d0      	lsls	r0, r2, #27
 8005b2e:	d411      	bmi.n	8005b54 <__swsetup_r+0x50>
 8005b30:	2209      	movs	r2, #9
 8005b32:	6032      	str	r2, [r6, #0]
 8005b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b38:	81a3      	strh	r3, [r4, #12]
 8005b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3e:	e03e      	b.n	8005bbe <__swsetup_r+0xba>
 8005b40:	4b25      	ldr	r3, [pc, #148]	; (8005bd8 <__swsetup_r+0xd4>)
 8005b42:	429c      	cmp	r4, r3
 8005b44:	d101      	bne.n	8005b4a <__swsetup_r+0x46>
 8005b46:	68ac      	ldr	r4, [r5, #8]
 8005b48:	e7eb      	b.n	8005b22 <__swsetup_r+0x1e>
 8005b4a:	4b24      	ldr	r3, [pc, #144]	; (8005bdc <__swsetup_r+0xd8>)
 8005b4c:	429c      	cmp	r4, r3
 8005b4e:	bf08      	it	eq
 8005b50:	68ec      	ldreq	r4, [r5, #12]
 8005b52:	e7e6      	b.n	8005b22 <__swsetup_r+0x1e>
 8005b54:	0751      	lsls	r1, r2, #29
 8005b56:	d512      	bpl.n	8005b7e <__swsetup_r+0x7a>
 8005b58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b5a:	b141      	cbz	r1, 8005b6e <__swsetup_r+0x6a>
 8005b5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b60:	4299      	cmp	r1, r3
 8005b62:	d002      	beq.n	8005b6a <__swsetup_r+0x66>
 8005b64:	4630      	mov	r0, r6
 8005b66:	f000 fa19 	bl	8005f9c <_free_r>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	6363      	str	r3, [r4, #52]	; 0x34
 8005b6e:	89a3      	ldrh	r3, [r4, #12]
 8005b70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b74:	81a3      	strh	r3, [r4, #12]
 8005b76:	2300      	movs	r3, #0
 8005b78:	6063      	str	r3, [r4, #4]
 8005b7a:	6923      	ldr	r3, [r4, #16]
 8005b7c:	6023      	str	r3, [r4, #0]
 8005b7e:	89a3      	ldrh	r3, [r4, #12]
 8005b80:	f043 0308 	orr.w	r3, r3, #8
 8005b84:	81a3      	strh	r3, [r4, #12]
 8005b86:	6923      	ldr	r3, [r4, #16]
 8005b88:	b94b      	cbnz	r3, 8005b9e <__swsetup_r+0x9a>
 8005b8a:	89a3      	ldrh	r3, [r4, #12]
 8005b8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b94:	d003      	beq.n	8005b9e <__swsetup_r+0x9a>
 8005b96:	4621      	mov	r1, r4
 8005b98:	4630      	mov	r0, r6
 8005b9a:	f000 f9bf 	bl	8005f1c <__smakebuf_r>
 8005b9e:	89a2      	ldrh	r2, [r4, #12]
 8005ba0:	f012 0301 	ands.w	r3, r2, #1
 8005ba4:	d00c      	beq.n	8005bc0 <__swsetup_r+0xbc>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60a3      	str	r3, [r4, #8]
 8005baa:	6963      	ldr	r3, [r4, #20]
 8005bac:	425b      	negs	r3, r3
 8005bae:	61a3      	str	r3, [r4, #24]
 8005bb0:	6923      	ldr	r3, [r4, #16]
 8005bb2:	b953      	cbnz	r3, 8005bca <__swsetup_r+0xc6>
 8005bb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bb8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005bbc:	d1ba      	bne.n	8005b34 <__swsetup_r+0x30>
 8005bbe:	bd70      	pop	{r4, r5, r6, pc}
 8005bc0:	0792      	lsls	r2, r2, #30
 8005bc2:	bf58      	it	pl
 8005bc4:	6963      	ldrpl	r3, [r4, #20]
 8005bc6:	60a3      	str	r3, [r4, #8]
 8005bc8:	e7f2      	b.n	8005bb0 <__swsetup_r+0xac>
 8005bca:	2000      	movs	r0, #0
 8005bcc:	e7f7      	b.n	8005bbe <__swsetup_r+0xba>
 8005bce:	bf00      	nop
 8005bd0:	20000038 	.word	0x20000038
 8005bd4:	080065e0 	.word	0x080065e0
 8005bd8:	08006600 	.word	0x08006600
 8005bdc:	080065c0 	.word	0x080065c0

08005be0 <__sflush_r>:
 8005be0:	898a      	ldrh	r2, [r1, #12]
 8005be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005be6:	4605      	mov	r5, r0
 8005be8:	0710      	lsls	r0, r2, #28
 8005bea:	460c      	mov	r4, r1
 8005bec:	d458      	bmi.n	8005ca0 <__sflush_r+0xc0>
 8005bee:	684b      	ldr	r3, [r1, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	dc05      	bgt.n	8005c00 <__sflush_r+0x20>
 8005bf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	dc02      	bgt.n	8005c00 <__sflush_r+0x20>
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c02:	2e00      	cmp	r6, #0
 8005c04:	d0f9      	beq.n	8005bfa <__sflush_r+0x1a>
 8005c06:	2300      	movs	r3, #0
 8005c08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c0c:	682f      	ldr	r7, [r5, #0]
 8005c0e:	6a21      	ldr	r1, [r4, #32]
 8005c10:	602b      	str	r3, [r5, #0]
 8005c12:	d032      	beq.n	8005c7a <__sflush_r+0x9a>
 8005c14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c16:	89a3      	ldrh	r3, [r4, #12]
 8005c18:	075a      	lsls	r2, r3, #29
 8005c1a:	d505      	bpl.n	8005c28 <__sflush_r+0x48>
 8005c1c:	6863      	ldr	r3, [r4, #4]
 8005c1e:	1ac0      	subs	r0, r0, r3
 8005c20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c22:	b10b      	cbz	r3, 8005c28 <__sflush_r+0x48>
 8005c24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c26:	1ac0      	subs	r0, r0, r3
 8005c28:	2300      	movs	r3, #0
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c2e:	6a21      	ldr	r1, [r4, #32]
 8005c30:	4628      	mov	r0, r5
 8005c32:	47b0      	blx	r6
 8005c34:	1c43      	adds	r3, r0, #1
 8005c36:	89a3      	ldrh	r3, [r4, #12]
 8005c38:	d106      	bne.n	8005c48 <__sflush_r+0x68>
 8005c3a:	6829      	ldr	r1, [r5, #0]
 8005c3c:	291d      	cmp	r1, #29
 8005c3e:	d848      	bhi.n	8005cd2 <__sflush_r+0xf2>
 8005c40:	4a29      	ldr	r2, [pc, #164]	; (8005ce8 <__sflush_r+0x108>)
 8005c42:	40ca      	lsrs	r2, r1
 8005c44:	07d6      	lsls	r6, r2, #31
 8005c46:	d544      	bpl.n	8005cd2 <__sflush_r+0xf2>
 8005c48:	2200      	movs	r2, #0
 8005c4a:	6062      	str	r2, [r4, #4]
 8005c4c:	04d9      	lsls	r1, r3, #19
 8005c4e:	6922      	ldr	r2, [r4, #16]
 8005c50:	6022      	str	r2, [r4, #0]
 8005c52:	d504      	bpl.n	8005c5e <__sflush_r+0x7e>
 8005c54:	1c42      	adds	r2, r0, #1
 8005c56:	d101      	bne.n	8005c5c <__sflush_r+0x7c>
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	b903      	cbnz	r3, 8005c5e <__sflush_r+0x7e>
 8005c5c:	6560      	str	r0, [r4, #84]	; 0x54
 8005c5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c60:	602f      	str	r7, [r5, #0]
 8005c62:	2900      	cmp	r1, #0
 8005c64:	d0c9      	beq.n	8005bfa <__sflush_r+0x1a>
 8005c66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c6a:	4299      	cmp	r1, r3
 8005c6c:	d002      	beq.n	8005c74 <__sflush_r+0x94>
 8005c6e:	4628      	mov	r0, r5
 8005c70:	f000 f994 	bl	8005f9c <_free_r>
 8005c74:	2000      	movs	r0, #0
 8005c76:	6360      	str	r0, [r4, #52]	; 0x34
 8005c78:	e7c0      	b.n	8005bfc <__sflush_r+0x1c>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	47b0      	blx	r6
 8005c80:	1c41      	adds	r1, r0, #1
 8005c82:	d1c8      	bne.n	8005c16 <__sflush_r+0x36>
 8005c84:	682b      	ldr	r3, [r5, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0c5      	beq.n	8005c16 <__sflush_r+0x36>
 8005c8a:	2b1d      	cmp	r3, #29
 8005c8c:	d001      	beq.n	8005c92 <__sflush_r+0xb2>
 8005c8e:	2b16      	cmp	r3, #22
 8005c90:	d101      	bne.n	8005c96 <__sflush_r+0xb6>
 8005c92:	602f      	str	r7, [r5, #0]
 8005c94:	e7b1      	b.n	8005bfa <__sflush_r+0x1a>
 8005c96:	89a3      	ldrh	r3, [r4, #12]
 8005c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c9c:	81a3      	strh	r3, [r4, #12]
 8005c9e:	e7ad      	b.n	8005bfc <__sflush_r+0x1c>
 8005ca0:	690f      	ldr	r7, [r1, #16]
 8005ca2:	2f00      	cmp	r7, #0
 8005ca4:	d0a9      	beq.n	8005bfa <__sflush_r+0x1a>
 8005ca6:	0793      	lsls	r3, r2, #30
 8005ca8:	680e      	ldr	r6, [r1, #0]
 8005caa:	bf08      	it	eq
 8005cac:	694b      	ldreq	r3, [r1, #20]
 8005cae:	600f      	str	r7, [r1, #0]
 8005cb0:	bf18      	it	ne
 8005cb2:	2300      	movne	r3, #0
 8005cb4:	eba6 0807 	sub.w	r8, r6, r7
 8005cb8:	608b      	str	r3, [r1, #8]
 8005cba:	f1b8 0f00 	cmp.w	r8, #0
 8005cbe:	dd9c      	ble.n	8005bfa <__sflush_r+0x1a>
 8005cc0:	4643      	mov	r3, r8
 8005cc2:	463a      	mov	r2, r7
 8005cc4:	6a21      	ldr	r1, [r4, #32]
 8005cc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005cc8:	4628      	mov	r0, r5
 8005cca:	47b0      	blx	r6
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	dc06      	bgt.n	8005cde <__sflush_r+0xfe>
 8005cd0:	89a3      	ldrh	r3, [r4, #12]
 8005cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cd6:	81a3      	strh	r3, [r4, #12]
 8005cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cdc:	e78e      	b.n	8005bfc <__sflush_r+0x1c>
 8005cde:	4407      	add	r7, r0
 8005ce0:	eba8 0800 	sub.w	r8, r8, r0
 8005ce4:	e7e9      	b.n	8005cba <__sflush_r+0xda>
 8005ce6:	bf00      	nop
 8005ce8:	20400001 	.word	0x20400001

08005cec <_fflush_r>:
 8005cec:	b538      	push	{r3, r4, r5, lr}
 8005cee:	690b      	ldr	r3, [r1, #16]
 8005cf0:	4605      	mov	r5, r0
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	b1db      	cbz	r3, 8005d2e <_fflush_r+0x42>
 8005cf6:	b118      	cbz	r0, 8005d00 <_fflush_r+0x14>
 8005cf8:	6983      	ldr	r3, [r0, #24]
 8005cfa:	b90b      	cbnz	r3, 8005d00 <_fflush_r+0x14>
 8005cfc:	f000 f860 	bl	8005dc0 <__sinit>
 8005d00:	4b0c      	ldr	r3, [pc, #48]	; (8005d34 <_fflush_r+0x48>)
 8005d02:	429c      	cmp	r4, r3
 8005d04:	d109      	bne.n	8005d1a <_fflush_r+0x2e>
 8005d06:	686c      	ldr	r4, [r5, #4]
 8005d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d0c:	b17b      	cbz	r3, 8005d2e <_fflush_r+0x42>
 8005d0e:	4621      	mov	r1, r4
 8005d10:	4628      	mov	r0, r5
 8005d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d16:	f7ff bf63 	b.w	8005be0 <__sflush_r>
 8005d1a:	4b07      	ldr	r3, [pc, #28]	; (8005d38 <_fflush_r+0x4c>)
 8005d1c:	429c      	cmp	r4, r3
 8005d1e:	d101      	bne.n	8005d24 <_fflush_r+0x38>
 8005d20:	68ac      	ldr	r4, [r5, #8]
 8005d22:	e7f1      	b.n	8005d08 <_fflush_r+0x1c>
 8005d24:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <_fflush_r+0x50>)
 8005d26:	429c      	cmp	r4, r3
 8005d28:	bf08      	it	eq
 8005d2a:	68ec      	ldreq	r4, [r5, #12]
 8005d2c:	e7ec      	b.n	8005d08 <_fflush_r+0x1c>
 8005d2e:	2000      	movs	r0, #0
 8005d30:	bd38      	pop	{r3, r4, r5, pc}
 8005d32:	bf00      	nop
 8005d34:	080065e0 	.word	0x080065e0
 8005d38:	08006600 	.word	0x08006600
 8005d3c:	080065c0 	.word	0x080065c0

08005d40 <std>:
 8005d40:	2300      	movs	r3, #0
 8005d42:	b510      	push	{r4, lr}
 8005d44:	4604      	mov	r4, r0
 8005d46:	e9c0 3300 	strd	r3, r3, [r0]
 8005d4a:	6083      	str	r3, [r0, #8]
 8005d4c:	8181      	strh	r1, [r0, #12]
 8005d4e:	6643      	str	r3, [r0, #100]	; 0x64
 8005d50:	81c2      	strh	r2, [r0, #14]
 8005d52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d56:	6183      	str	r3, [r0, #24]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	2208      	movs	r2, #8
 8005d5c:	305c      	adds	r0, #92	; 0x5c
 8005d5e:	f7ff fe12 	bl	8005986 <memset>
 8005d62:	4b05      	ldr	r3, [pc, #20]	; (8005d78 <std+0x38>)
 8005d64:	6263      	str	r3, [r4, #36]	; 0x24
 8005d66:	4b05      	ldr	r3, [pc, #20]	; (8005d7c <std+0x3c>)
 8005d68:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d6a:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <std+0x40>)
 8005d6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d6e:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <std+0x44>)
 8005d70:	6224      	str	r4, [r4, #32]
 8005d72:	6323      	str	r3, [r4, #48]	; 0x30
 8005d74:	bd10      	pop	{r4, pc}
 8005d76:	bf00      	nop
 8005d78:	0800610d 	.word	0x0800610d
 8005d7c:	0800612f 	.word	0x0800612f
 8005d80:	08006167 	.word	0x08006167
 8005d84:	0800618b 	.word	0x0800618b

08005d88 <_cleanup_r>:
 8005d88:	4901      	ldr	r1, [pc, #4]	; (8005d90 <_cleanup_r+0x8>)
 8005d8a:	f000 b885 	b.w	8005e98 <_fwalk_reent>
 8005d8e:	bf00      	nop
 8005d90:	08005ced 	.word	0x08005ced

08005d94 <__sfmoreglue>:
 8005d94:	b570      	push	{r4, r5, r6, lr}
 8005d96:	1e4a      	subs	r2, r1, #1
 8005d98:	2568      	movs	r5, #104	; 0x68
 8005d9a:	4355      	muls	r5, r2
 8005d9c:	460e      	mov	r6, r1
 8005d9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005da2:	f000 f949 	bl	8006038 <_malloc_r>
 8005da6:	4604      	mov	r4, r0
 8005da8:	b140      	cbz	r0, 8005dbc <__sfmoreglue+0x28>
 8005daa:	2100      	movs	r1, #0
 8005dac:	e9c0 1600 	strd	r1, r6, [r0]
 8005db0:	300c      	adds	r0, #12
 8005db2:	60a0      	str	r0, [r4, #8]
 8005db4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005db8:	f7ff fde5 	bl	8005986 <memset>
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	bd70      	pop	{r4, r5, r6, pc}

08005dc0 <__sinit>:
 8005dc0:	6983      	ldr	r3, [r0, #24]
 8005dc2:	b510      	push	{r4, lr}
 8005dc4:	4604      	mov	r4, r0
 8005dc6:	bb33      	cbnz	r3, 8005e16 <__sinit+0x56>
 8005dc8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005dcc:	6503      	str	r3, [r0, #80]	; 0x50
 8005dce:	4b12      	ldr	r3, [pc, #72]	; (8005e18 <__sinit+0x58>)
 8005dd0:	4a12      	ldr	r2, [pc, #72]	; (8005e1c <__sinit+0x5c>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6282      	str	r2, [r0, #40]	; 0x28
 8005dd6:	4298      	cmp	r0, r3
 8005dd8:	bf04      	itt	eq
 8005dda:	2301      	moveq	r3, #1
 8005ddc:	6183      	streq	r3, [r0, #24]
 8005dde:	f000 f81f 	bl	8005e20 <__sfp>
 8005de2:	6060      	str	r0, [r4, #4]
 8005de4:	4620      	mov	r0, r4
 8005de6:	f000 f81b 	bl	8005e20 <__sfp>
 8005dea:	60a0      	str	r0, [r4, #8]
 8005dec:	4620      	mov	r0, r4
 8005dee:	f000 f817 	bl	8005e20 <__sfp>
 8005df2:	2200      	movs	r2, #0
 8005df4:	60e0      	str	r0, [r4, #12]
 8005df6:	2104      	movs	r1, #4
 8005df8:	6860      	ldr	r0, [r4, #4]
 8005dfa:	f7ff ffa1 	bl	8005d40 <std>
 8005dfe:	2201      	movs	r2, #1
 8005e00:	2109      	movs	r1, #9
 8005e02:	68a0      	ldr	r0, [r4, #8]
 8005e04:	f7ff ff9c 	bl	8005d40 <std>
 8005e08:	2202      	movs	r2, #2
 8005e0a:	2112      	movs	r1, #18
 8005e0c:	68e0      	ldr	r0, [r4, #12]
 8005e0e:	f7ff ff97 	bl	8005d40 <std>
 8005e12:	2301      	movs	r3, #1
 8005e14:	61a3      	str	r3, [r4, #24]
 8005e16:	bd10      	pop	{r4, pc}
 8005e18:	080065bc 	.word	0x080065bc
 8005e1c:	08005d89 	.word	0x08005d89

08005e20 <__sfp>:
 8005e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e22:	4b1b      	ldr	r3, [pc, #108]	; (8005e90 <__sfp+0x70>)
 8005e24:	681e      	ldr	r6, [r3, #0]
 8005e26:	69b3      	ldr	r3, [r6, #24]
 8005e28:	4607      	mov	r7, r0
 8005e2a:	b913      	cbnz	r3, 8005e32 <__sfp+0x12>
 8005e2c:	4630      	mov	r0, r6
 8005e2e:	f7ff ffc7 	bl	8005dc0 <__sinit>
 8005e32:	3648      	adds	r6, #72	; 0x48
 8005e34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	d503      	bpl.n	8005e44 <__sfp+0x24>
 8005e3c:	6833      	ldr	r3, [r6, #0]
 8005e3e:	b133      	cbz	r3, 8005e4e <__sfp+0x2e>
 8005e40:	6836      	ldr	r6, [r6, #0]
 8005e42:	e7f7      	b.n	8005e34 <__sfp+0x14>
 8005e44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e48:	b16d      	cbz	r5, 8005e66 <__sfp+0x46>
 8005e4a:	3468      	adds	r4, #104	; 0x68
 8005e4c:	e7f4      	b.n	8005e38 <__sfp+0x18>
 8005e4e:	2104      	movs	r1, #4
 8005e50:	4638      	mov	r0, r7
 8005e52:	f7ff ff9f 	bl	8005d94 <__sfmoreglue>
 8005e56:	6030      	str	r0, [r6, #0]
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	d1f1      	bne.n	8005e40 <__sfp+0x20>
 8005e5c:	230c      	movs	r3, #12
 8005e5e:	603b      	str	r3, [r7, #0]
 8005e60:	4604      	mov	r4, r0
 8005e62:	4620      	mov	r0, r4
 8005e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e66:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <__sfp+0x74>)
 8005e68:	6665      	str	r5, [r4, #100]	; 0x64
 8005e6a:	e9c4 5500 	strd	r5, r5, [r4]
 8005e6e:	60a5      	str	r5, [r4, #8]
 8005e70:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005e74:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005e78:	2208      	movs	r2, #8
 8005e7a:	4629      	mov	r1, r5
 8005e7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e80:	f7ff fd81 	bl	8005986 <memset>
 8005e84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e8c:	e7e9      	b.n	8005e62 <__sfp+0x42>
 8005e8e:	bf00      	nop
 8005e90:	080065bc 	.word	0x080065bc
 8005e94:	ffff0001 	.word	0xffff0001

08005e98 <_fwalk_reent>:
 8005e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e9c:	4680      	mov	r8, r0
 8005e9e:	4689      	mov	r9, r1
 8005ea0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ea4:	2600      	movs	r6, #0
 8005ea6:	b914      	cbnz	r4, 8005eae <_fwalk_reent+0x16>
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005eb2:	3f01      	subs	r7, #1
 8005eb4:	d501      	bpl.n	8005eba <_fwalk_reent+0x22>
 8005eb6:	6824      	ldr	r4, [r4, #0]
 8005eb8:	e7f5      	b.n	8005ea6 <_fwalk_reent+0xe>
 8005eba:	89ab      	ldrh	r3, [r5, #12]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d907      	bls.n	8005ed0 <_fwalk_reent+0x38>
 8005ec0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	d003      	beq.n	8005ed0 <_fwalk_reent+0x38>
 8005ec8:	4629      	mov	r1, r5
 8005eca:	4640      	mov	r0, r8
 8005ecc:	47c8      	blx	r9
 8005ece:	4306      	orrs	r6, r0
 8005ed0:	3568      	adds	r5, #104	; 0x68
 8005ed2:	e7ee      	b.n	8005eb2 <_fwalk_reent+0x1a>

08005ed4 <__swhatbuf_r>:
 8005ed4:	b570      	push	{r4, r5, r6, lr}
 8005ed6:	460e      	mov	r6, r1
 8005ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005edc:	2900      	cmp	r1, #0
 8005ede:	b096      	sub	sp, #88	; 0x58
 8005ee0:	4614      	mov	r4, r2
 8005ee2:	461d      	mov	r5, r3
 8005ee4:	da07      	bge.n	8005ef6 <__swhatbuf_r+0x22>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	602b      	str	r3, [r5, #0]
 8005eea:	89b3      	ldrh	r3, [r6, #12]
 8005eec:	061a      	lsls	r2, r3, #24
 8005eee:	d410      	bmi.n	8005f12 <__swhatbuf_r+0x3e>
 8005ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ef4:	e00e      	b.n	8005f14 <__swhatbuf_r+0x40>
 8005ef6:	466a      	mov	r2, sp
 8005ef8:	f000 f96e 	bl	80061d8 <_fstat_r>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	dbf2      	blt.n	8005ee6 <__swhatbuf_r+0x12>
 8005f00:	9a01      	ldr	r2, [sp, #4]
 8005f02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f0a:	425a      	negs	r2, r3
 8005f0c:	415a      	adcs	r2, r3
 8005f0e:	602a      	str	r2, [r5, #0]
 8005f10:	e7ee      	b.n	8005ef0 <__swhatbuf_r+0x1c>
 8005f12:	2340      	movs	r3, #64	; 0x40
 8005f14:	2000      	movs	r0, #0
 8005f16:	6023      	str	r3, [r4, #0]
 8005f18:	b016      	add	sp, #88	; 0x58
 8005f1a:	bd70      	pop	{r4, r5, r6, pc}

08005f1c <__smakebuf_r>:
 8005f1c:	898b      	ldrh	r3, [r1, #12]
 8005f1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f20:	079d      	lsls	r5, r3, #30
 8005f22:	4606      	mov	r6, r0
 8005f24:	460c      	mov	r4, r1
 8005f26:	d507      	bpl.n	8005f38 <__smakebuf_r+0x1c>
 8005f28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	6123      	str	r3, [r4, #16]
 8005f30:	2301      	movs	r3, #1
 8005f32:	6163      	str	r3, [r4, #20]
 8005f34:	b002      	add	sp, #8
 8005f36:	bd70      	pop	{r4, r5, r6, pc}
 8005f38:	ab01      	add	r3, sp, #4
 8005f3a:	466a      	mov	r2, sp
 8005f3c:	f7ff ffca 	bl	8005ed4 <__swhatbuf_r>
 8005f40:	9900      	ldr	r1, [sp, #0]
 8005f42:	4605      	mov	r5, r0
 8005f44:	4630      	mov	r0, r6
 8005f46:	f000 f877 	bl	8006038 <_malloc_r>
 8005f4a:	b948      	cbnz	r0, 8005f60 <__smakebuf_r+0x44>
 8005f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f50:	059a      	lsls	r2, r3, #22
 8005f52:	d4ef      	bmi.n	8005f34 <__smakebuf_r+0x18>
 8005f54:	f023 0303 	bic.w	r3, r3, #3
 8005f58:	f043 0302 	orr.w	r3, r3, #2
 8005f5c:	81a3      	strh	r3, [r4, #12]
 8005f5e:	e7e3      	b.n	8005f28 <__smakebuf_r+0xc>
 8005f60:	4b0d      	ldr	r3, [pc, #52]	; (8005f98 <__smakebuf_r+0x7c>)
 8005f62:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f64:	89a3      	ldrh	r3, [r4, #12]
 8005f66:	6020      	str	r0, [r4, #0]
 8005f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f6c:	81a3      	strh	r3, [r4, #12]
 8005f6e:	9b00      	ldr	r3, [sp, #0]
 8005f70:	6163      	str	r3, [r4, #20]
 8005f72:	9b01      	ldr	r3, [sp, #4]
 8005f74:	6120      	str	r0, [r4, #16]
 8005f76:	b15b      	cbz	r3, 8005f90 <__smakebuf_r+0x74>
 8005f78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	f000 f93d 	bl	80061fc <_isatty_r>
 8005f82:	b128      	cbz	r0, 8005f90 <__smakebuf_r+0x74>
 8005f84:	89a3      	ldrh	r3, [r4, #12]
 8005f86:	f023 0303 	bic.w	r3, r3, #3
 8005f8a:	f043 0301 	orr.w	r3, r3, #1
 8005f8e:	81a3      	strh	r3, [r4, #12]
 8005f90:	89a3      	ldrh	r3, [r4, #12]
 8005f92:	431d      	orrs	r5, r3
 8005f94:	81a5      	strh	r5, [r4, #12]
 8005f96:	e7cd      	b.n	8005f34 <__smakebuf_r+0x18>
 8005f98:	08005d89 	.word	0x08005d89

08005f9c <_free_r>:
 8005f9c:	b538      	push	{r3, r4, r5, lr}
 8005f9e:	4605      	mov	r5, r0
 8005fa0:	2900      	cmp	r1, #0
 8005fa2:	d045      	beq.n	8006030 <_free_r+0x94>
 8005fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fa8:	1f0c      	subs	r4, r1, #4
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	bfb8      	it	lt
 8005fae:	18e4      	addlt	r4, r4, r3
 8005fb0:	f000 f946 	bl	8006240 <__malloc_lock>
 8005fb4:	4a1f      	ldr	r2, [pc, #124]	; (8006034 <_free_r+0x98>)
 8005fb6:	6813      	ldr	r3, [r2, #0]
 8005fb8:	4610      	mov	r0, r2
 8005fba:	b933      	cbnz	r3, 8005fca <_free_r+0x2e>
 8005fbc:	6063      	str	r3, [r4, #4]
 8005fbe:	6014      	str	r4, [r2, #0]
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fc6:	f000 b93c 	b.w	8006242 <__malloc_unlock>
 8005fca:	42a3      	cmp	r3, r4
 8005fcc:	d90c      	bls.n	8005fe8 <_free_r+0x4c>
 8005fce:	6821      	ldr	r1, [r4, #0]
 8005fd0:	1862      	adds	r2, r4, r1
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	bf04      	itt	eq
 8005fd6:	681a      	ldreq	r2, [r3, #0]
 8005fd8:	685b      	ldreq	r3, [r3, #4]
 8005fda:	6063      	str	r3, [r4, #4]
 8005fdc:	bf04      	itt	eq
 8005fde:	1852      	addeq	r2, r2, r1
 8005fe0:	6022      	streq	r2, [r4, #0]
 8005fe2:	6004      	str	r4, [r0, #0]
 8005fe4:	e7ec      	b.n	8005fc0 <_free_r+0x24>
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	b10a      	cbz	r2, 8005ff0 <_free_r+0x54>
 8005fec:	42a2      	cmp	r2, r4
 8005fee:	d9fa      	bls.n	8005fe6 <_free_r+0x4a>
 8005ff0:	6819      	ldr	r1, [r3, #0]
 8005ff2:	1858      	adds	r0, r3, r1
 8005ff4:	42a0      	cmp	r0, r4
 8005ff6:	d10b      	bne.n	8006010 <_free_r+0x74>
 8005ff8:	6820      	ldr	r0, [r4, #0]
 8005ffa:	4401      	add	r1, r0
 8005ffc:	1858      	adds	r0, r3, r1
 8005ffe:	4282      	cmp	r2, r0
 8006000:	6019      	str	r1, [r3, #0]
 8006002:	d1dd      	bne.n	8005fc0 <_free_r+0x24>
 8006004:	6810      	ldr	r0, [r2, #0]
 8006006:	6852      	ldr	r2, [r2, #4]
 8006008:	605a      	str	r2, [r3, #4]
 800600a:	4401      	add	r1, r0
 800600c:	6019      	str	r1, [r3, #0]
 800600e:	e7d7      	b.n	8005fc0 <_free_r+0x24>
 8006010:	d902      	bls.n	8006018 <_free_r+0x7c>
 8006012:	230c      	movs	r3, #12
 8006014:	602b      	str	r3, [r5, #0]
 8006016:	e7d3      	b.n	8005fc0 <_free_r+0x24>
 8006018:	6820      	ldr	r0, [r4, #0]
 800601a:	1821      	adds	r1, r4, r0
 800601c:	428a      	cmp	r2, r1
 800601e:	bf04      	itt	eq
 8006020:	6811      	ldreq	r1, [r2, #0]
 8006022:	6852      	ldreq	r2, [r2, #4]
 8006024:	6062      	str	r2, [r4, #4]
 8006026:	bf04      	itt	eq
 8006028:	1809      	addeq	r1, r1, r0
 800602a:	6021      	streq	r1, [r4, #0]
 800602c:	605c      	str	r4, [r3, #4]
 800602e:	e7c7      	b.n	8005fc0 <_free_r+0x24>
 8006030:	bd38      	pop	{r3, r4, r5, pc}
 8006032:	bf00      	nop
 8006034:	200012f4 	.word	0x200012f4

08006038 <_malloc_r>:
 8006038:	b570      	push	{r4, r5, r6, lr}
 800603a:	1ccd      	adds	r5, r1, #3
 800603c:	f025 0503 	bic.w	r5, r5, #3
 8006040:	3508      	adds	r5, #8
 8006042:	2d0c      	cmp	r5, #12
 8006044:	bf38      	it	cc
 8006046:	250c      	movcc	r5, #12
 8006048:	2d00      	cmp	r5, #0
 800604a:	4606      	mov	r6, r0
 800604c:	db01      	blt.n	8006052 <_malloc_r+0x1a>
 800604e:	42a9      	cmp	r1, r5
 8006050:	d903      	bls.n	800605a <_malloc_r+0x22>
 8006052:	230c      	movs	r3, #12
 8006054:	6033      	str	r3, [r6, #0]
 8006056:	2000      	movs	r0, #0
 8006058:	bd70      	pop	{r4, r5, r6, pc}
 800605a:	f000 f8f1 	bl	8006240 <__malloc_lock>
 800605e:	4a21      	ldr	r2, [pc, #132]	; (80060e4 <_malloc_r+0xac>)
 8006060:	6814      	ldr	r4, [r2, #0]
 8006062:	4621      	mov	r1, r4
 8006064:	b991      	cbnz	r1, 800608c <_malloc_r+0x54>
 8006066:	4c20      	ldr	r4, [pc, #128]	; (80060e8 <_malloc_r+0xb0>)
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	b91b      	cbnz	r3, 8006074 <_malloc_r+0x3c>
 800606c:	4630      	mov	r0, r6
 800606e:	f000 f83d 	bl	80060ec <_sbrk_r>
 8006072:	6020      	str	r0, [r4, #0]
 8006074:	4629      	mov	r1, r5
 8006076:	4630      	mov	r0, r6
 8006078:	f000 f838 	bl	80060ec <_sbrk_r>
 800607c:	1c43      	adds	r3, r0, #1
 800607e:	d124      	bne.n	80060ca <_malloc_r+0x92>
 8006080:	230c      	movs	r3, #12
 8006082:	6033      	str	r3, [r6, #0]
 8006084:	4630      	mov	r0, r6
 8006086:	f000 f8dc 	bl	8006242 <__malloc_unlock>
 800608a:	e7e4      	b.n	8006056 <_malloc_r+0x1e>
 800608c:	680b      	ldr	r3, [r1, #0]
 800608e:	1b5b      	subs	r3, r3, r5
 8006090:	d418      	bmi.n	80060c4 <_malloc_r+0x8c>
 8006092:	2b0b      	cmp	r3, #11
 8006094:	d90f      	bls.n	80060b6 <_malloc_r+0x7e>
 8006096:	600b      	str	r3, [r1, #0]
 8006098:	50cd      	str	r5, [r1, r3]
 800609a:	18cc      	adds	r4, r1, r3
 800609c:	4630      	mov	r0, r6
 800609e:	f000 f8d0 	bl	8006242 <__malloc_unlock>
 80060a2:	f104 000b 	add.w	r0, r4, #11
 80060a6:	1d23      	adds	r3, r4, #4
 80060a8:	f020 0007 	bic.w	r0, r0, #7
 80060ac:	1ac3      	subs	r3, r0, r3
 80060ae:	d0d3      	beq.n	8006058 <_malloc_r+0x20>
 80060b0:	425a      	negs	r2, r3
 80060b2:	50e2      	str	r2, [r4, r3]
 80060b4:	e7d0      	b.n	8006058 <_malloc_r+0x20>
 80060b6:	428c      	cmp	r4, r1
 80060b8:	684b      	ldr	r3, [r1, #4]
 80060ba:	bf16      	itet	ne
 80060bc:	6063      	strne	r3, [r4, #4]
 80060be:	6013      	streq	r3, [r2, #0]
 80060c0:	460c      	movne	r4, r1
 80060c2:	e7eb      	b.n	800609c <_malloc_r+0x64>
 80060c4:	460c      	mov	r4, r1
 80060c6:	6849      	ldr	r1, [r1, #4]
 80060c8:	e7cc      	b.n	8006064 <_malloc_r+0x2c>
 80060ca:	1cc4      	adds	r4, r0, #3
 80060cc:	f024 0403 	bic.w	r4, r4, #3
 80060d0:	42a0      	cmp	r0, r4
 80060d2:	d005      	beq.n	80060e0 <_malloc_r+0xa8>
 80060d4:	1a21      	subs	r1, r4, r0
 80060d6:	4630      	mov	r0, r6
 80060d8:	f000 f808 	bl	80060ec <_sbrk_r>
 80060dc:	3001      	adds	r0, #1
 80060de:	d0cf      	beq.n	8006080 <_malloc_r+0x48>
 80060e0:	6025      	str	r5, [r4, #0]
 80060e2:	e7db      	b.n	800609c <_malloc_r+0x64>
 80060e4:	200012f4 	.word	0x200012f4
 80060e8:	200012f8 	.word	0x200012f8

080060ec <_sbrk_r>:
 80060ec:	b538      	push	{r3, r4, r5, lr}
 80060ee:	4c06      	ldr	r4, [pc, #24]	; (8006108 <_sbrk_r+0x1c>)
 80060f0:	2300      	movs	r3, #0
 80060f2:	4605      	mov	r5, r0
 80060f4:	4608      	mov	r0, r1
 80060f6:	6023      	str	r3, [r4, #0]
 80060f8:	f7fa fa08 	bl	800050c <_sbrk>
 80060fc:	1c43      	adds	r3, r0, #1
 80060fe:	d102      	bne.n	8006106 <_sbrk_r+0x1a>
 8006100:	6823      	ldr	r3, [r4, #0]
 8006102:	b103      	cbz	r3, 8006106 <_sbrk_r+0x1a>
 8006104:	602b      	str	r3, [r5, #0]
 8006106:	bd38      	pop	{r3, r4, r5, pc}
 8006108:	20001598 	.word	0x20001598

0800610c <__sread>:
 800610c:	b510      	push	{r4, lr}
 800610e:	460c      	mov	r4, r1
 8006110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006114:	f000 f896 	bl	8006244 <_read_r>
 8006118:	2800      	cmp	r0, #0
 800611a:	bfab      	itete	ge
 800611c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800611e:	89a3      	ldrhlt	r3, [r4, #12]
 8006120:	181b      	addge	r3, r3, r0
 8006122:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006126:	bfac      	ite	ge
 8006128:	6563      	strge	r3, [r4, #84]	; 0x54
 800612a:	81a3      	strhlt	r3, [r4, #12]
 800612c:	bd10      	pop	{r4, pc}

0800612e <__swrite>:
 800612e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006132:	461f      	mov	r7, r3
 8006134:	898b      	ldrh	r3, [r1, #12]
 8006136:	05db      	lsls	r3, r3, #23
 8006138:	4605      	mov	r5, r0
 800613a:	460c      	mov	r4, r1
 800613c:	4616      	mov	r6, r2
 800613e:	d505      	bpl.n	800614c <__swrite+0x1e>
 8006140:	2302      	movs	r3, #2
 8006142:	2200      	movs	r2, #0
 8006144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006148:	f000 f868 	bl	800621c <_lseek_r>
 800614c:	89a3      	ldrh	r3, [r4, #12]
 800614e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006152:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006156:	81a3      	strh	r3, [r4, #12]
 8006158:	4632      	mov	r2, r6
 800615a:	463b      	mov	r3, r7
 800615c:	4628      	mov	r0, r5
 800615e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006162:	f000 b817 	b.w	8006194 <_write_r>

08006166 <__sseek>:
 8006166:	b510      	push	{r4, lr}
 8006168:	460c      	mov	r4, r1
 800616a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800616e:	f000 f855 	bl	800621c <_lseek_r>
 8006172:	1c43      	adds	r3, r0, #1
 8006174:	89a3      	ldrh	r3, [r4, #12]
 8006176:	bf15      	itete	ne
 8006178:	6560      	strne	r0, [r4, #84]	; 0x54
 800617a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800617e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006182:	81a3      	strheq	r3, [r4, #12]
 8006184:	bf18      	it	ne
 8006186:	81a3      	strhne	r3, [r4, #12]
 8006188:	bd10      	pop	{r4, pc}

0800618a <__sclose>:
 800618a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800618e:	f000 b813 	b.w	80061b8 <_close_r>
	...

08006194 <_write_r>:
 8006194:	b538      	push	{r3, r4, r5, lr}
 8006196:	4c07      	ldr	r4, [pc, #28]	; (80061b4 <_write_r+0x20>)
 8006198:	4605      	mov	r5, r0
 800619a:	4608      	mov	r0, r1
 800619c:	4611      	mov	r1, r2
 800619e:	2200      	movs	r2, #0
 80061a0:	6022      	str	r2, [r4, #0]
 80061a2:	461a      	mov	r2, r3
 80061a4:	f7fe fd72 	bl	8004c8c <_write>
 80061a8:	1c43      	adds	r3, r0, #1
 80061aa:	d102      	bne.n	80061b2 <_write_r+0x1e>
 80061ac:	6823      	ldr	r3, [r4, #0]
 80061ae:	b103      	cbz	r3, 80061b2 <_write_r+0x1e>
 80061b0:	602b      	str	r3, [r5, #0]
 80061b2:	bd38      	pop	{r3, r4, r5, pc}
 80061b4:	20001598 	.word	0x20001598

080061b8 <_close_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	4c06      	ldr	r4, [pc, #24]	; (80061d4 <_close_r+0x1c>)
 80061bc:	2300      	movs	r3, #0
 80061be:	4605      	mov	r5, r0
 80061c0:	4608      	mov	r0, r1
 80061c2:	6023      	str	r3, [r4, #0]
 80061c4:	f7fa f9bc 	bl	8000540 <_close>
 80061c8:	1c43      	adds	r3, r0, #1
 80061ca:	d102      	bne.n	80061d2 <_close_r+0x1a>
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	b103      	cbz	r3, 80061d2 <_close_r+0x1a>
 80061d0:	602b      	str	r3, [r5, #0]
 80061d2:	bd38      	pop	{r3, r4, r5, pc}
 80061d4:	20001598 	.word	0x20001598

080061d8 <_fstat_r>:
 80061d8:	b538      	push	{r3, r4, r5, lr}
 80061da:	4c07      	ldr	r4, [pc, #28]	; (80061f8 <_fstat_r+0x20>)
 80061dc:	2300      	movs	r3, #0
 80061de:	4605      	mov	r5, r0
 80061e0:	4608      	mov	r0, r1
 80061e2:	4611      	mov	r1, r2
 80061e4:	6023      	str	r3, [r4, #0]
 80061e6:	f7fa f9ae 	bl	8000546 <_fstat>
 80061ea:	1c43      	adds	r3, r0, #1
 80061ec:	d102      	bne.n	80061f4 <_fstat_r+0x1c>
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	b103      	cbz	r3, 80061f4 <_fstat_r+0x1c>
 80061f2:	602b      	str	r3, [r5, #0]
 80061f4:	bd38      	pop	{r3, r4, r5, pc}
 80061f6:	bf00      	nop
 80061f8:	20001598 	.word	0x20001598

080061fc <_isatty_r>:
 80061fc:	b538      	push	{r3, r4, r5, lr}
 80061fe:	4c06      	ldr	r4, [pc, #24]	; (8006218 <_isatty_r+0x1c>)
 8006200:	2300      	movs	r3, #0
 8006202:	4605      	mov	r5, r0
 8006204:	4608      	mov	r0, r1
 8006206:	6023      	str	r3, [r4, #0]
 8006208:	f7fa f9a2 	bl	8000550 <_isatty>
 800620c:	1c43      	adds	r3, r0, #1
 800620e:	d102      	bne.n	8006216 <_isatty_r+0x1a>
 8006210:	6823      	ldr	r3, [r4, #0]
 8006212:	b103      	cbz	r3, 8006216 <_isatty_r+0x1a>
 8006214:	602b      	str	r3, [r5, #0]
 8006216:	bd38      	pop	{r3, r4, r5, pc}
 8006218:	20001598 	.word	0x20001598

0800621c <_lseek_r>:
 800621c:	b538      	push	{r3, r4, r5, lr}
 800621e:	4c07      	ldr	r4, [pc, #28]	; (800623c <_lseek_r+0x20>)
 8006220:	4605      	mov	r5, r0
 8006222:	4608      	mov	r0, r1
 8006224:	4611      	mov	r1, r2
 8006226:	2200      	movs	r2, #0
 8006228:	6022      	str	r2, [r4, #0]
 800622a:	461a      	mov	r2, r3
 800622c:	f7fa f992 	bl	8000554 <_lseek>
 8006230:	1c43      	adds	r3, r0, #1
 8006232:	d102      	bne.n	800623a <_lseek_r+0x1e>
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	b103      	cbz	r3, 800623a <_lseek_r+0x1e>
 8006238:	602b      	str	r3, [r5, #0]
 800623a:	bd38      	pop	{r3, r4, r5, pc}
 800623c:	20001598 	.word	0x20001598

08006240 <__malloc_lock>:
 8006240:	4770      	bx	lr

08006242 <__malloc_unlock>:
 8006242:	4770      	bx	lr

08006244 <_read_r>:
 8006244:	b538      	push	{r3, r4, r5, lr}
 8006246:	4c07      	ldr	r4, [pc, #28]	; (8006264 <_read_r+0x20>)
 8006248:	4605      	mov	r5, r0
 800624a:	4608      	mov	r0, r1
 800624c:	4611      	mov	r1, r2
 800624e:	2200      	movs	r2, #0
 8006250:	6022      	str	r2, [r4, #0]
 8006252:	461a      	mov	r2, r3
 8006254:	f7fa f94b 	bl	80004ee <_read>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d102      	bne.n	8006262 <_read_r+0x1e>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	b103      	cbz	r3, 8006262 <_read_r+0x1e>
 8006260:	602b      	str	r3, [r5, #0]
 8006262:	bd38      	pop	{r3, r4, r5, pc}
 8006264:	20001598 	.word	0x20001598

08006268 <_init>:
 8006268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800626a:	bf00      	nop
 800626c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800626e:	bc08      	pop	{r3}
 8006270:	469e      	mov	lr, r3
 8006272:	4770      	bx	lr

08006274 <_fini>:
 8006274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006276:	bf00      	nop
 8006278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800627a:	bc08      	pop	{r3}
 800627c:	469e      	mov	lr, r3
 800627e:	4770      	bx	lr
