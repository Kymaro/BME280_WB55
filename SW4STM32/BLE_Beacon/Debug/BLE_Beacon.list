
BLE_Beacon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c54  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08005d94  08005d94  00015d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006164  08006164  00016164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800616c  0800616c  0001616c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006170  08006170  00016170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  20000004  08006174  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  2000009c  0800620c  0002009c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000031  20000138  080062a5  00020138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  2000016c  080062d6  0002016c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001450  20000180  080062e7  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00001400  200015d0  080062e7  000215d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002017d  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001a8  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000888  200301d0  200301d0  00030000  2**2
                  ALLOC
 16 .debug_line   000265d7  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_info   0004486c  00000000  00000000  00046784  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00008439  00000000  00000000  0008aff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00001de8  00000000  00000000  00093430  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000f8ea1  00000000  00000000  00095218  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 000027a0  00000000  00000000  0018e0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_loc    000153fa  00000000  00000000  00190860  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0002da33  00000000  00000000  001a5c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  001d368d  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00005f3c  00000000  00000000  001d3708  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000180 	.word	0x20000180
 800015c:	00000000 	.word	0x00000000
 8000160:	08005d7c 	.word	0x08005d7c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000184 	.word	0x20000184
 800017c:	08005d7c 	.word	0x08005d7c

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b972 	b.w	800047c <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	4604      	mov	r4, r0
 80001b8:	4688      	mov	r8, r1
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d14b      	bne.n	8000256 <__udivmoddi4+0xa6>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4615      	mov	r5, r2
 80001c2:	d967      	bls.n	8000294 <__udivmoddi4+0xe4>
 80001c4:	fab2 f282 	clz	r2, r2
 80001c8:	b14a      	cbz	r2, 80001de <__udivmoddi4+0x2e>
 80001ca:	f1c2 0720 	rsb	r7, r2, #32
 80001ce:	fa01 f302 	lsl.w	r3, r1, r2
 80001d2:	fa20 f707 	lsr.w	r7, r0, r7
 80001d6:	4095      	lsls	r5, r2
 80001d8:	ea47 0803 	orr.w	r8, r7, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001e2:	0c23      	lsrs	r3, r4, #16
 80001e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80001e8:	fa1f fc85 	uxth.w	ip, r5
 80001ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80001f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f4:	fb07 f10c 	mul.w	r1, r7, ip
 80001f8:	4299      	cmp	r1, r3
 80001fa:	d909      	bls.n	8000210 <__udivmoddi4+0x60>
 80001fc:	18eb      	adds	r3, r5, r3
 80001fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000202:	f080 811b 	bcs.w	800043c <__udivmoddi4+0x28c>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 8118 	bls.w	800043c <__udivmoddi4+0x28c>
 800020c:	3f02      	subs	r7, #2
 800020e:	442b      	add	r3, r5
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0fe 	udiv	r0, r3, lr
 8000218:	fb0e 3310 	mls	r3, lr, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 fc0c 	mul.w	ip, r0, ip
 8000224:	45a4      	cmp	ip, r4
 8000226:	d909      	bls.n	800023c <__udivmoddi4+0x8c>
 8000228:	192c      	adds	r4, r5, r4
 800022a:	f100 33ff 	add.w	r3, r0, #4294967295
 800022e:	f080 8107 	bcs.w	8000440 <__udivmoddi4+0x290>
 8000232:	45a4      	cmp	ip, r4
 8000234:	f240 8104 	bls.w	8000440 <__udivmoddi4+0x290>
 8000238:	3802      	subs	r0, #2
 800023a:	442c      	add	r4, r5
 800023c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000240:	eba4 040c 	sub.w	r4, r4, ip
 8000244:	2700      	movs	r7, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa0>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	4639      	mov	r1, r7
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d909      	bls.n	800026e <__udivmoddi4+0xbe>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80eb 	beq.w	8000436 <__udivmoddi4+0x286>
 8000260:	2700      	movs	r7, #0
 8000262:	e9c6 0100 	strd	r0, r1, [r6]
 8000266:	4638      	mov	r0, r7
 8000268:	4639      	mov	r1, r7
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f783 	clz	r7, r3
 8000272:	2f00      	cmp	r7, #0
 8000274:	d147      	bne.n	8000306 <__udivmoddi4+0x156>
 8000276:	428b      	cmp	r3, r1
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd0>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fa 	bhi.w	8000474 <__udivmoddi4+0x2c4>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb61 0303 	sbc.w	r3, r1, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e0      	beq.n	8000250 <__udivmoddi4+0xa0>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7dd      	b.n	8000250 <__udivmoddi4+0xa0>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xe8>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 808f 	bne.w	80003c0 <__udivmoddi4+0x210>
 80002a2:	1b49      	subs	r1, r1, r5
 80002a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a8:	fa1f f885 	uxth.w	r8, r5
 80002ac:	2701      	movs	r7, #1
 80002ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80002b2:	0c23      	lsrs	r3, r4, #16
 80002b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb08 f10c 	mul.w	r1, r8, ip
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d907      	bls.n	80002d4 <__udivmoddi4+0x124>
 80002c4:	18eb      	adds	r3, r5, r3
 80002c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x122>
 80002cc:	4299      	cmp	r1, r3
 80002ce:	f200 80cd 	bhi.w	800046c <__udivmoddi4+0x2bc>
 80002d2:	4684      	mov	ip, r0
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	b2a3      	uxth	r3, r4
 80002d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80002e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002e4:	fb08 f800 	mul.w	r8, r8, r0
 80002e8:	45a0      	cmp	r8, r4
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0x14c>
 80002ec:	192c      	adds	r4, r5, r4
 80002ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14a>
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	f200 80b6 	bhi.w	8000466 <__udivmoddi4+0x2b6>
 80002fa:	4618      	mov	r0, r3
 80002fc:	eba4 0408 	sub.w	r4, r4, r8
 8000300:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000304:	e79f      	b.n	8000246 <__udivmoddi4+0x96>
 8000306:	f1c7 0c20 	rsb	ip, r7, #32
 800030a:	40bb      	lsls	r3, r7
 800030c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000310:	ea4e 0e03 	orr.w	lr, lr, r3
 8000314:	fa01 f407 	lsl.w	r4, r1, r7
 8000318:	fa20 f50c 	lsr.w	r5, r0, ip
 800031c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000320:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000324:	4325      	orrs	r5, r4
 8000326:	fbb3 f9f8 	udiv	r9, r3, r8
 800032a:	0c2c      	lsrs	r4, r5, #16
 800032c:	fb08 3319 	mls	r3, r8, r9, r3
 8000330:	fa1f fa8e 	uxth.w	sl, lr
 8000334:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000338:	fb09 f40a 	mul.w	r4, r9, sl
 800033c:	429c      	cmp	r4, r3
 800033e:	fa02 f207 	lsl.w	r2, r2, r7
 8000342:	fa00 f107 	lsl.w	r1, r0, r7
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b0>
 8000348:	eb1e 0303 	adds.w	r3, lr, r3
 800034c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000350:	f080 8087 	bcs.w	8000462 <__udivmoddi4+0x2b2>
 8000354:	429c      	cmp	r4, r3
 8000356:	f240 8084 	bls.w	8000462 <__udivmoddi4+0x2b2>
 800035a:	f1a9 0902 	sub.w	r9, r9, #2
 800035e:	4473      	add	r3, lr
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	b2ad      	uxth	r5, r5
 8000364:	fbb3 f0f8 	udiv	r0, r3, r8
 8000368:	fb08 3310 	mls	r3, r8, r0, r3
 800036c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000370:	fb00 fa0a 	mul.w	sl, r0, sl
 8000374:	45a2      	cmp	sl, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1da>
 8000378:	eb1e 0404 	adds.w	r4, lr, r4
 800037c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000380:	d26b      	bcs.n	800045a <__udivmoddi4+0x2aa>
 8000382:	45a2      	cmp	sl, r4
 8000384:	d969      	bls.n	800045a <__udivmoddi4+0x2aa>
 8000386:	3802      	subs	r0, #2
 8000388:	4474      	add	r4, lr
 800038a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038e:	fba0 8902 	umull	r8, r9, r0, r2
 8000392:	eba4 040a 	sub.w	r4, r4, sl
 8000396:	454c      	cmp	r4, r9
 8000398:	46c2      	mov	sl, r8
 800039a:	464b      	mov	r3, r9
 800039c:	d354      	bcc.n	8000448 <__udivmoddi4+0x298>
 800039e:	d051      	beq.n	8000444 <__udivmoddi4+0x294>
 80003a0:	2e00      	cmp	r6, #0
 80003a2:	d069      	beq.n	8000478 <__udivmoddi4+0x2c8>
 80003a4:	ebb1 050a 	subs.w	r5, r1, sl
 80003a8:	eb64 0403 	sbc.w	r4, r4, r3
 80003ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003b0:	40fd      	lsrs	r5, r7
 80003b2:	40fc      	lsrs	r4, r7
 80003b4:	ea4c 0505 	orr.w	r5, ip, r5
 80003b8:	e9c6 5400 	strd	r5, r4, [r6]
 80003bc:	2700      	movs	r7, #0
 80003be:	e747      	b.n	8000250 <__udivmoddi4+0xa0>
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f703 	lsr.w	r7, r0, r3
 80003c8:	4095      	lsls	r5, r2
 80003ca:	fa01 f002 	lsl.w	r0, r1, r2
 80003ce:	fa21 f303 	lsr.w	r3, r1, r3
 80003d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d6:	4338      	orrs	r0, r7
 80003d8:	0c01      	lsrs	r1, r0, #16
 80003da:	fbb3 f7fe 	udiv	r7, r3, lr
 80003de:	fa1f f885 	uxth.w	r8, r5
 80003e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80003e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ea:	fb07 f308 	mul.w	r3, r7, r8
 80003ee:	428b      	cmp	r3, r1
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x256>
 80003f6:	1869      	adds	r1, r5, r1
 80003f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80003fc:	d22f      	bcs.n	800045e <__udivmoddi4+0x2ae>
 80003fe:	428b      	cmp	r3, r1
 8000400:	d92d      	bls.n	800045e <__udivmoddi4+0x2ae>
 8000402:	3f02      	subs	r7, #2
 8000404:	4429      	add	r1, r5
 8000406:	1acb      	subs	r3, r1, r3
 8000408:	b281      	uxth	r1, r0
 800040a:	fbb3 f0fe 	udiv	r0, r3, lr
 800040e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000412:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000416:	fb00 f308 	mul.w	r3, r0, r8
 800041a:	428b      	cmp	r3, r1
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x27e>
 800041e:	1869      	adds	r1, r5, r1
 8000420:	f100 3cff 	add.w	ip, r0, #4294967295
 8000424:	d217      	bcs.n	8000456 <__udivmoddi4+0x2a6>
 8000426:	428b      	cmp	r3, r1
 8000428:	d915      	bls.n	8000456 <__udivmoddi4+0x2a6>
 800042a:	3802      	subs	r0, #2
 800042c:	4429      	add	r1, r5
 800042e:	1ac9      	subs	r1, r1, r3
 8000430:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000434:	e73b      	b.n	80002ae <__udivmoddi4+0xfe>
 8000436:	4637      	mov	r7, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e709      	b.n	8000250 <__udivmoddi4+0xa0>
 800043c:	4607      	mov	r7, r0
 800043e:	e6e7      	b.n	8000210 <__udivmoddi4+0x60>
 8000440:	4618      	mov	r0, r3
 8000442:	e6fb      	b.n	800023c <__udivmoddi4+0x8c>
 8000444:	4541      	cmp	r1, r8
 8000446:	d2ab      	bcs.n	80003a0 <__udivmoddi4+0x1f0>
 8000448:	ebb8 0a02 	subs.w	sl, r8, r2
 800044c:	eb69 020e 	sbc.w	r2, r9, lr
 8000450:	3801      	subs	r0, #1
 8000452:	4613      	mov	r3, r2
 8000454:	e7a4      	b.n	80003a0 <__udivmoddi4+0x1f0>
 8000456:	4660      	mov	r0, ip
 8000458:	e7e9      	b.n	800042e <__udivmoddi4+0x27e>
 800045a:	4618      	mov	r0, r3
 800045c:	e795      	b.n	800038a <__udivmoddi4+0x1da>
 800045e:	4667      	mov	r7, ip
 8000460:	e7d1      	b.n	8000406 <__udivmoddi4+0x256>
 8000462:	4681      	mov	r9, r0
 8000464:	e77c      	b.n	8000360 <__udivmoddi4+0x1b0>
 8000466:	3802      	subs	r0, #2
 8000468:	442c      	add	r4, r5
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0x14c>
 800046c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000470:	442b      	add	r3, r5
 8000472:	e72f      	b.n	80002d4 <__udivmoddi4+0x124>
 8000474:	4638      	mov	r0, r7
 8000476:	e708      	b.n	800028a <__udivmoddi4+0xda>
 8000478:	4637      	mov	r7, r6
 800047a:	e6e9      	b.n	8000250 <__udivmoddi4+0xa0>

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000480:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000482:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000484:	3304      	adds	r3, #4

08000486 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000486:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000488:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800048a:	d3f9      	bcc.n	8000480 <CopyDataInit>
  bx lr
 800048c:	4770      	bx	lr

0800048e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800048e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000490:	3004      	adds	r0, #4

08000492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000492:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000494:	d3fb      	bcc.n	800048e <FillZerobss>
  bx lr
 8000496:	4770      	bx	lr

08000498 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000498:	480c      	ldr	r0, [pc, #48]	; (80004cc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800049a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800049c:	480c      	ldr	r0, [pc, #48]	; (80004d0 <LoopForever+0x8>)
 800049e:	490d      	ldr	r1, [pc, #52]	; (80004d4 <LoopForever+0xc>)
 80004a0:	4a0d      	ldr	r2, [pc, #52]	; (80004d8 <LoopForever+0x10>)
 80004a2:	2300      	movs	r3, #0
 80004a4:	f7ff ffef 	bl	8000486 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80004a8:	480c      	ldr	r0, [pc, #48]	; (80004dc <LoopForever+0x14>)
 80004aa:	490d      	ldr	r1, [pc, #52]	; (80004e0 <LoopForever+0x18>)
 80004ac:	2300      	movs	r3, #0
 80004ae:	f7ff fff0 	bl	8000492 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80004b2:	480c      	ldr	r0, [pc, #48]	; (80004e4 <LoopForever+0x1c>)
 80004b4:	490c      	ldr	r1, [pc, #48]	; (80004e8 <LoopForever+0x20>)
 80004b6:	2300      	movs	r3, #0
 80004b8:	f7ff ffeb 	bl	8000492 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004bc:	f001 fb9a 	bl	8001bf4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80004c0:	f004 ffbc 	bl	800543c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80004c4:	f000 fd1c 	bl	8000f00 <main>

080004c8 <LoopForever>:

LoopForever:
  b LoopForever
 80004c8:	e7fe      	b.n	80004c8 <LoopForever>
 80004ca:	0000      	.short	0x0000
  ldr   r0, =_estack
 80004cc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80004d0:	20000004 	.word	0x20000004
 80004d4:	2000009c 	.word	0x2000009c
 80004d8:	08006174 	.word	0x08006174
  INIT_BSS _sbss, _ebss
 80004dc:	20000180 	.word	0x20000180
 80004e0:	200015d0 	.word	0x200015d0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80004e4:	200301d0 	.word	0x200301d0
 80004e8:	20030a58 	.word	0x20030a58

080004ec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004ec:	e7fe      	b.n	80004ec <ADC1_IRQHandler>

080004ee <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004ee:	b570      	push	{r4, r5, r6, lr}
 80004f0:	460e      	mov	r6, r1
 80004f2:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f4:	460c      	mov	r4, r1
 80004f6:	1ba3      	subs	r3, r4, r6
 80004f8:	429d      	cmp	r5, r3
 80004fa:	dc01      	bgt.n	8000500 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80004fc:	4628      	mov	r0, r5
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8000500:	f3af 8000 	nop.w
 8000504:	f804 0b01 	strb.w	r0, [r4], #1
 8000508:	e7f5      	b.n	80004f6 <_read+0x8>
	...

0800050c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800050c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800050e:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <_sbrk+0x2c>)
 8000510:	6819      	ldr	r1, [r3, #0]
{
 8000512:	4602      	mov	r2, r0
	if (heap_end == 0)
 8000514:	b909      	cbnz	r1, 800051a <_sbrk+0xe>
		heap_end = &end;
 8000516:	4909      	ldr	r1, [pc, #36]	; (800053c <_sbrk+0x30>)
 8000518:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800051a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800051c:	4669      	mov	r1, sp
 800051e:	4402      	add	r2, r0
 8000520:	428a      	cmp	r2, r1
 8000522:	d906      	bls.n	8000532 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000524:	f004 ff84 	bl	8005430 <__errno>
 8000528:	230c      	movs	r3, #12
 800052a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800052c:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8000530:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8000532:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8000534:	e7fc      	b.n	8000530 <_sbrk+0x24>
 8000536:	bf00      	nop
 8000538:	2000019c 	.word	0x2000019c
 800053c:	200015d0 	.word	0x200015d0

08000540 <_close>:

int _close(int file)
{
	return -1;
}
 8000540:	f04f 30ff 	mov.w	r0, #4294967295
 8000544:	4770      	bx	lr

08000546 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000546:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800054a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800054c:	2000      	movs	r0, #0
 800054e:	4770      	bx	lr

08000550 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000550:	2001      	movs	r0, #1
 8000552:	4770      	bx	lr

08000554 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000554:	2000      	movs	r0, #0
 8000556:	4770      	bx	lr

08000558 <LL_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 800055c:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 800055e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000560:	4302      	orrs	r2, r0
 8000562:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	4018      	ands	r0, r3
 8000568:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 800056a:	9b01      	ldr	r3, [sp, #4]
}
 800056c:	b002      	add	sp, #8
 800056e:	4770      	bx	lr

08000570 <LL_C2_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8000574:	b082      	sub	sp, #8
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000576:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800057a:	4302      	orrs	r2, r0
 800057c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000580:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000584:	4018      	ands	r0, r3
 8000586:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000588:	9b01      	ldr	r3, [sp, #4]
}
 800058a:	b002      	add	sp, #8
 800058c:	4770      	bx	lr
	...

08000590 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000592:	b087      	sub	sp, #28
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000594:	f001 fc06 	bl	8001da4 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000598:	f001 fc0c 	bl	8001db4 <HAL_DBGMCU_EnableDBGStopMode>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 800059c:	4a34      	ldr	r2, [pc, #208]	; (8000670 <APPD_Init+0xe0>)

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
  {
    if( aGpioConfigList[local_loop].enable != 0)
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 800059e:	4f35      	ldr	r7, [pc, #212]	; (8000674 <APPD_Init+0xe4>)
 80005a0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80005a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  DbgTraceInit();
 80005ac:	f004 f8b6 	bl	800471c <DbgTraceInit>
  GPIO_InitTypeDef gpio_config = {0};
 80005b0:	2214      	movs	r2, #20
 80005b2:	2100      	movs	r1, #0
 80005b4:	a801      	add	r0, sp, #4
 80005b6:	f004 ff70 	bl	800549a <memset>
 80005ba:	2300      	movs	r3, #0
    if( aGpioConfigList[local_loop].enable != 0)
 80005bc:	482e      	ldr	r0, [pc, #184]	; (8000678 <APPD_Init+0xe8>)
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80005be:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 800067c <APPD_Init+0xec>
  gpioc_pin_list = 0;
 80005c2:	461c      	mov	r4, r3
  gpiob_pin_list = 0;
 80005c4:	461d      	mov	r5, r3
  gpioa_pin_list = 0;
 80005c6:	461e      	mov	r6, r3
    if( aGpioConfigList[local_loop].enable != 0)
 80005c8:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 80005cc:	7991      	ldrb	r1, [r2, #6]
 80005ce:	b151      	cbz	r1, 80005e6 <APPD_Init+0x56>
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80005d0:	f850 1033 	ldr.w	r1, [r0, r3, lsl #3]
 80005d4:	42b9      	cmp	r1, r7
 80005d6:	d044      	beq.n	8000662 <APPD_Init+0xd2>
 80005d8:	4561      	cmp	r1, ip
 80005da:	d045      	beq.n	8000668 <APPD_Init+0xd8>
 80005dc:	f1b1 4f90 	cmp.w	r1, #1207959552	; 0x48000000
 80005e0:	d101      	bne.n	80005e6 <APPD_Init+0x56>
      {
        case (uint32_t)GPIOA:
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 80005e2:	8892      	ldrh	r2, [r2, #4]
 80005e4:	4316      	orrs	r6, r2
 80005e6:	3301      	adds	r3, #1
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80005e8:	2b22      	cmp	r3, #34	; 0x22
 80005ea:	d1ed      	bne.n	80005c8 <APPD_Init+0x38>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80005ec:	2101      	movs	r1, #1
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ee:	2303      	movs	r3, #3
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80005f0:	9102      	str	r1, [sp, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f2:	9304      	str	r3, [sp, #16]

  if(gpioa_pin_list != 0)
 80005f4:	b18e      	cbz	r6, 800061a <APPD_Init+0x8a>
  {
    gpio_config.Pin = gpioa_pin_list;
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	4608      	mov	r0, r1
    gpio_config.Pin = gpioa_pin_list;
 80005f8:	9601      	str	r6, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	f7ff ffad 	bl	8000558 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80005fe:	4608      	mov	r0, r1
 8000600:	f7ff ffb6 	bl	8000570 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000604:	a901      	add	r1, sp, #4
 8000606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060a:	f001 fe17 	bl	800223c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	4631      	mov	r1, r6
 8000612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000616:	f001 fec7 	bl	80023a8 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 800061a:	b17d      	cbz	r5, 800063c <APPD_Init+0xac>
  {
    gpio_config.Pin = gpiob_pin_list;
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800061c:	2002      	movs	r0, #2
    gpio_config.Pin = gpiob_pin_list;
 800061e:	9501      	str	r5, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000620:	f7ff ff9a 	bl	8000558 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000624:	2002      	movs	r0, #2
 8000626:	f7ff ffa3 	bl	8000570 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 800062a:	a901      	add	r1, sp, #4
 800062c:	4811      	ldr	r0, [pc, #68]	; (8000674 <APPD_Init+0xe4>)
 800062e:	f001 fe05 	bl	800223c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	4629      	mov	r1, r5
 8000636:	480f      	ldr	r0, [pc, #60]	; (8000674 <APPD_Init+0xe4>)
 8000638:	f001 feb6 	bl	80023a8 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800063c:	b17c      	cbz	r4, 800065e <APPD_Init+0xce>
  {
    gpio_config.Pin = gpioc_pin_list;
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	2004      	movs	r0, #4
    gpio_config.Pin = gpioc_pin_list;
 8000640:	9401      	str	r4, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000642:	f7ff ff89 	bl	8000558 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000646:	2004      	movs	r0, #4
 8000648:	f7ff ff92 	bl	8000570 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 800064c:	a901      	add	r1, sp, #4
 800064e:	480b      	ldr	r0, [pc, #44]	; (800067c <APPD_Init+0xec>)
 8000650:	f001 fdf4 	bl	800223c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	4621      	mov	r1, r4
 8000658:	4808      	ldr	r0, [pc, #32]	; (800067c <APPD_Init+0xec>)
 800065a:	f001 fea5 	bl	80023a8 <HAL_GPIO_WritePin>
}
 800065e:	b007      	add	sp, #28
 8000660:	bdf0      	pop	{r4, r5, r6, r7, pc}
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000662:	8892      	ldrh	r2, [r2, #4]
 8000664:	4315      	orrs	r5, r2
 8000666:	e7be      	b.n	80005e6 <APPD_Init+0x56>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000668:	8892      	ldrh	r2, [r2, #4]
 800066a:	4314      	orrs	r4, r2
 800066c:	e7bb      	b.n	80005e6 <APPD_Init+0x56>
 800066e:	bf00      	nop
 8000670:	58000800 	.word	0x58000800
 8000674:	48000400 	.word	0x48000400
 8000678:	08005d94 	.word	0x08005d94
 800067c:	48000800 	.word	0x48000800

08000680 <APPD_EnableCPU2>:
{
 8000680:	b570      	push	{r4, r5, r6, lr}
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <APPD_EnableCPU2+0x34>)
{
 8000684:	b088      	sub	sp, #32
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000686:	aa01      	add	r2, sp, #4
 8000688:	f103 0618 	add.w	r6, r3, #24
 800068c:	4615      	mov	r5, r2
 800068e:	6818      	ldr	r0, [r3, #0]
 8000690:	6859      	ldr	r1, [r3, #4]
 8000692:	4614      	mov	r4, r2
 8000694:	c403      	stmia	r4!, {r0, r1}
 8000696:	3308      	adds	r3, #8
 8000698:	42b3      	cmp	r3, r6
 800069a:	4622      	mov	r2, r4
 800069c:	d1f7      	bne.n	800068e <APPD_EnableCPU2+0xe>
 800069e:	8819      	ldrh	r1, [r3, #0]
 80006a0:	789b      	ldrb	r3, [r3, #2]
 80006a2:	8021      	strh	r1, [r4, #0]
 80006a4:	70a3      	strb	r3, [r4, #2]
  TL_TRACES_Init( );
 80006a6:	f004 fd93 	bl	80051d0 <TL_TRACES_Init>
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80006aa:	4628      	mov	r0, r5
 80006ac:	f004 f97c 	bl	80049a8 <SHCI_C2_DEBUG_Init>
}
 80006b0:	b008      	add	sp, #32
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	08005ea4 	.word	0x08005ea4

080006b8 <DbgOutputInit>:
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 80006b8:	f000 bbfa 	b.w	8000eb0 <MX_USART1_UART_Init>

080006bc <DbgOutputTraces>:
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80006bc:	4613      	mov	r3, r2
 80006be:	460a      	mov	r2, r1
 80006c0:	4601      	mov	r1, r0
 80006c2:	2000      	movs	r0, #0
 80006c4:	f000 bb5a 	b.w	8000d7c <HW_UART_Transmit_DMA>

080006c8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
  UNUSED(status);
  return;
}
 80006c8:	4770      	bx	lr

080006ca <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80006ca:	b508      	push	{r3, lr}
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 80006cc:	f7ff ffd8 	bl	8000680 <APPD_EnableCPU2>

  APP_BLE_Init( );
 80006d0:	f000 fe9e 	bl	8001410 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80006d4:	2100      	movs	r1, #0
 80006d6:	2001      	movs	r0, #1
  return;
}
 80006d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80006dc:	f004 bda4 	b.w	8005228 <UTIL_LPM_SetOffMode>

080006e0 <APPE_Init>:
{
 80006e0:	b510      	push	{r4, lr}
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80006e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006e6:	b088      	sub	sp, #32
 80006e8:	6893      	ldr	r3, [r2, #8]
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80006ea:	4c20      	ldr	r4, [pc, #128]	; (800076c <APPE_Init+0x8c>)
 80006ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006f0:	6093      	str	r3, [r2, #8]
  UTIL_LPM_Init( );
 80006f2:	f004 fd91 	bl	8005218 <UTIL_LPM_Init>
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80006f6:	491e      	ldr	r1, [pc, #120]	; (8000770 <APPE_Init+0x90>)
 80006f8:	2000      	movs	r0, #0
 80006fa:	f000 f937 	bl	800096c <HW_TS_Init>
  APPD_Init();
 80006fe:	f7ff ff47 	bl	8000590 <APPD_Init>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000702:	2101      	movs	r1, #1
 8000704:	4608      	mov	r0, r1
 8000706:	f004 fd8f 	bl	8005228 <UTIL_LPM_SetOffMode>
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 800070a:	2000      	movs	r0, #0
 800070c:	f001 f9f0 	bl	8001af0 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000710:	2001      	movs	r0, #1
 8000712:	f001 f9ed 	bl	8001af0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000716:	2002      	movs	r0, #2
 8000718:	f001 f9ea 	bl	8001af0 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 800071c:	2001      	movs	r0, #1
 800071e:	f001 fa0f 	bl	8001b40 <BSP_LED_On>
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000722:	2101      	movs	r1, #1
 8000724:	2000      	movs	r0, #0
 8000726:	f001 fa19 	bl	8001b5c <BSP_PB_Init>
  TL_Init();
 800072a:	f004 fc71 	bl	8005010 <TL_Init>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 800072e:	4a11      	ldr	r2, [pc, #68]	; (8000774 <APPE_Init+0x94>)
 8000730:	2100      	movs	r1, #0
 8000732:	2004      	movs	r0, #4
 8000734:	f004 fdaa 	bl	800528c <UTIL_SEQ_RegTask>
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000738:	4669      	mov	r1, sp
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <APPE_Init+0x98>)
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800073c:	480f      	ldr	r0, [pc, #60]	; (800077c <APPE_Init+0x9c>)
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800073e:	9400      	str	r4, [sp, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000740:	9301      	str	r3, [sp, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000742:	f004 f959 	bl	80049f8 <shci_init>
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000746:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 800074a:	9302      	str	r3, [sp, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800074c:	f504 7306 	add.w	r3, r4, #536	; 0x218
 8000750:	9303      	str	r3, [sp, #12]
  TL_MM_Init( &tl_mm_config );
 8000752:	a802      	add	r0, sp, #8
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000754:	f240 533c 	movw	r3, #1340	; 0x53c
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000758:	f504 7449 	add.w	r4, r4, #804	; 0x324
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800075c:	9305      	str	r3, [sp, #20]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800075e:	9404      	str	r4, [sp, #16]
  TL_MM_Init( &tl_mm_config );
 8000760:	f004 fd08 	bl	8005174 <TL_MM_Init>
  TL_Enable();
 8000764:	f004 fc52 	bl	800500c <TL_Enable>
}
 8000768:	b008      	add	sp, #32
 800076a:	bd10      	pop	{r4, pc}
 800076c:	200301d8 	.word	0x200301d8
 8000770:	20001514 	.word	0x20001514
 8000774:	08004a45 	.word	0x08004a45
 8000778:	080006c9 	.word	0x080006c9
 800077c:	080006cb 	.word	0x080006cb

08000780 <UTIL_SEQ_Idle>:
{
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
}
 8000780:	4770      	bx	lr

08000782 <UTIL_SEQ_EvtIdle>:
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000782:	f04f 30ff 	mov.w	r0, #4294967295
 8000786:	f004 bdcd 	b.w	8005324 <UTIL_SEQ_Run>

0800078a <shci_notify_asynch_evt>:
}

void shci_notify_asynch_evt(void* pdata)
{
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800078a:	2100      	movs	r1, #0
 800078c:	2004      	movs	r0, #4
 800078e:	f004 bd8d 	b.w	80052ac <UTIL_SEQ_SetTask>

08000792 <shci_cmd_resp_release>:
  return;
}

void shci_cmd_resp_release(uint32_t flag)
{
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000792:	2002      	movs	r0, #2
 8000794:	f004 bdb8 	b.w	8005308 <UTIL_SEQ_SetEvt>

08000798 <shci_cmd_resp_wait>:
  return;
}

void shci_cmd_resp_wait(uint32_t timeout)
{
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000798:	2002      	movs	r0, #2
 800079a:	f004 be2f 	b.w	80053fc <UTIL_SEQ_WaitEvt>
	...

080007a0 <ReadRtcSsrValue>:
static uint32_t ReadRtcSsrValue(void)
{
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80007a0:	4a05      	ldr	r2, [pc, #20]	; (80007b8 <ReadRtcSsrValue+0x18>)
 80007a2:	6a90      	ldr	r0, [r2, #40]	; 0x28

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80007a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80007a6:	b280      	uxth	r0, r0
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80007a8:	b29b      	uxth	r3, r3

  while(first_read != second_read)
 80007aa:	4298      	cmp	r0, r3
 80007ac:	d100      	bne.n	80007b0 <ReadRtcSsrValue+0x10>

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
  }

  return second_read;
}
 80007ae:	4770      	bx	lr
    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80007b0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80007b2:	4618      	mov	r0, r3
 80007b4:	b28b      	uxth	r3, r1
 80007b6:	e7f8      	b.n	80007aa <ReadRtcSsrValue+0xa>
 80007b8:	40002800 	.word	0x40002800

080007bc <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <UnlinkTimer+0x60>)
 80007c0:	781a      	ldrb	r2, [r3, #0]
 80007c2:	4282      	cmp	r2, r0
 80007c4:	f04f 0418 	mov.w	r4, #24
 80007c8:	d115      	bne.n	80007f6 <UnlinkTimer+0x3a>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80007ca:	781a      	ldrb	r2, [r3, #0]
 80007cc:	b2d2      	uxtb	r2, r2
 80007ce:	705a      	strb	r2, [r3, #1]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80007d0:	fb04 3200 	mla	r2, r4, r0, r3
 80007d4:	7e52      	ldrb	r2, [r2, #25]
 80007d6:	b2d2      	uxtb	r2, r2
 80007d8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80007da:	2218      	movs	r2, #24
 80007dc:	fb02 3000 	mla	r0, r2, r0, r3
 80007e0:	2201      	movs	r2, #1
 80007e2:	7402      	strb	r2, [r0, #16]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80007e4:	781a      	ldrb	r2, [r3, #0]
 80007e6:	2a06      	cmp	r2, #6
 80007e8:	d104      	bne.n	80007f4 <UnlinkTimer+0x38>
 80007ea:	b919      	cbnz	r1, 80007f4 <UnlinkTimer+0x38>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80007ec:	f04f 32ff 	mov.w	r2, #4294967295
 80007f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  return;
}
 80007f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    previous_id = aTimerContext[TimerID].PreviousID;
 80007f6:	fb04 3500 	mla	r5, r4, r0, r3
 80007fa:	7e2e      	ldrb	r6, [r5, #24]
    next_id = aTimerContext[TimerID].NextID;
 80007fc:	7e6a      	ldrb	r2, [r5, #25]
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80007fe:	7e6f      	ldrb	r7, [r5, #25]
 8000800:	fb04 3606 	mla	r6, r4, r6, r3
    next_id = aTimerContext[TimerID].NextID;
 8000804:	b2d2      	uxtb	r2, r2
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000806:	b2ff      	uxtb	r7, r7
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000808:	2a06      	cmp	r2, #6
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800080a:	7677      	strb	r7, [r6, #25]
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800080c:	bf1f      	itttt	ne
 800080e:	7e2d      	ldrbne	r5, [r5, #24]
 8000810:	fb04 3202 	mlane	r2, r4, r2, r3
 8000814:	b2ed      	uxtbne	r5, r5
 8000816:	7615      	strbne	r5, [r2, #24]
 8000818:	e7df      	b.n	80007da <UnlinkTimer+0x1e>
 800081a:	bf00      	nop
 800081c:	2000009c 	.word	0x2000009c

08000820 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000820:	b510      	push	{r4, lr}
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000822:	4c0d      	ldr	r4, [pc, #52]	; (8000858 <ReturnTimeElapsed+0x38>)
 8000824:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000828:	3301      	adds	r3, #1
 800082a:	d013      	beq.n	8000854 <ReturnTimeElapsed+0x34>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800082c:	f7ff ffb8 	bl	80007a0 <ReadRtcSsrValue>

    if (SSRValueOnLastSetup >= return_value)
 8000830:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000834:	4283      	cmp	r3, r0
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <ReturnTimeElapsed+0x3c>)
      return_value = SSRValueOnLastSetup - return_value;
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000838:	bf3b      	ittet	cc
 800083a:	f8d4 1094 	ldrcc.w	r1, [r4, #148]	; 0x94
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800083e:	881a      	ldrhcc	r2, [r3, #0]
      return_value = SSRValueOnLastSetup - return_value;
 8000840:	f8d4 2094 	ldrcs.w	r2, [r4, #148]	; 0x94
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000844:	1852      	addcc	r2, r2, r1
 8000846:	1a10      	subs	r0, r2, r0

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000848:	789a      	ldrb	r2, [r3, #2]
    return_value = return_value >> WakeupTimerDivider;
 800084a:	78db      	ldrb	r3, [r3, #3]
    return_value = return_value*AsynchPrescalerUserConfig;
 800084c:	4350      	muls	r0, r2
    return_value = return_value >> WakeupTimerDivider;
 800084e:	40d8      	lsrs	r0, r3
  {
    return_value = 0;
  }

  return (uint16_t)return_value;
}
 8000850:	b280      	uxth	r0, r0
 8000852:	bd10      	pop	{r4, pc}
    return_value = 0;
 8000854:	2000      	movs	r0, #0
 8000856:	e7fb      	b.n	8000850 <ReturnTimeElapsed+0x30>
 8000858:	2000009c 	.word	0x2000009c
 800085c:	200001a4 	.word	0x200001a4

08000860 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000864:	4e3d      	ldr	r6, [pc, #244]	; (800095c <RescheduleTimerList+0xfc>)

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000866:	4b3e      	ldr	r3, [pc, #248]	; (8000960 <RescheduleTimerList+0x100>)
 8000868:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800086c:	689a      	ldr	r2, [r3, #8]
 800086e:	f8d8 3000 	ldr.w	r3, [r8]
 8000872:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000876:	d003      	beq.n	8000880 <RescheduleTimerList+0x20>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000878:	68da      	ldr	r2, [r3, #12]
 800087a:	f012 0f04 	tst.w	r2, #4
 800087e:	e7fa      	b.n	8000876 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000880:	689a      	ldr	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000882:	4d38      	ldr	r5, [pc, #224]	; (8000964 <RescheduleTimerList+0x104>)
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000888:	609a      	str	r2, [r3, #8]
  localTimerID = CurrentRunningTimerID;
 800088a:	782f      	ldrb	r7, [r5, #0]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800088c:	2318      	movs	r3, #24
  localTimerID = CurrentRunningTimerID;
 800088e:	b2ff      	uxtb	r7, r7
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000890:	fb03 5307 	mla	r3, r3, r7, r5
 8000894:	68dc      	ldr	r4, [r3, #12]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000896:	f7ff ffc3 	bl	8000820 <ReturnTimeElapsed>

  if(timecountleft < time_elapsed )
 800089a:	42a0      	cmp	r0, r4
 800089c:	d907      	bls.n	80008ae <RescheduleTimerList+0x4e>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800089e:	2301      	movs	r3, #1
 80008a0:	f885 3098 	strb.w	r3, [r5, #152]	; 0x98
    wakeup_timer_value = 0;
 80008a4:	2300      	movs	r3, #0
  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80008a6:	2418      	movs	r4, #24
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80008a8:	f04f 0c00 	mov.w	ip, #0
 80008ac:	e01b      	b.n	80008e6 <RescheduleTimerList+0x86>
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80008ae:	8933      	ldrh	r3, [r6, #8]
 80008b0:	4403      	add	r3, r0
 80008b2:	42a3      	cmp	r3, r4
      wakeup_timer_value = MaxWakeupTimerSetup;
 80008b4:	bf39      	ittee	cc
 80008b6:	8933      	ldrhcc	r3, [r6, #8]
      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80008b8:	2200      	movcc	r2, #0
      wakeup_timer_value = timecountleft - time_elapsed;
 80008ba:	1a23      	subcs	r3, r4, r0
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80008bc:	2201      	movcs	r2, #1
      wakeup_timer_value = MaxWakeupTimerSetup;
 80008be:	bf34      	ite	cc
 80008c0:	b29b      	uxthcc	r3, r3
      wakeup_timer_value = timecountleft - time_elapsed;
 80008c2:	b29b      	uxthcs	r3, r3
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80008c4:	f885 2098 	strb.w	r2, [r5, #152]	; 0x98
 80008c8:	e7ed      	b.n	80008a6 <RescheduleTimerList+0x46>
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80008ca:	fb04 5207 	mla	r2, r4, r7, r5
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80008ce:	fb04 5707 	mla	r7, r4, r7, r5
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80008d2:	68d1      	ldr	r1, [r2, #12]
 80008d4:	4288      	cmp	r0, r1
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80008d6:	bf97      	itett	ls
 80008d8:	68d1      	ldrls	r1, [r2, #12]
      aTimerContext[localTimerID].CountLeft = 0;
 80008da:	f8c2 c00c 	strhi.w	ip, [r2, #12]
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80008de:	1a09      	subls	r1, r1, r0
 80008e0:	60d1      	strls	r1, [r2, #12]
    localTimerID = aTimerContext[localTimerID].NextID;
 80008e2:	7e7f      	ldrb	r7, [r7, #25]
 80008e4:	b2ff      	uxtb	r7, r7
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80008e6:	2f06      	cmp	r7, #6
 80008e8:	d1ef      	bne.n	80008ca <RescheduleTimerList+0x6a>
  if(Value == 0)
 80008ea:	b943      	cbnz	r3, 80008fe <RescheduleTimerList+0x9e>
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80008ec:	f7ff ff58 	bl	80007a0 <ReadRtcSsrValue>
 80008f0:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80008f4:	2003      	movs	r0, #3
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);

  return ;
}
 80008f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80008fa:	f001 bae1 	b.w	8001ec0 <HAL_NVIC_SetPendingIRQ>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d802      	bhi.n	8000908 <RescheduleTimerList+0xa8>
 8000902:	78f2      	ldrb	r2, [r6, #3]
 8000904:	2a01      	cmp	r2, #1
 8000906:	d026      	beq.n	8000956 <RescheduleTimerList+0xf6>
      Value -= 1;
 8000908:	3b01      	subs	r3, #1
 800090a:	b29c      	uxth	r4, r3
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800090c:	f8d8 3000 	ldr.w	r3, [r8]
 8000910:	68da      	ldr	r2, [r3, #12]
 8000912:	0752      	lsls	r2, r2, #29
 8000914:	d5fc      	bpl.n	8000910 <RescheduleTimerList+0xb0>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000916:	68d9      	ldr	r1, [r3, #12]
 8000918:	b2c9      	uxtb	r1, r1
 800091a:	f461 6190 	orn	r1, r1, #1152	; 0x480
 800091e:	60d9      	str	r1, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <RescheduleTimerList+0x108>)
 8000922:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000926:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000928:	2003      	movs	r0, #3
 800092a:	f001 fad9 	bl	8001ee0 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <RescheduleTimerList+0x100>)
 8000930:	695a      	ldr	r2, [r3, #20]
 8000932:	0c12      	lsrs	r2, r2, #16
 8000934:	0412      	lsls	r2, r2, #16
 8000936:	4322      	orrs	r2, r4
 8000938:	615a      	str	r2, [r3, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800093a:	f7ff ff31 	bl	80007a0 <ReadRtcSsrValue>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800093e:	6873      	ldr	r3, [r6, #4]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000940:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	6893      	ldr	r3, [r2, #8]
 8000948:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800094c:	6093      	str	r3, [r2, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800094e:	f3af 8000 	nop.w
}
 8000952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000956:	4614      	mov	r4, r2
 8000958:	e7d8      	b.n	800090c <RescheduleTimerList+0xac>
 800095a:	bf00      	nop
 800095c:	200001a4 	.word	0x200001a4
 8000960:	40002800 	.word	0x40002800
 8000964:	2000009c 	.word	0x2000009c
 8000968:	58000800 	.word	0x58000800

0800096c <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 800096c:	b570      	push	{r4, r5, r6, lr}
   * Get RTC handler
   */
  phrtc = hrtc;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800096e:	680d      	ldr	r5, [r1, #0]

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000970:	4e3e      	ldr	r6, [pc, #248]	; (8000a6c <HW_TS_Init+0x100>)
  phrtc = hrtc;
 8000972:	4c3f      	ldr	r4, [pc, #252]	; (8000a70 <HW_TS_Init+0x104>)
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000974:	23ca      	movs	r3, #202	; 0xca
 8000976:	626b      	str	r3, [r5, #36]	; 0x24
 8000978:	2353      	movs	r3, #83	; 0x53
 800097a:	626b      	str	r3, [r5, #36]	; 0x24
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800097c:	68b3      	ldr	r3, [r6, #8]
  phrtc = hrtc;
 800097e:	6061      	str	r1, [r4, #4]
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	60b3      	str	r3, [r6, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000986:	68b3      	ldr	r3, [r6, #8]
 8000988:	f003 0307 	and.w	r3, r3, #7
 800098c:	f1c3 0304 	rsb	r3, r3, #4
 8000990:	b2d9      	uxtb	r1, r3
 8000992:	70e1      	strb	r1, [r4, #3]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000994:	6932      	ldr	r2, [r6, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000996:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
 800099a:	fa93 f3a3 	rbit	r3, r3
 800099e:	fab3 f383 	clz	r3, r3
 80009a2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80009a6:	40da      	lsrs	r2, r3
 80009a8:	3201      	adds	r2, #1
 80009aa:	b2d2      	uxtb	r2, r2
 80009ac:	70a2      	strb	r2, [r4, #2]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80009ae:	6933      	ldr	r3, [r6, #16]
 80009b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009b4:	3301      	adds	r3, #1
 80009b6:	8023      	strh	r3, [r4, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80009b8:	3b01      	subs	r3, #1
 80009ba:	4353      	muls	r3, r2
 80009bc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80009c0:	40cb      	lsrs	r3, r1

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80009c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80009c6:	4293      	cmp	r3, r2
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80009c8:	bf88      	it	hi
 80009ca:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80009ce:	4a29      	ldr	r2, [pc, #164]	; (8000a74 <HW_TS_Init+0x108>)
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80009d0:	bf98      	it	ls
 80009d2:	b29b      	uxthls	r3, r3
 80009d4:	8123      	strh	r3, [r4, #8]
 80009d6:	6813      	ldr	r3, [r2, #0]
 80009d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009dc:	6013      	str	r3, [r2, #0]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80009de:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80009e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);

  if(TimerInitMode == hw_ts_InitMode_Full)
 80009ea:	2800      	cmp	r0, #0
 80009ec:	d137      	bne.n	8000a5e <HW_TS_Init+0xf2>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80009ee:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <HW_TS_Init+0x10c>)
 80009f0:	2101      	movs	r1, #1
 80009f2:	f883 1098 	strb.w	r1, [r3, #152]	; 0x98
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80009f6:	f04f 31ff 	mov.w	r1, #4294967295
 80009fa:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80009fe:	2106      	movs	r1, #6
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000a00:	7418      	strb	r0, [r3, #16]
 8000a02:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
 8000a06:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
 8000a0a:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
 8000a0e:	f883 0070 	strb.w	r0, [r3, #112]	; 0x70
 8000a12:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000a16:	7019      	strb	r1, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000a18:	68ab      	ldr	r3, [r5, #8]
 8000a1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a1e:	60ab      	str	r3, [r5, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000a20:	68eb      	ldr	r3, [r5, #12]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8000a28:	60eb      	str	r3, [r5, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000a2a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000a2e:	60d3      	str	r3, [r2, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000a30:	2003      	movs	r0, #3
 8000a32:	f001 fa55 	bl	8001ee0 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000a36:	6863      	ldr	r3, [r4, #4]
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	6893      	ldr	r3, [r2, #8]
 8000a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a40:	6093      	str	r3, [r2, #8]
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000a42:	6863      	ldr	r3, [r4, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	22ff      	movs	r2, #255	; 0xff

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000a48:	2103      	movs	r1, #3
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000a4a:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000a4c:	4608      	mov	r0, r1
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f001 f9ca 	bl	8001de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000a54:	2003      	movs	r0, #3

  return;
}
 8000a56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000a5a:	f001 b9f9 	b.w	8001e50 <HAL_NVIC_EnableIRQ>
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000a5e:	68eb      	ldr	r3, [r5, #12]
 8000a60:	055b      	lsls	r3, r3, #21
 8000a62:	d5ee      	bpl.n	8000a42 <HW_TS_Init+0xd6>
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f001 fa2b 	bl	8001ec0 <HAL_NVIC_SetPendingIRQ>
 8000a6a:	e7ea      	b.n	8000a42 <HW_TS_Init+0xd6>
 8000a6c:	40002800 	.word	0x40002800
 8000a70:	200001a4 	.word	0x200001a4
 8000a74:	58000800 	.word	0x58000800
 8000a78:	2000009c 	.word	0x2000009c

08000a7c <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000a80:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000a86:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000acc <HW_TS_Create+0x50>
 8000a8a:	2500      	movs	r5, #0
 8000a8c:	f04f 0a18 	mov.w	sl, #24
 8000a90:	fb0a 9405 	mla	r4, sl, r5, r9
 8000a94:	fa5f fe85 	uxtb.w	lr, r5
 8000a98:	f894 c010 	ldrb.w	ip, [r4, #16]
 8000a9c:	f00c 06ff 	and.w	r6, ip, #255	; 0xff
 8000aa0:	f1bc 0f00 	cmp.w	ip, #0
 8000aa4:	d10b      	bne.n	8000abe <HW_TS_Create+0x42>
    loop++;
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8000aa6:	2501      	movs	r5, #1
 8000aa8:	7425      	strb	r5, [r4, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000aaa:	f387 8810 	msr	PRIMASK, r7

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8000aae:	6160      	str	r0, [r4, #20]
    aTimerContext[loop].TimerMode = TimerMode;
 8000ab0:	7462      	strb	r2, [r4, #17]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
    *pTimerId = loop;

    localreturnstatus = hw_ts_Successful;
 8000ab2:	4630      	mov	r0, r6
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8000ab4:	6063      	str	r3, [r4, #4]
    *pTimerId = loop;
 8000ab6:	f881 e000 	strb.w	lr, [r1]

    localreturnstatus = hw_ts_Failed;
  }

  return(localreturnstatus);
}
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	3501      	adds	r5, #1
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000ac0:	2d06      	cmp	r5, #6
 8000ac2:	d1e5      	bne.n	8000a90 <HW_TS_Create+0x14>
 8000ac4:	f387 8810 	msr	PRIMASK, r7
    localreturnstatus = hw_ts_Failed;
 8000ac8:	2001      	movs	r0, #1
  return(localreturnstatus);
 8000aca:	e7f6      	b.n	8000aba <HW_TS_Create+0x3e>
 8000acc:	2000009c 	.word	0x2000009c

08000ad0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8000ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ad4:	4680      	mov	r8, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ad6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8000ada:	b672      	cpsid	i
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000adc:	4c23      	ldr	r4, [pc, #140]	; (8000b6c <HW_TS_Stop+0x9c>)

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000ade:	4e24      	ldr	r6, [pc, #144]	; (8000b70 <HW_TS_Stop+0xa0>)
  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000ae0:	2003      	movs	r0, #3
 8000ae2:	f001 f9c3 	bl	8001e6c <HAL_NVIC_DisableIRQ>
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ae6:	6867      	ldr	r7, [r4, #4]
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	22ca      	movs	r2, #202	; 0xca
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
 8000aee:	2253      	movs	r2, #83	; 0x53
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000af2:	2318      	movs	r3, #24
 8000af4:	fb03 6308 	mla	r3, r3, r8, r6
 8000af8:	7c1b      	ldrb	r3, [r3, #16]
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d124      	bne.n	8000b48 <HW_TS_Stop+0x78>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8000afe:	2100      	movs	r1, #0
 8000b00:	4640      	mov	r0, r8
 8000b02:	f7ff fe5b 	bl	80007bc <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8000b06:	7833      	ldrb	r3, [r6, #0]
 8000b08:	b2db      	uxtb	r3, r3

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b0a:	2b06      	cmp	r3, #6
 8000b0c:	d127      	bne.n	8000b5e <HW_TS_Stop+0x8e>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <HW_TS_Stop+0xa4>)
 8000b10:	689a      	ldr	r2, [r3, #8]
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000b18:	d003      	beq.n	8000b22 <HW_TS_Stop+0x52>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000b1a:	68da      	ldr	r2, [r3, #12]
 8000b1c:	f012 0f04 	tst.w	r2, #4
 8000b20:	e7fa      	b.n	8000b18 <HW_TS_Stop+0x48>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000b22:	689a      	ldr	r2, [r3, #8]
 8000b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b28:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000b2a:	68da      	ldr	r2, [r3, #12]
 8000b2c:	0752      	lsls	r2, r2, #29
 8000b2e:	d5fc      	bpl.n	8000b2a <HW_TS_Stop+0x5a>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000b30:	68da      	ldr	r2, [r3, #12]
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000b38:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <HW_TS_Stop+0xa8>)
 8000b3c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b40:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000b42:	2003      	movs	r0, #3
 8000b44:	f001 f9cc 	bl	8001ee0 <HAL_NVIC_ClearPendingIRQ>
      RescheduleTimerList();
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000b48:	6863      	ldr	r3, [r4, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	22ff      	movs	r2, #255	; 0xff
 8000b4e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000b50:	2003      	movs	r0, #3
 8000b52:	f001 f97d 	bl	8001e50 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b56:	f385 8810 	msr	PRIMASK, r5
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 8000b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000b5e:	7872      	ldrb	r2, [r6, #1]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d0f1      	beq.n	8000b48 <HW_TS_Stop+0x78>
      RescheduleTimerList();
 8000b64:	f7ff fe7c 	bl	8000860 <RescheduleTimerList>
 8000b68:	e7ee      	b.n	8000b48 <HW_TS_Stop+0x78>
 8000b6a:	bf00      	nop
 8000b6c:	200001a4 	.word	0x200001a4
 8000b70:	2000009c 	.word	0x2000009c
 8000b74:	40002800 	.word	0x40002800
 8000b78:	58000800 	.word	0x58000800

08000b7c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8000b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000b80:	4c4b      	ldr	r4, [pc, #300]	; (8000cb0 <HW_TS_Start+0x134>)
 8000b82:	2318      	movs	r3, #24
 8000b84:	fb03 4300 	mla	r3, r3, r0, r4
{
 8000b88:	4605      	mov	r5, r0
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000b8a:	7c1b      	ldrb	r3, [r3, #16]
 8000b8c:	2b02      	cmp	r3, #2
{
 8000b8e:	460f      	mov	r7, r1
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000b90:	d101      	bne.n	8000b96 <HW_TS_Start+0x1a>
  {
    HW_TS_Stop( timer_id );
 8000b92:	f7ff ff9d 	bl	8000ad0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b96:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9a:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	f001 f965 	bl	8001e6c <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ba2:	4a44      	ldr	r2, [pc, #272]	; (8000cb4 <HW_TS_Start+0x138>)
 8000ba4:	6853      	ldr	r3, [r2, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	21ca      	movs	r1, #202	; 0xca

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8000baa:	2618      	movs	r6, #24
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000bac:	6259      	str	r1, [r3, #36]	; 0x24
  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8000bae:	fb06 4905 	mla	r9, r6, r5, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000bb2:	2153      	movs	r1, #83	; 0x53
 8000bb4:	6259      	str	r1, [r3, #36]	; 0x24
  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	f889 3010 	strb.w	r3, [r9, #16]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8000bbc:	f8c9 700c 	str.w	r7, [r9, #12]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8000bc0:	f8c9 7008 	str.w	r7, [r9, #8]
  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000bc4:	7823      	ldrb	r3, [r4, #0]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b06      	cmp	r3, #6
 8000bca:	4617      	mov	r7, r2
 8000bcc:	d11b      	bne.n	8000c06 <HW_TS_Start+0x8a>
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000bce:	7822      	ldrb	r2, [r4, #0]
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	7062      	strb	r2, [r4, #1]
    CurrentRunningTimerID = TimerID;
 8000bd4:	7025      	strb	r5, [r4, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000bd6:	f889 3019 	strb.w	r3, [r9, #25]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    time_elapsed = 0;
 8000be2:	2000      	movs	r0, #0

  time_elapsed =  linkTimer(timer_id);

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8000be4:	7823      	ldrb	r3, [r4, #0]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000be6:	7862      	ldrb	r2, [r4, #1]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d05a      	beq.n	8000ca2 <HW_TS_Start+0x126>
  {
    RescheduleTimerList();
 8000bec:	f7ff fe38 	bl	8000860 <RescheduleTimerList>
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	22ff      	movs	r2, #255	; 0xff
 8000bf6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f001 f929 	bl	8001e50 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000bfe:	f388 8810 	msr	PRIMASK, r8
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 8000c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    time_elapsed = ReturnTimeElapsed();
 8000c06:	f7ff fe0b 	bl	8000820 <ReturnTimeElapsed>
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000c0a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8000c0e:	4403      	add	r3, r0
 8000c10:	f8c9 300c 	str.w	r3, [r9, #12]
    time_left = aTimerContext[TimerID].CountLeft;
 8000c14:	f8d9 100c 	ldr.w	r1, [r9, #12]
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000c18:	7823      	ldrb	r3, [r4, #0]
 8000c1a:	fb06 4303 	mla	r3, r6, r3, r4
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d323      	bcc.n	8000c6c <HW_TS_Start+0xf0>
      timer_id_lookup = CurrentRunningTimerID;
 8000c24:	7823      	ldrb	r3, [r4, #0]
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000c26:	b2db      	uxtb	r3, r3
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000c28:	fb06 4203 	mla	r2, r6, r3, r4
 8000c2c:	7e52      	ldrb	r2, [r2, #25]
 8000c2e:	b2d2      	uxtb	r2, r2
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000c30:	2a06      	cmp	r2, #6
 8000c32:	d004      	beq.n	8000c3e <HW_TS_Start+0xc2>
 8000c34:	fb06 4202 	mla	r2, r6, r2, r4
 8000c38:	68d2      	ldr	r2, [r2, #12]
 8000c3a:	4291      	cmp	r1, r2
 8000c3c:	d212      	bcs.n	8000c64 <HW_TS_Start+0xe8>
  next_id = aTimerContext[RefTimerID].NextID;
 8000c3e:	2118      	movs	r1, #24
 8000c40:	fb01 4203 	mla	r2, r1, r3, r4
 8000c44:	7e52      	ldrb	r2, [r2, #25]
 8000c46:	b2d2      	uxtb	r2, r2
  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c48:	2a06      	cmp	r2, #6
    aTimerContext[next_id].PreviousID = TimerID;
 8000c4a:	bf1c      	itt	ne
 8000c4c:	fb01 4102 	mlane	r1, r1, r2, r4
 8000c50:	760d      	strbne	r5, [r1, #24]
  aTimerContext[TimerID].NextID = next_id;
 8000c52:	2118      	movs	r1, #24
 8000c54:	fb01 4605 	mla	r6, r1, r5, r4
 8000c58:	7672      	strb	r2, [r6, #25]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000c5a:	7633      	strb	r3, [r6, #24]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000c5c:	fb01 4303 	mla	r3, r1, r3, r4
 8000c60:	765d      	strb	r5, [r3, #25]
 8000c62:	e7bf      	b.n	8000be4 <HW_TS_Start+0x68>
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000c64:	fb06 4303 	mla	r3, r6, r3, r4
 8000c68:	7e5b      	ldrb	r3, [r3, #25]
 8000c6a:	e7dc      	b.n	8000c26 <HW_TS_Start+0xaa>
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000c6c:	7822      	ldrb	r2, [r4, #0]
  if(RefTimerID != CurrentRunningTimerID)
 8000c6e:	7823      	ldrb	r3, [r4, #0]
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000c70:	b2d2      	uxtb	r2, r2
  if(RefTimerID != CurrentRunningTimerID)
 8000c72:	429a      	cmp	r2, r3
 8000c74:	fb06 f302 	mul.w	r3, r6, r2
 8000c78:	d00f      	beq.n	8000c9a <HW_TS_Start+0x11e>
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000c7a:	4423      	add	r3, r4
 8000c7c:	7e19      	ldrb	r1, [r3, #24]
 8000c7e:	b2c9      	uxtb	r1, r1
    aTimerContext[previous_id].NextID = TimerID;
 8000c80:	fb06 4601 	mla	r6, r6, r1, r4
 8000c84:	7675      	strb	r5, [r6, #25]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000c86:	f889 2019 	strb.w	r2, [r9, #25]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000c8a:	f889 1018 	strb.w	r1, [r9, #24]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000c8e:	761d      	strb	r5, [r3, #24]
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000c90:	7823      	ldrb	r3, [r4, #0]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	7063      	strb	r3, [r4, #1]
      CurrentRunningTimerID = TimerID;
 8000c96:	7025      	strb	r5, [r4, #0]
 8000c98:	e7a4      	b.n	8000be4 <HW_TS_Start+0x68>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000c9a:	f889 2019 	strb.w	r2, [r9, #25]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000c9e:	4423      	add	r3, r4
 8000ca0:	e7f5      	b.n	8000c8e <HW_TS_Start+0x112>
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8000ca2:	2318      	movs	r3, #24
 8000ca4:	fb03 4405 	mla	r4, r3, r5, r4
 8000ca8:	68e3      	ldr	r3, [r4, #12]
 8000caa:	1a18      	subs	r0, r3, r0
 8000cac:	60e0      	str	r0, [r4, #12]
 8000cae:	e79f      	b.n	8000bf0 <HW_TS_Start+0x74>
 8000cb0:	2000009c 	.word	0x2000009c
 8000cb4:	200001a4 	.word	0x200001a4

08000cb8 <HW_TS_RTC_Int_AppNot>:
  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
  pTimerCallBack();
 8000cb8:	4710      	bx	r2
	...

08000cbc <HW_TS_RTC_Wakeup_Handler>:
{
 8000cbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000cc0:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc4:	b672      	cpsid	i
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000cc6:	4e2a      	ldr	r6, [pc, #168]	; (8000d70 <HW_TS_RTC_Wakeup_Handler+0xb4>)
 8000cc8:	6873      	ldr	r3, [r6, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f04f 0bca 	mov.w	fp, #202	; 0xca
 8000cd0:	f04f 0853 	mov.w	r8, #83	; 0x53
 8000cd4:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
 8000cd8:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ce2:	609a      	str	r2, [r3, #8]
  local_current_running_timer_id = CurrentRunningTimerID;
 8000ce4:	4a23      	ldr	r2, [pc, #140]	; (8000d74 <HW_TS_RTC_Wakeup_Handler+0xb8>)
 8000ce6:	7814      	ldrb	r4, [r2, #0]
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000ce8:	2518      	movs	r5, #24
  local_current_running_timer_id = CurrentRunningTimerID;
 8000cea:	b2e4      	uxtb	r4, r4
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000cec:	fb05 2504 	mla	r5, r5, r4, r2
 8000cf0:	7c29      	ldrb	r1, [r5, #16]
 8000cf2:	2902      	cmp	r1, #2
 8000cf4:	d12f      	bne.n	8000d56 <HW_TS_RTC_Wakeup_Handler+0x9a>
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000cf6:	f8d5 a004 	ldr.w	sl, [r5, #4]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000cfa:	f8d5 9014 	ldr.w	r9, [r5, #20]
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000cfe:	f892 3098 	ldrb.w	r3, [r2, #152]	; 0x98
 8000d02:	b31b      	cbz	r3, 8000d4c <HW_TS_RTC_Wakeup_Handler+0x90>
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000d04:	7c69      	ldrb	r1, [r5, #17]
 8000d06:	b2c9      	uxtb	r1, r1
 8000d08:	2901      	cmp	r1, #1
 8000d0a:	d119      	bne.n	8000d40 <HW_TS_RTC_Wakeup_Handler+0x84>
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000d0c:	4620      	mov	r0, r4
 8000d0e:	f7ff fd55 	bl	80007bc <UnlinkTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d12:	f387 8810 	msr	PRIMASK, r7
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000d16:	68a9      	ldr	r1, [r5, #8]
 8000d18:	4620      	mov	r0, r4
 8000d1a:	f7ff ff2f 	bl	8000b7c <HW_TS_Start>
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d1e:	6873      	ldr	r3, [r6, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000d22:	4652      	mov	r2, sl
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d24:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000d28:	4621      	mov	r1, r4
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d2a:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000d2e:	4648      	mov	r0, r9
 8000d30:	f7ff ffc2 	bl	8000cb8 <HW_TS_RTC_Int_AppNot>
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000d34:	6873      	ldr	r3, [r6, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	22ff      	movs	r2, #255	; 0xff
 8000d3a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000d3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d40:	f387 8810 	msr	PRIMASK, r7
        HW_TS_Stop(local_current_running_timer_id);
 8000d44:	4620      	mov	r0, r4
 8000d46:	f7ff fec3 	bl	8000ad0 <HW_TS_Stop>
 8000d4a:	e7e8      	b.n	8000d1e <HW_TS_RTC_Wakeup_Handler+0x62>
      RescheduleTimerList();
 8000d4c:	f7ff fd88 	bl	8000860 <RescheduleTimerList>
 8000d50:	f387 8810 	msr	PRIMASK, r7
 8000d54:	e7ee      	b.n	8000d34 <HW_TS_RTC_Wakeup_Handler+0x78>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000d56:	68da      	ldr	r2, [r3, #12]
 8000d58:	0752      	lsls	r2, r2, #29
 8000d5a:	d5fc      	bpl.n	8000d56 <HW_TS_RTC_Wakeup_Handler+0x9a>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000d5c:	68da      	ldr	r2, [r3, #12]
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000d64:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <HW_TS_RTC_Wakeup_Handler+0xbc>)
 8000d68:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	e7ef      	b.n	8000d50 <HW_TS_RTC_Wakeup_Handler+0x94>
 8000d70:	200001a4 	.word	0x200001a4
 8000d74:	2000009c 	.word	0x2000009c
 8000d78:	58000800 	.word	0x58000800

08000d7c <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8000d7c:	b508      	push	{r3, lr}
    HAL_StatusTypeDef hal_status = HAL_OK;
    hw_status_t hw_status = hw_uart_ok;

    switch (hw_uart_id)
 8000d7e:	b108      	cbz	r0, 8000d84 <HW_UART_Transmit_DMA+0x8>
    hw_status_t hw_status = hw_uart_ok;
 8000d80:	2000      	movs	r0, #0
        default:
            break;
    }

    return hw_status;
}
 8000d82:	bd08      	pop	{r3, pc}
            HW_huart1TxCb = cb;
 8000d84:	4806      	ldr	r0, [pc, #24]	; (8000da0 <HW_UART_Transmit_DMA+0x24>)
 8000d86:	6003      	str	r3, [r0, #0]
            huart1.Instance = USART1;
 8000d88:	4806      	ldr	r0, [pc, #24]	; (8000da4 <HW_UART_Transmit_DMA+0x28>)
 8000d8a:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <HW_UART_Transmit_DMA+0x2c>)
 8000d8c:	6003      	str	r3, [r0, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8000d8e:	f002 fb4f 	bl	8003430 <HAL_UART_Transmit_DMA>
    switch (hal_status)
 8000d92:	2802      	cmp	r0, #2
 8000d94:	d0f5      	beq.n	8000d82 <HW_UART_Transmit_DMA+0x6>
 8000d96:	2803      	cmp	r0, #3
 8000d98:	d0f3      	beq.n	8000d82 <HW_UART_Transmit_DMA+0x6>
 8000d9a:	2801      	cmp	r0, #1
 8000d9c:	d1f0      	bne.n	8000d80 <HW_UART_Transmit_DMA+0x4>
 8000d9e:	e7f0      	b.n	8000d82 <HW_UART_Transmit_DMA+0x6>
 8000da0:	20001304 	.word	0x20001304
 8000da4:	20001488 	.word	0x20001488
 8000da8:	40013800 	.word	0x40013800

08000dac <HAL_UART_TxCpltCallback>:
    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
    switch ((uint32_t)huart->Instance)
 8000dac:	6802      	ldr	r2, [r0, #0]
 8000dae:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <HAL_UART_TxCpltCallback+0x14>)
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d103      	bne.n	8000dbc <HAL_UART_TxCpltCallback+0x10>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <HAL_UART_TxCpltCallback+0x18>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	b103      	cbz	r3, 8000dbc <HAL_UART_TxCpltCallback+0x10>
            {
                HW_huart1TxCb();
 8000dba:	4718      	bx	r3
        default:
            break;
    }

    return;
}
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40013800 	.word	0x40013800
 8000dc4:	20001304 	.word	0x20001304

08000dc8 <LL_AHB1_GRP1_EnableClock>:
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8000dcc:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000dce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000dd0:	4302      	orrs	r2, r0
 8000dd2:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dd6:	4018      	ands	r0, r3
 8000dd8:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000dda:	9b01      	ldr	r3, [sp, #4]
}
 8000ddc:	b002      	add	sp, #8
 8000dde:	4770      	bx	lr

08000de0 <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8000de4:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000de6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000de8:	4302      	orrs	r2, r0
 8000dea:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	4018      	ands	r0, r3
 8000df0:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000df2:	9b01      	ldr	r3, [sp, #4]
}
 8000df4:	b002      	add	sp, #8
 8000df6:	4770      	bx	lr

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dfa:	b0af      	sub	sp, #188	; 0xbc
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfc:	2248      	movs	r2, #72	; 0x48
 8000dfe:	2100      	movs	r1, #0
 8000e00:	a808      	add	r0, sp, #32
 8000e02:	f004 fb4a 	bl	800549a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e06:	221c      	movs	r2, #28
 8000e08:	2100      	movs	r1, #0
 8000e0a:	a801      	add	r0, sp, #4
 8000e0c:	f004 fb45 	bl	800549a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e10:	2100      	movs	r1, #0
 8000e12:	2250      	movs	r2, #80	; 0x50
 8000e14:	a81a      	add	r0, sp, #104	; 0x68
 8000e16:	f004 fb40 	bl	800549a <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000e1a:	f001 fb67 	bl	80024ec <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000e1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e22:	2400      	movs	r4, #0
 8000e24:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000e28:	f023 0318 	bic.w	r3, r3, #24
 8000e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e30:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8000e34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e3c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8000e40:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e44:	9413      	str	r4, [sp, #76]	; 0x4c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e4a:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e4c:	2207      	movs	r2, #7
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e4e:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e54:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e58:	2701      	movs	r7, #1
 8000e5a:	f44f 7680 	mov.w	r6, #256	; 0x100
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e5e:	2340      	movs	r3, #64	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e60:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e62:	930c      	str	r3, [sp, #48]	; 0x30
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000e64:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e66:	e9cd 760a 	strd	r7, r6, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6a:	f001 fbeb 	bl	8002644 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000e6e:	236f      	movs	r3, #111	; 0x6f
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e70:	4639      	mov	r1, r7
 8000e72:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000e74:	e9cd 3501 	strd	r3, r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e78:	e9cd 4403 	strd	r4, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000e7c:	e9cd 4405 	strd	r4, r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000e80:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e82:	f001 feb7 	bl	8002bf4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8000e86:	f643 030b 	movw	r3, #14347	; 0x380b
 8000e8a:	931a      	str	r3, [sp, #104]	; 0x68
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000e8c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000e90:	9323      	str	r3, [sp, #140]	; 0x8c
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8000e92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8000e96:	e9cd 352b 	strd	r3, r5, [sp, #172]	; 0xac
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e9a:	a81a      	add	r0, sp, #104	; 0x68
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000e9c:	2310      	movs	r3, #16
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e9e:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ea2:	962a      	str	r6, [sp, #168]	; 0xa8
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000ea4:	932d      	str	r3, [sp, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea6:	f002 f846 	bl	8002f36 <HAL_RCCEx_PeriphCLKConfig>
    Error_Handler();
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000eaa:	b02f      	add	sp, #188	; 0xbc
 8000eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000eb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000eb0:	b538      	push	{r3, r4, r5, lr}

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8000eb2:	4a11      	ldr	r2, [pc, #68]	; (8000ef8 <MX_USART1_UART_Init+0x48>)
  huart1.Instance = USART1;
 8000eb4:	4c11      	ldr	r4, [pc, #68]	; (8000efc <MX_USART1_UART_Init+0x4c>)
  huart1.Init.BaudRate = 115200;
 8000eb6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eba:	2500      	movs	r5, #0
  huart1.Init.BaudRate = 115200;
 8000ebc:	e9c4 2300 	strd	r2, r3, [r4]
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ec0:	230c      	movs	r3, #12
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec2:	e9c4 3505 	strd	r3, r5, [r4, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ec6:	4620      	mov	r0, r4
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000ec8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ecc:	e9c4 3507 	strd	r3, r5, [r4, #28]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ed0:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ed4:	6125      	str	r5, [r4, #16]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ed6:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eda:	f003 f941 	bl	8004160 <HAL_UART_Init>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ede:	4629      	mov	r1, r5
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	f003 f9c1 	bl	8004268 <HAL_UARTEx_SetTxFifoThreshold>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	4620      	mov	r0, r4
 8000eea:	f003 f9e1 	bl	80042b0 <HAL_UARTEx_SetRxFifoThreshold>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000eee:	4620      	mov	r0, r4
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ef4:	f003 b99d 	b.w	8004232 <HAL_UARTEx_DisableFifoMode>
 8000ef8:	40013800 	.word	0x40013800
 8000efc:	20001488 	.word	0x20001488

08000f00 <main>:
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000f00:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
{
 8000f04:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 8000f06:	f000 ff19 	bl	8001d3c <HAL_Init>
 8000f0a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000f0e:	015d      	lsls	r5, r3, #5
 8000f10:	d513      	bpl.n	8000f3a <main+0x3a>
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000f12:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000f16:	00d8      	lsls	r0, r3, #3
 8000f18:	d40f      	bmi.n	8000f3a <main+0x3a>

static void Reset_BackupDomain( void )
{
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000f1a:	f001 fae7 	bl	80024ec <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 8000f1e:	f001 fae5 	bl	80024ec <HAL_PWR_EnableBkUpAccess>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000f22:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f2a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000f2e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f36:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000f3a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000f3e:	223f      	movs	r2, #63	; 0x3f
 8000f40:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f46:	6523      	str	r3, [r4, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000f48:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f4e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000f50:	9b01      	ldr	r3, [sp, #4]
 8000f52:	4b4e      	ldr	r3, [pc, #312]	; (800108c <main+0x18c>)
 8000f54:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000f56:	619a      	str	r2, [r3, #24]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	f442 127c 	orr.w	r2, r2, #4128768	; 0x3f0000
 8000f5e:	605a      	str	r2, [r3, #4]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000f60:	695a      	ldr	r2, [r3, #20]
 8000f62:	f442 127c 	orr.w	r2, r2, #4128768	; 0x3f0000
 8000f66:	615a      	str	r2, [r3, #20]
  SET_BIT(IPCCx->C1MR, Channel);
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8000f6e:	605a      	str	r2, [r3, #4]
  SET_BIT(IPCCx->C2MR, Channel);
 8000f70:	695a      	ldr	r2, [r3, #20]
 8000f72:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8000f76:	615a      	str	r2, [r3, #20]
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f003 fcf7 	bl	800496c <OTP_Read>
  if (p_otp)
 8000f7e:	b158      	cbz	r0, 8000f98 <main+0x98>
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000f80:	4b43      	ldr	r3, [pc, #268]	; (8001090 <main+0x190>)
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000f82:	7982      	ldrb	r2, [r0, #6]
 8000f84:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000f88:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8000f8c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8000f90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000f94:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  SystemClock_Config();
 8000f98:	f7ff ff2e 	bl	8000df8 <SystemClock_Config>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8000f9c:	4b3d      	ldr	r3, [pc, #244]	; (8001094 <main+0x194>)
  hrtc.Instance = RTC;
 8000f9e:	4d3e      	ldr	r5, [pc, #248]	; (8001098 <main+0x198>)
 8000fa0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000fa4:	2400      	movs	r4, #0
 8000fa6:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000faa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000fae:	f002 0250 	and.w	r2, r2, #80	; 0x50
 8000fb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	2004      	movs	r0, #4
 8000fb8:	f7ff ff12 	bl	8000de0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f7ff ff0f 	bl	8000de0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc2:	2002      	movs	r0, #2
 8000fc4:	f7ff ff0c 	bl	8000de0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000fc8:	2004      	movs	r0, #4
 8000fca:	f7ff fefd 	bl	8000dc8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f7ff fefa 	bl	8000dc8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fd4:	2002      	movs	r0, #2
 8000fd6:	f7ff fef7 	bl	8000dc8 <LL_AHB1_GRP1_EnableClock>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8000fda:	4622      	mov	r2, r4
 8000fdc:	210f      	movs	r1, #15
 8000fde:	200e      	movs	r0, #14
 8000fe0:	f000 ff02 	bl	8001de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000fe4:	200e      	movs	r0, #14
 8000fe6:	f000 ff33 	bl	8001e50 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8000fea:	4622      	mov	r2, r4
 8000fec:	210f      	movs	r1, #15
 8000fee:	203a      	movs	r0, #58	; 0x3a
 8000ff0:	f000 fefa 	bl	8001de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000ff4:	203a      	movs	r0, #58	; 0x3a
 8000ff6:	f000 ff2b 	bl	8001e50 <HAL_NVIC_EnableIRQ>
  hrtc.Instance = RTC;
 8000ffa:	4828      	ldr	r0, [pc, #160]	; (800109c <main+0x19c>)
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001002:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001006:	e9c0 5400 	strd	r5, r4, [r0]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800100a:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800100c:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001010:	6144      	str	r4, [r0, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001012:	f002 f985 	bl	8003320 <HAL_RTC_Init>
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001016:	23ca      	movs	r3, #202	; 0xca
 8001018:	626b      	str	r3, [r5, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800101a:	2353      	movs	r3, #83	; 0x53
 800101c:	626b      	str	r3, [r5, #36]	; 0x24
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800101e:	68ab      	ldr	r3, [r5, #8]
  hi2c3.Init.Timing = 0x00707CBB;
 8001020:	491f      	ldr	r1, [pc, #124]	; (80010a0 <main+0x1a0>)
 8001022:	f023 0307 	bic.w	r3, r3, #7
 8001026:	60ab      	str	r3, [r5, #8]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001028:	23ff      	movs	r3, #255	; 0xff
 800102a:	626b      	str	r3, [r5, #36]	; 0x24
  hi2c3.Instance = I2C3;
 800102c:	4d1d      	ldr	r5, [pc, #116]	; (80010a4 <main+0x1a4>)
  hi2c3.Init.Timing = 0x00707CBB;
 800102e:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <main+0x1a8>)
  hi2c3.Init.OwnAddress1 = 0;
 8001030:	60ac      	str	r4, [r5, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001032:	2601      	movs	r6, #1
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001034:	4628      	mov	r0, r5
  hi2c3.Init.Timing = 0x00707CBB;
 8001036:	e9c5 1300 	strd	r1, r3, [r5]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800103a:	e9c5 6403 	strd	r6, r4, [r5, #12]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800103e:	e9c5 4405 	strd	r4, r4, [r5, #20]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001042:	e9c5 4407 	strd	r4, r4, [r5, #28]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001046:	f001 f9b4 	bl	80023b2 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800104a:	4621      	mov	r1, r4
 800104c:	4628      	mov	r0, r5
 800104e:	f001 fa01 	bl	8002454 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001052:	4621      	mov	r1, r4
 8001054:	4628      	mov	r0, r5
 8001056:	f001 fa23 	bl	80024a0 <HAL_I2CEx_ConfigDigitalFilter>
  MX_USART1_UART_Init();
 800105a:	f7ff ff29 	bl	8000eb0 <MX_USART1_UART_Init>
  BSP_LED_Init(LED2);
 800105e:	4630      	mov	r0, r6
 8001060:	f000 fd46 	bl	8001af0 <BSP_LED_Init>
  APPE_Init();
 8001064:	f7ff fb3c 	bl	80006e0 <APPE_Init>
  TEMP = 1337;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <main+0x1ac>)
		COMPTEUR++;
 800106a:	4c11      	ldr	r4, [pc, #68]	; (80010b0 <main+0x1b0>)
  TEMP = 1337;
 800106c:	f240 5239 	movw	r2, #1337	; 0x539
 8001070:	801a      	strh	r2, [r3, #0]
  VOLTAGE = 2000;
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <main+0x1b4>)
 8001074:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001078:	801a      	strh	r2, [r3, #0]
		UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 800107a:	f04f 30ff 	mov.w	r0, #4294967295
 800107e:	f004 f951 	bl	8005324 <UTIL_SEQ_Run>
		COMPTEUR++;
 8001082:	6823      	ldr	r3, [r4, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	6023      	str	r3, [r4, #0]
 8001088:	e7f7      	b.n	800107a <main+0x17a>
 800108a:	bf00      	nop
 800108c:	58000c00 	.word	0x58000c00
 8001090:	cafecafe 	.word	0xcafecafe
 8001094:	58000800 	.word	0x58000800
 8001098:	40002800 	.word	0x40002800
 800109c:	20001514 	.word	0x20001514
 80010a0:	40005c00 	.word	0x40005c00
 80010a4:	20001350 	.word	0x20001350
 80010a8:	00707cbb 	.word	0x00707cbb
 80010ac:	200001b4 	.word	0x200001b4
 80010b0:	200001b8 	.word	0x200001b8
 80010b4:	20000004 	.word	0x20000004

080010b8 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80010b8:	b570      	push	{r4, r5, r6, lr}
 80010ba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80010bc:	f000 fe60 	bl	8001d80 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80010c2:	4606      	mov	r6, r0
  if (wait < HAL_MAX_DELAY)
 80010c4:	d002      	beq.n	80010cc <HAL_Delay+0x14>
  {
    wait += HAL_GetTickFreq();
 80010c6:	f000 fe67 	bl	8001d98 <HAL_GetTickFreq>
 80010ca:	4404      	add	r4, r0
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80010cc:	4d06      	ldr	r5, [pc, #24]	; (80010e8 <HAL_Delay+0x30>)
 80010ce:	e004      	b.n	80010da <HAL_Delay+0x22>
 80010d0:	692b      	ldr	r3, [r5, #16]
 80010d2:	f023 0304 	bic.w	r3, r3, #4
 80010d6:	612b      	str	r3, [r5, #16]
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 80010d8:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80010da:	f000 fe51 	bl	8001d80 <HAL_GetTick>
 80010de:	1b80      	subs	r0, r0, r6
 80010e0:	42a0      	cmp	r0, r4
 80010e2:	d3f5      	bcc.n	80010d0 <HAL_Delay+0x18>
  }
}
 80010e4:	bd70      	pop	{r4, r5, r6, pc}
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 80010ec:	4770      	bx	lr

080010ee <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 80010f2:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010f6:	4302      	orrs	r2, r0
 80010f8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fc:	4018      	ands	r0, r3
 80010fe:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001100:	9b01      	ldr	r3, [sp, #4]
}
 8001102:	b002      	add	sp, #8
 8001104:	4770      	bx	lr

08001106 <HAL_MspInit>:
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800110a:	b082      	sub	sp, #8
 800110c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800110e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001112:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001116:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800111a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800111c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111e:	b002      	add	sp, #8
 8001120:	4770      	bx	lr
	...

08001124 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001124:	b510      	push	{r4, lr}
 8001126:	4604      	mov	r4, r0
 8001128:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	2214      	movs	r2, #20
 800112c:	2100      	movs	r1, #0
 800112e:	a801      	add	r0, sp, #4
 8001130:	f004 f9b3 	bl	800549a <memset>
  if(hi2c->Instance==I2C3)
 8001134:	6822      	ldr	r2, [r4, #0]
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <HAL_I2C_MspInit+0x58>)
 8001138:	429a      	cmp	r2, r3
 800113a:	d11c      	bne.n	8001176 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800113c:	2004      	movs	r0, #4
 800113e:	f7ff ffd6 	bl	80010ee <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration    
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001142:	2203      	movs	r2, #3
 8001144:	2312      	movs	r3, #18
 8001146:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2101      	movs	r1, #1
 800114c:	2300      	movs	r3, #0
 800114e:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001152:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001154:	eb0d 0103 	add.w	r1, sp, r3
 8001158:	4809      	ldr	r0, [pc, #36]	; (8001180 <HAL_I2C_MspInit+0x5c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800115a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115c:	f001 f86e 	bl	800223c <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001164:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001166:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800116a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800116c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001172:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001174:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001176:	b006      	add	sp, #24
 8001178:	bd10      	pop	{r4, pc}
 800117a:	bf00      	nop
 800117c:	40005c00 	.word	0x40005c00
 8001180:	48000800 	.word	0x48000800

08001184 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001184:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001186:	2214      	movs	r2, #20
{
 8001188:	b08b      	sub	sp, #44	; 0x2c
 800118a:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	2100      	movs	r1, #0
 800118e:	eb0d 0002 	add.w	r0, sp, r2
 8001192:	f004 f982 	bl	800549a <memset>
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  if(huart->Instance==LPUART1)
 8001196:	6833      	ldr	r3, [r6, #0]
 8001198:	4a53      	ldr	r2, [pc, #332]	; (80012e8 <HAL_UART_MspInit+0x164>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d158      	bne.n	8001250 <HAL_UART_MspInit+0xcc>
  SET_BIT(RCC->APB1ENR2, Periphs);
 800119e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	2001      	movs	r0, #1
 80011a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011a6:	f042 0201 	orr.w	r2, r2, #1
 80011aa:	65da      	str	r2, [r3, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80011ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80011b4:	9b00      	ldr	r3, [sp, #0]
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    PA6     ------> LPUART1_CTS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2702      	movs	r7, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b8:	f7ff ff99 	bl	80010ee <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	230c      	movs	r3, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011be:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80011c0:	2408      	movs	r4, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	e9cd 3705 	strd	r3, r7, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c6:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ce:	e9cd 5307 	strd	r5, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80011d2:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f001 f832 	bl	800223c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011d8:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011de:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80011e4:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	e9cd 5507 	strd	r5, r5, [sp, #28]

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 80011ea:	4c40      	ldr	r4, [pc, #256]	; (80012ec <HAL_UART_MspInit+0x168>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f001 f826 	bl	800223c <HAL_GPIO_Init>
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80011f0:	483f      	ldr	r0, [pc, #252]	; (80012f0 <HAL_UART_MspInit+0x16c>)
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011f2:	6225      	str	r5, [r4, #32]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80011f4:	2311      	movs	r3, #17
 80011f6:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011fa:	2310      	movs	r3, #16
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011fc:	e9c4 3502 	strd	r3, r5, [r4, #8]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001200:	4620      	mov	r0, r4
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001202:	2380      	movs	r3, #128	; 0x80
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001204:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001208:	e9c4 5506 	strd	r5, r5, [r4, #24]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800120c:	f000 feba 	bl	8001f84 <HAL_DMA_Init>
 8001210:	b108      	cbz	r0, 8001216 <HAL_UART_MspInit+0x92>
    {
      Error_Handler();
 8001212:	f7ff ff6b 	bl	80010ec <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 8001216:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800121a:	e9cd 3501 	strd	r3, r5, [sp, #4]
    pSyncConfig.SyncEnable = DISABLE;
    pSyncConfig.EventEnable = DISABLE;
    pSyncConfig.RequestNumber = 1;
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 800121e:	a901      	add	r1, sp, #4
    pSyncConfig.RequestNumber = 1;
 8001220:	2301      	movs	r3, #1
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 8001222:	4832      	ldr	r0, [pc, #200]	; (80012ec <HAL_UART_MspInit+0x168>)
    pSyncConfig.SyncEnable = DISABLE;
 8001224:	f88d 500c 	strb.w	r5, [sp, #12]
    pSyncConfig.EventEnable = DISABLE;
 8001228:	f88d 500d 	strb.w	r5, [sp, #13]
    pSyncConfig.RequestNumber = 1;
 800122c:	9304      	str	r3, [sp, #16]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 800122e:	f000 ffdd 	bl	80021ec <HAL_DMAEx_ConfigMuxSync>
 8001232:	b108      	cbz	r0, 8001238 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8001234:	f7ff ff5a 	bl	80010ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800123c:	6774      	str	r4, [r6, #116]	; 0x74
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800123e:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8001240:	62a6      	str	r6, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001242:	f000 fdd1 	bl	8001de8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001246:	2025      	movs	r0, #37	; 0x25

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001248:	f000 fe02 	bl	8001e50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800124c:	b00b      	add	sp, #44	; 0x2c
 800124e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(huart->Instance==USART1)
 8001250:	4a28      	ldr	r2, [pc, #160]	; (80012f4 <HAL_UART_MspInit+0x170>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d1fa      	bne.n	800124c <HAL_UART_MspInit+0xc8>
  SET_BIT(RCC->APB2ENR, Periphs);
 8001256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	2001      	movs	r0, #1
 800125c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800125e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001262:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800126c:	9b01      	ldr	r3, [sp, #4]
 800126e:	f7ff ff3e 	bl	80010ee <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	2002      	movs	r0, #2
 8001274:	f7ff ff3b 	bl	80010ee <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800127e:	2407      	movs	r4, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	a905      	add	r1, sp, #20
 8001284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800128c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	e9cd 5507 	strd	r5, r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001292:	f000 ffd3 	bl	800223c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001296:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2201      	movs	r2, #1
 800129e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a0:	a905      	add	r1, sp, #20
 80012a2:	4815      	ldr	r0, [pc, #84]	; (80012f8 <HAL_UART_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012a4:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	e9cd 2307 	strd	r2, r3, [sp, #28]
    hdma_usart1_tx.Instance = DMA2_Channel4;
 80012aa:	4c14      	ldr	r4, [pc, #80]	; (80012fc <HAL_UART_MspInit+0x178>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ac:	f000 ffc6 	bl	800223c <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80012b0:	4913      	ldr	r1, [pc, #76]	; (8001300 <HAL_UART_MspInit+0x17c>)
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012b2:	6225      	str	r5, [r4, #32]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80012b4:	230f      	movs	r3, #15
 80012b6:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012ba:	2310      	movs	r3, #16
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012bc:	e9c4 3502 	strd	r3, r5, [r4, #8]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80012c0:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012c2:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012c4:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80012c8:	e9c4 5506 	strd	r5, r5, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80012cc:	f000 fe5a 	bl	8001f84 <HAL_DMA_Init>
 80012d0:	b108      	cbz	r0, 80012d6 <HAL_UART_MspInit+0x152>
      Error_Handler();
 80012d2:	f7ff ff0b 	bl	80010ec <Error_Handler>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80012da:	6774      	str	r4, [r6, #116]	; 0x74
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012dc:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80012de:	62a6      	str	r6, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012e0:	f000 fd82 	bl	8001de8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012e4:	2024      	movs	r0, #36	; 0x24
 80012e6:	e7af      	b.n	8001248 <HAL_UART_MspInit+0xc4>
 80012e8:	40008000 	.word	0x40008000
 80012ec:	20001538 	.word	0x20001538
 80012f0:	40020044 	.word	0x40020044
 80012f4:	40013800 	.word	0x40013800
 80012f8:	48000400 	.word	0x48000400
 80012fc:	20001428 	.word	0x20001428
 8001300:	40020444 	.word	0x40020444

08001304 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8001304:	6802      	ldr	r2, [r0, #0]
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_RTC_MspInit+0x58>)
 8001308:	429a      	cmp	r2, r3
{
 800130a:	b513      	push	{r0, r1, r4, lr}
 800130c:	4604      	mov	r4, r0
  if(hrtc->Instance==RTC)
 800130e:	d122      	bne.n	8001356 <HAL_RTC_MspInit+0x52>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001310:	f001 f8ec 	bl	80024ec <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8001314:	f001 f8ea 	bl	80024ec <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
    __HAL_RCC_RTCAPB_CLK_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 800131c:	4620      	mov	r0, r4
 800131e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001322:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001326:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800132a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800132e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001332:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001336:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 800133a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800133c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001340:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001348:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800134a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END RTC_MspInit 1 */
  }

}
 800134c:	b002      	add	sp, #8
 800134e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8001352:	f002 b841 	b.w	80033d8 <HAL_RTCEx_EnableBypassShadow>
}
 8001356:	b002      	add	sp, #8
 8001358:	bd10      	pop	{r4, pc}
 800135a:	bf00      	nop
 800135c:	40002800 	.word	0x40002800

08001360 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001360:	4770      	bx	lr

08001362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001362:	e7fe      	b.n	8001362 <HardFault_Handler>

08001364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001364:	e7fe      	b.n	8001364 <MemManage_Handler>

08001366 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001366:	e7fe      	b.n	8001366 <BusFault_Handler>

08001368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001368:	e7fe      	b.n	8001368 <UsageFault_Handler>

0800136a <SVC_Handler>:
 800136a:	4770      	bx	lr

0800136c <DebugMon_Handler>:
 800136c:	4770      	bx	lr

0800136e <PendSV_Handler>:
 800136e:	4770      	bx	lr

08001370 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001370:	f000 bcfa 	b.w	8001d68 <HAL_IncTick>

08001374 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001374:	4801      	ldr	r0, [pc, #4]	; (800137c <DMA1_Channel4_IRQHandler+0x8>)
 8001376:	f000 beee 	b.w	8002156 <HAL_DMA_IRQHandler>
 800137a:	bf00      	nop
 800137c:	20001538 	.word	0x20001538

08001380 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001380:	4801      	ldr	r0, [pc, #4]	; (8001388 <USART1_IRQHandler+0x8>)
 8001382:	f002 b8ed 	b.w	8003560 <HAL_UART_IRQHandler>
 8001386:	bf00      	nop
 8001388:	20001488 	.word	0x20001488

0800138c <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800138c:	4801      	ldr	r0, [pc, #4]	; (8001394 <LPUART1_IRQHandler+0x8>)
 800138e:	f002 b8e7 	b.w	8003560 <HAL_UART_IRQHandler>
 8001392:	bf00      	nop
 8001394:	2000139c 	.word	0x2000139c

08001398 <DMA2_Channel4_IRQHandler>:
void DMA2_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001398:	4801      	ldr	r0, [pc, #4]	; (80013a0 <DMA2_Channel4_IRQHandler+0x8>)
 800139a:	f000 bedc 	b.w	8002156 <HAL_DMA_IRQHandler>
 800139e:	bf00      	nop
 80013a0:	20001428 	.word	0x20001428

080013a4 <EXTI4_IRQHandler>:
 80013a4:	4770      	bx	lr

080013a6 <EXTI0_IRQHandler>:
 80013a6:	4770      	bx	lr

080013a8 <RTC_WKUP_IRQHandler>:

}

void RTC_WKUP_IRQHandler(void)
{
  HW_TS_RTC_Wakeup_Handler();
 80013a8:	f7ff bc88 	b.w	8000cbc <HW_TS_RTC_Wakeup_Handler>

080013ac <IPCC_C1_TX_IRQHandler>:
}

void IPCC_C1_TX_IRQHandler(void)
{
  HW_IPCC_Tx_Handler();
 80013ac:	f000 bb0c 	b.w	80019c8 <HW_IPCC_Tx_Handler>

080013b0 <IPCC_C1_RX_IRQHandler>:
  return;
}

void IPCC_C1_RX_IRQHandler(void)
{
  HW_IPCC_Rx_Handler();
 80013b0:	f000 bb6a 	b.w	8001a88 <HW_IPCC_Rx_Handler>

080013b4 <Beacon_Update>:
    HAL_FLASHEx_Erase(&erase, &pageError);
    
    HAL_FLASH_Lock();
  }
  
  *(uint32_t*) SRAM1_BASE = BOOT_MODE_AND_SECTOR; 
 80013b4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80013b8:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <Beacon_Update+0x24>)
 80013ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80013bc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80013c0:	4906      	ldr	r1, [pc, #24]	; (80013dc <Beacon_Update+0x28>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80013c2:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <Beacon_Update+0x2c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80013c4:	68ca      	ldr	r2, [r1, #12]
 80013c6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80013ca:	4313      	orrs	r3, r2
 80013cc:	60cb      	str	r3, [r1, #12]
 80013ce:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80013d2:	bf00      	nop
 80013d4:	e7fd      	b.n	80013d2 <Beacon_Update+0x1e>
 80013d6:	bf00      	nop
 80013d8:	00010601 	.word	0x00010601
 80013dc:	e000ed00 	.word	0xe000ed00
 80013e0:	05fa0004 	.word	0x05fa0004

080013e4 <BLE_UserEvtRx>:
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
  return;
}

static void BLE_UserEvtRx( void * pPayload )
{
 80013e4:	b510      	push	{r4, lr}
 80013e6:	4604      	mov	r4, r0
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 80013e8:	6840      	ldr	r0, [r0, #4]
 80013ea:	3008      	adds	r0, #8
 80013ec:	f003 fdd2 	bl	8004f94 <SVCCTL_UserEvtRx>
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80013f0:	b110      	cbz	r0, 80013f8 <BLE_UserEvtRx+0x14>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 80013f2:	2301      	movs	r3, #1
 80013f4:	7023      	strb	r3, [r4, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 80013f6:	bd10      	pop	{r4, pc}
    pParam->status = HCI_TL_UserEventFlow_Disable;
 80013f8:	7020      	strb	r0, [r4, #0]
}
 80013fa:	e7fc      	b.n	80013f6 <BLE_UserEvtRx+0x12>

080013fc <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
  uint32_t task_id_list;
  switch (status)
 80013fc:	b110      	cbz	r0, 8001404 <BLE_StatusNot+0x8>
 80013fe:	2801      	cmp	r0, #1
 8001400:	d003      	beq.n	800140a <BLE_StatusNot+0xe>
 8001402:	4770      	bx	lr
      /**
       * All tasks that may send an aci/hci commands shall be listed here
       * This is to prevent a new command is sent while one is already pending
       */
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      UTIL_SEQ_PauseTask(task_id_list);
 8001404:	2003      	movs	r0, #3
 8001406:	f003 bf65 	b.w	80052d4 <UTIL_SEQ_PauseTask>
      /**
       * All tasks that may send an aci/hci commands shall be listed here
       * This is to prevent a new command is sent while one is already pending
       */
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      UTIL_SEQ_ResumeTask(task_id_list);
 800140a:	2003      	movs	r0, #3
 800140c:	f003 bf70 	b.w	80052f0 <UTIL_SEQ_ResumeTask>

08001410 <APP_BLE_Init>:
{
 8001410:	b570      	push	{r4, r5, r6, lr}
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8001412:	4b4c      	ldr	r3, [pc, #304]	; (8001544 <APP_BLE_Init+0x134>)
{
 8001414:	b092      	sub	sp, #72	; 0x48
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8001416:	aa06      	add	r2, sp, #24
 8001418:	f103 0628 	add.w	r6, r3, #40	; 0x28
 800141c:	4615      	mov	r5, r2
 800141e:	6818      	ldr	r0, [r3, #0]
 8001420:	6859      	ldr	r1, [r3, #4]
 8001422:	4614      	mov	r4, r2
 8001424:	c403      	stmia	r4!, {r0, r1}
 8001426:	3308      	adds	r3, #8
 8001428:	42b3      	cmp	r3, r6
 800142a:	4622      	mov	r2, r4
 800142c:	d1f7      	bne.n	800141e <APP_BLE_Init+0xe>
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	791b      	ldrb	r3, [r3, #4]
 8001432:	7123      	strb	r3, [r4, #4]
  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8001434:	4b44      	ldr	r3, [pc, #272]	; (8001548 <APP_BLE_Init+0x138>)
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8001436:	6020      	str	r0, [r4, #0]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8001438:	a904      	add	r1, sp, #16
  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800143a:	9304      	str	r3, [sp, #16]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800143c:	4843      	ldr	r0, [pc, #268]	; (800154c <APP_BLE_Init+0x13c>)
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800143e:	4b44      	ldr	r3, [pc, #272]	; (8001550 <APP_BLE_Init+0x140>)
 8001440:	9305      	str	r3, [sp, #20]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8001442:	f003 f9af 	bl	80047a4 <hci_init>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8001446:	2101      	movs	r1, #1
 8001448:	2002      	movs	r0, #2
 800144a:	f003 feed 	bl	8005228 <UTIL_LPM_SetOffMode>
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800144e:	4c41      	ldr	r4, [pc, #260]	; (8001554 <APP_BLE_Init+0x144>)
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8001450:	4a41      	ldr	r2, [pc, #260]	; (8001558 <APP_BLE_Init+0x148>)
 8001452:	2100      	movs	r1, #0
 8001454:	2002      	movs	r0, #2
 8001456:	f003 ff19 	bl	800528c <UTIL_SEQ_RegTask>
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 800145a:	4628      	mov	r0, r5
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 800145c:	2500      	movs	r5, #0
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 800145e:	f003 fa95 	bl	800498c <SHCI_C2_BLE_Init>
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 8001462:	f8ad 5008 	strh.w	r5, [sp, #8]
  hci_reset();
 8001466:	f003 f8ef 	bl	8004648 <hci_reset>
 800146a:	6823      	ldr	r3, [r4, #0]
  if(udn != 0xFFFFFFFF)
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	d060      	beq.n	8001532 <APP_BLE_Init+0x122>
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8001470:	4a3a      	ldr	r2, [pc, #232]	; (800155c <APP_BLE_Init+0x14c>)
 8001472:	6811      	ldr	r1, [r2, #0]
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8001474:	4a3a      	ldr	r2, [pc, #232]	; (8001560 <APP_BLE_Init+0x150>)
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8001476:	0a18      	lsrs	r0, r3, #8
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8001478:	7013      	strb	r3, [r2, #0]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800147a:	0c1b      	lsrs	r3, r3, #16
 800147c:	7093      	strb	r3, [r2, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800147e:	70d1      	strb	r1, [r2, #3]
 8001480:	0a0b      	lsrs	r3, r1, #8
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8001482:	0c09      	lsrs	r1, r1, #16
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8001484:	7050      	strb	r0, [r2, #1]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 8001486:	7113      	strb	r3, [r2, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8001488:	7151      	strb	r1, [r2, #5]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800148a:	2106      	movs	r1, #6
 800148c:	2000      	movs	r0, #0
 800148e:	f003 f889 	bl	80045a4 <aci_hal_write_config_data>
  srd_bd_addr[1] =  0x0000ED6E;
 8001492:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8001496:	9305      	str	r3, [sp, #20]
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8001498:	6823      	ldr	r3, [r4, #0]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800149a:	9304      	str	r3, [sp, #16]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800149c:	aa04      	add	r2, sp, #16
 800149e:	2106      	movs	r1, #6
 80014a0:	202e      	movs	r0, #46	; 0x2e
 80014a2:	f003 f87f 	bl	80045a4 <aci_hal_write_config_data>
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 80014a6:	4a2f      	ldr	r2, [pc, #188]	; (8001564 <APP_BLE_Init+0x154>)
 80014a8:	2110      	movs	r1, #16
 80014aa:	2018      	movs	r0, #24
 80014ac:	f003 f87a 	bl	80045a4 <aci_hal_write_config_data>
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 80014b0:	4a2d      	ldr	r2, [pc, #180]	; (8001568 <APP_BLE_Init+0x158>)
 80014b2:	2110      	movs	r1, #16
 80014b4:	2008      	movs	r0, #8
 80014b6:	f003 f875 	bl	80045a4 <aci_hal_write_config_data>
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80014ba:	2118      	movs	r1, #24
 80014bc:	2001      	movs	r0, #1
 80014be:	f003 f89d 	bl	80045fc <aci_hal_set_tx_power_level>
  aci_gatt_init();
 80014c2:	f003 f821 	bl	8004508 <aci_gatt_init>
    aci_gap_init(role, 0,
 80014c6:	f10d 030e 	add.w	r3, sp, #14
 80014ca:	9301      	str	r3, [sp, #4]
 80014cc:	ab03      	add	r3, sp, #12
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2207      	movs	r2, #7
 80014d2:	f10d 030a 	add.w	r3, sp, #10
 80014d6:	2100      	movs	r1, #0
 80014d8:	2001      	movs	r0, #1
 80014da:	f002 ff87 	bl	80043ec <aci_gap_init>
    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 80014de:	4b23      	ldr	r3, [pc, #140]	; (800156c <APP_BLE_Init+0x15c>)
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80014e6:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 80014ea:	2306      	movs	r3, #6
 80014ec:	2200      	movs	r2, #0
 80014ee:	f003 f829 	bl	8004544 <aci_gatt_update_char_value>
 80014f2:	b110      	cbz	r0, 80014fa <APP_BLE_Init+0xea>
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
 80014f4:	481e      	ldr	r0, [pc, #120]	; (8001570 <APP_BLE_Init+0x160>)
 80014f6:	f004 f835 	bl	8005564 <puts>
  if(aci_gatt_update_char_value(gap_service_handle,
 80014fa:	ab02      	add	r3, sp, #8
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8001502:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8001506:	2302      	movs	r3, #2
 8001508:	2200      	movs	r2, #0
 800150a:	f003 f81b 	bl	8004544 <aci_gatt_update_char_value>
 800150e:	b110      	cbz	r0, 8001516 <APP_BLE_Init+0x106>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
 8001510:	4818      	ldr	r0, [pc, #96]	; (8001574 <APP_BLE_Init+0x164>)
 8001512:	f004 f827 	bl	8005564 <puts>
  SVCCTL_Init();
 8001516:	f003 fd31 	bl	8004f7c <SVCCTL_Init>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_BEACON_UPDATE_REQ_ID, UTIL_SEQ_RFU, Beacon_Update);
 800151a:	4a17      	ldr	r2, [pc, #92]	; (8001578 <APP_BLE_Init+0x168>)
 800151c:	2100      	movs	r1, #0
 800151e:	2001      	movs	r0, #1
 8001520:	f003 feb4 	bl	800528c <UTIL_SEQ_RegTask>
    APP_DBG_MSG("Eddystone TLM beacon advertize\n");
 8001524:	4815      	ldr	r0, [pc, #84]	; (800157c <APP_BLE_Init+0x16c>)
 8001526:	f004 f81d 	bl	8005564 <puts>
    EddystoneTLM_Process();
 800152a:	f000 f8c7 	bl	80016bc <EddystoneTLM_Process>
}
 800152e:	b012      	add	sp, #72	; 0x48
 8001530:	bd70      	pop	{r4, r5, r6, pc}
    otp_addr = OTP_Read(0);
 8001532:	4628      	mov	r0, r5
 8001534:	f003 fa1a 	bl	800496c <OTP_Read>
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8001538:	4a11      	ldr	r2, [pc, #68]	; (8001580 <APP_BLE_Init+0x170>)
 800153a:	2800      	cmp	r0, #0
 800153c:	bf18      	it	ne
 800153e:	4602      	movne	r2, r0
 8001540:	e7a3      	b.n	800148a <APP_BLE_Init+0x7a>
 8001542:	bf00      	nop
 8001544:	08005ec5 	.word	0x08005ec5
 8001548:	20030028 	.word	0x20030028
 800154c:	080013e5 	.word	0x080013e5
 8001550:	080013fd 	.word	0x080013fd
 8001554:	1fff7580 	.word	0x1fff7580
 8001558:	080047f1 	.word	0x080047f1
 800155c:	1fff7584 	.word	0x1fff7584
 8001560:	200001ae 	.word	0x200001ae
 8001564:	08005ef2 	.word	0x08005ef2
 8001568:	08005f02 	.word	0x08005f02
 800156c:	08006070 	.word	0x08006070
 8001570:	08006077 	.word	0x08006077
 8001574:	080060a6 	.word	0x080060a6
 8001578:	080013b5 	.word	0x080013b5
 800157c:	080060d4 	.word	0x080060d4
 8001580:	08005ebf 	.word	0x08005ebf

08001584 <SVCCTL_App_Notification>:
}
 8001584:	2001      	movs	r0, #1
 8001586:	4770      	bx	lr

08001588 <hci_notify_asynch_evt>:
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001588:	2100      	movs	r1, #0
 800158a:	2002      	movs	r0, #2
 800158c:	f003 be8e 	b.w	80052ac <UTIL_SEQ_SetTask>

08001590 <hci_cmd_resp_release>:
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8001590:	2001      	movs	r0, #1
 8001592:	f003 beb9 	b.w	8005308 <UTIL_SEQ_SetEvt>

08001596 <hci_cmd_resp_wait>:
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8001596:	2001      	movs	r0, #1
 8001598:	f003 bf30 	b.w	80053fc <UTIL_SEQ_WaitEvt>

0800159c <EddystoneTLM>:

  return ret;
}

static void EddystoneTLM(void)
{
 800159c:	b5f0      	push	{r4, r5, r6, r7, lr}
  tBleStatus ret;
#ifdef USE_OTA
  uint32_t data_address = OTA_BEACON_DATA_ADDRESS + OFFSET_PAYLOAD_LENGTH; /* 0x8006009 */
#endif
  
  if(tlm_adv == TRUE)
 800159e:	4c41      	ldr	r4, [pc, #260]	; (80016a4 <EddystoneTLM+0x108>)
 80015a0:	7823      	ldrb	r3, [r4, #0]
 80015a2:	2b01      	cmp	r3, #1
{
 80015a4:	b091      	sub	sp, #68	; 0x44
 80015a6:	4627      	mov	r7, r4
  if(tlm_adv == TRUE)
 80015a8:	d16f      	bne.n	800168a <EddystoneTLM+0xee>
  { /* Advertising of TLM */
    ret = aci_gap_set_non_discoverable();
 80015aa:	f002 fea5 	bl	80042f8 <aci_gap_set_non_discoverable>
    
    if (ret != BLE_STATUS_SUCCESS)
 80015ae:	4604      	mov	r4, r0
 80015b0:	b100      	cbz	r0, 80015b4 <EddystoneTLM+0x18>
 80015b2:	e7fe      	b.n	80015b2 <EddystoneTLM+0x16>
  uint16_t AdvertisingInterval = (EddystoneTLM_Init->AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
 80015b4:	4b3c      	ldr	r3, [pc, #240]	; (80016a8 <EddystoneTLM+0x10c>)
  uint8_t service_data[] =
 80015b6:	4a3d      	ldr	r2, [pc, #244]	; (80016ac <EddystoneTLM+0x110>)
 80015b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80015ba:	2220      	movs	r2, #32
 80015bc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 80015c0:	789a      	ldrb	r2, [r3, #2]
 80015c2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
    (EddystoneTLM_Init->BatteryVoltage & 0xFF00) >> 8,                       /*< Battery voltage. */
 80015c6:	889a      	ldrh	r2, [r3, #4]
  uint8_t service_data[] =
 80015c8:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
    (EddystoneTLM_Init->BatteryVoltage & 0xFF00) >> 8,                       /*< Battery voltage. */
 80015cc:	0a11      	lsrs	r1, r2, #8
    (EddystoneTLM_Init->BeaconTemperature & 0xFF00) >> 8,                    /*< Beacon temperature. */
 80015ce:	88da      	ldrh	r2, [r3, #6]
  uint8_t service_data[] =
 80015d0:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
 80015d4:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
    (EddystoneTLM_Init->BeaconTemperature & 0xFF00) >> 8,                    /*< Beacon temperature. */
 80015d8:	0a11      	lsrs	r1, r2, #8
    (EddystoneTLM_Init->AdvertisingCount & 0xFF000000) >> 24,                /*< Advertising PDU count. */
 80015da:	689a      	ldr	r2, [r3, #8]
  uint16_t AdvertisingInterval = (EddystoneTLM_Init->AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
 80015dc:	881d      	ldrh	r5, [r3, #0]
  uint8_t service_data[] =
 80015de:	f88d 1034 	strb.w	r1, [sp, #52]	; 0x34
    (EddystoneTLM_Init->Uptime & 0xFF000000) >> 24,                          /*< Time since power-on or reboot. */
 80015e2:	68db      	ldr	r3, [r3, #12]
  uint8_t service_data[] =
 80015e4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
    (EddystoneTLM_Init->AdvertisingCount & 0xFF000000) >> 24,                /*< Advertising PDU count. */
 80015e8:	0e11      	lsrs	r1, r2, #24
  uint8_t service_data[] =
 80015ea:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
    (EddystoneTLM_Init->AdvertisingCount & 0x00FF0000) >> 16,
 80015ee:	0c11      	lsrs	r1, r2, #16
  uint8_t service_data[] =
 80015f0:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
    (EddystoneTLM_Init->AdvertisingCount & 0x0000FF00) >> 8,
 80015f4:	0a11      	lsrs	r1, r2, #8
    (EddystoneTLM_Init->Uptime & 0xFF000000) >> 24,                          /*< Time since power-on or reboot. */
 80015f6:	0e1a      	lsrs	r2, r3, #24
  uint8_t service_data[] =
 80015f8:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
    (EddystoneTLM_Init->Uptime & 0x00FF0000) >> 16,
 80015fc:	0c1a      	lsrs	r2, r3, #16
  uint8_t service_data[] =
 80015fe:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 8001602:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    (EddystoneTLM_Init->Uptime & 0x0000FF00) >> 8,
 8001606:	0a1a      	lsrs	r2, r3, #8
  uint8_t service_uuid_list[] =
 8001608:	4b29      	ldr	r3, [pc, #164]	; (80016b0 <EddystoneTLM+0x114>)
  uint8_t service_data[] =
 800160a:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
  uint8_t service_uuid_list[] =
 800160e:	6818      	ldr	r0, [r3, #0]
  uint8_t flags[] =
 8001610:	f833 2f04 	ldrh.w	r2, [r3, #4]!
  uint8_t service_data[] =
 8001614:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  uint8_t flags[] =
 8001618:	789b      	ldrb	r3, [r3, #2]
  uint8_t service_uuid_list[] =
 800161a:	900a      	str	r0, [sp, #40]	; 0x28
  hci_le_set_scan_response_data(0, NULL);
 800161c:	4621      	mov	r1, r4
  uint16_t AdvertisingInterval = (EddystoneTLM_Init->AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
 800161e:	012d      	lsls	r5, r5, #4
 8001620:	260a      	movs	r6, #10
  hci_le_set_scan_response_data(0, NULL);
 8001622:	4620      	mov	r0, r4
  uint16_t AdvertisingInterval = (EddystoneTLM_Init->AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
 8001624:	fb95 f5f6 	sdiv	r5, r5, r6
 8001628:	b2ad      	uxth	r5, r5
  uint8_t flags[] =
 800162a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800162e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  hci_le_set_scan_response_data(0, NULL);
 8001632:	f003 f827 	bl	8004684 <hci_le_set_scan_response_data>
  ret = aci_gap_set_discoverable(ADV_NONCONN_IND,                          /*< Advertise as non-connectable, undirected. */
 8001636:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800163a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800163e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001642:	9400      	str	r4, [sp, #0]
 8001644:	4623      	mov	r3, r4
 8001646:	462a      	mov	r2, r5
 8001648:	4629      	mov	r1, r5
 800164a:	2003      	movs	r0, #3
 800164c:	f002 fe72 	bl	8004334 <aci_gap_set_discoverable>
  if (ret != BLE_STATUS_SUCCESS)
 8001650:	b988      	cbnz	r0, 8001676 <EddystoneTLM+0xda>
  ret = aci_gap_delete_ad_type(AD_TYPE_TX_POWER_LEVEL);
 8001652:	4630      	mov	r0, r6
 8001654:	f002 ff36 	bl	80044c4 <aci_gap_delete_ad_type>
  if (ret != BLE_STATUS_SUCCESS)
 8001658:	b968      	cbnz	r0, 8001676 <EddystoneTLM+0xda>
  ret = aci_gap_update_adv_data(sizeof(service_data), service_data);
 800165a:	a90b      	add	r1, sp, #44	; 0x2c
 800165c:	2012      	movs	r0, #18
 800165e:	f002 ff07 	bl	8004470 <aci_gap_update_adv_data>
  if (ret != BLE_STATUS_SUCCESS)
 8001662:	b940      	cbnz	r0, 8001676 <EddystoneTLM+0xda>
  ret = aci_gap_update_adv_data(sizeof(service_uuid_list), service_uuid_list);
 8001664:	a90a      	add	r1, sp, #40	; 0x28
 8001666:	2004      	movs	r0, #4
 8001668:	f002 ff02 	bl	8004470 <aci_gap_update_adv_data>
  if (ret != BLE_STATUS_SUCCESS)
 800166c:	b918      	cbnz	r0, 8001676 <EddystoneTLM+0xda>
  ret = aci_gap_update_adv_data(sizeof(flags), flags);
 800166e:	a909      	add	r1, sp, #36	; 0x24
 8001670:	2003      	movs	r0, #3
 8001672:	f002 fefd 	bl	8004470 <aci_gap_update_adv_data>
    }
#else
    /* No OTA */
    EddystoneTLM_Init(&EddystoneTLM_InitStruct);
    
    tlm_adv = FALSE;
 8001676:	2300      	movs	r3, #0
 8001678:	703b      	strb	r3, [r7, #0]
    
    /* Wait 1s */      
    HW_TS_Start(TimerTLM_Id, DEFAULT_BEACON_SEC);
 800167a:	f640 0101 	movw	r1, #2049	; 0x801
#else
    /* No OTA */
    EddystoneURL_Init(&EddystoneURL_InitStruct);
    tlm_adv = TRUE;
    /* 10s of URL advertize */      
    HW_TS_Start(TimerTLM_Id, DEFAULT_BEACON_SEC * 10);
 800167e:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <EddystoneTLM+0x118>)
 8001680:	7818      	ldrb	r0, [r3, #0]
 8001682:	f7ff fa7b 	bl	8000b7c <HW_TS_Start>
#endif
  }
}
 8001686:	b011      	add	sp, #68	; 0x44
 8001688:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = aci_gap_set_non_discoverable();
 800168a:	f002 fe35 	bl	80042f8 <aci_gap_set_non_discoverable>
    if (ret != BLE_STATUS_SUCCESS)
 800168e:	b100      	cbz	r0, 8001692 <EddystoneTLM+0xf6>
 8001690:	e7fe      	b.n	8001690 <EddystoneTLM+0xf4>
    EddystoneURL_Init(&EddystoneURL_InitStruct);
 8001692:	4809      	ldr	r0, [pc, #36]	; (80016b8 <EddystoneTLM+0x11c>)
 8001694:	f000 f8bc 	bl	8001810 <EddystoneURL_Init>
    tlm_adv = TRUE;
 8001698:	2301      	movs	r3, #1
 800169a:	7023      	strb	r3, [r4, #0]
    HW_TS_Start(TimerTLM_Id, DEFAULT_BEACON_SEC * 10);
 800169c:	f245 010a 	movw	r1, #20490	; 0x500a
 80016a0:	e7ed      	b.n	800167e <EddystoneTLM+0xe2>
 80016a2:	bf00      	nop
 80016a4:	20001598 	.word	0x20001598
 80016a8:	2000159c 	.word	0x2000159c
 80016ac:	feaa1611 	.word	0xfeaa1611
 80016b0:	08005f12 	.word	0x08005f12
 80016b4:	200015ac 	.word	0x200015ac
 80016b8:	200015b0 	.word	0x200015b0

080016bc <EddystoneTLM_Process>:

/* Exported functions --------------------------------------------------------*/
void EddystoneTLM_Process(void)
{
 80016bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifdef USE_OTA
  uint32_t data_address = OTA_BEACON_DATA_ADDRESS + OFFSET_PAYLOAD_LENGTH; /* 0x8006009 */
  uint8_t length = *(uint8_t *)(data_address);
#else
  uint8_t UrlScheme     = URL_PREFIX;
  uint8_t Url[]         = PHYSICAL_WEB_URL;
 80016c0:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8001808 <EddystoneTLM_Process+0x14c>
  uint8_t NamespaceID[] = { NAMESPACE_ID };
 80016c4:	f8df 8144 	ldr.w	r8, [pc, #324]	; 800180c <EddystoneTLM_Process+0x150>
  uint8_t Url[]         = PHYSICAL_WEB_URL;
 80016c8:	f8d9 0000 	ldr.w	r0, [r9]
 80016cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80016d0:	f8b9 2008 	ldrh.w	r2, [r9, #8]
  uint8_t BeaconID[]    = { BEACON_ID };
  
  EddystoneURL_InitStruct.AdvertisingInterval = ADVERTISING_INTERVAL_IN_MS;
 80016d4:	4e40      	ldr	r6, [pc, #256]	; (80017d8 <EddystoneTLM_Process+0x11c>)
  EddystoneURL_InitStruct.CalibratedTxPower = CALIBRATED_TX_POWER_AT_0_M;
  EddystoneURL_InitStruct.UrlScheme = UrlScheme;
  EddystoneURL_InitStruct.Url = Url;
  EddystoneURL_InitStruct.UrlLength = sizeof(Url) - 1;

  EddystoneTLM_InitStruct.AdvertisingInterval = ADVERTISING_INTERVAL_IN_MS;
 80016d6:	4c41      	ldr	r4, [pc, #260]	; (80017dc <EddystoneTLM_Process+0x120>)
  EddystoneTLM_InitStruct.BatteryVoltage = 3000;
  EddystoneTLM_InitStruct.BeaconTemperature = 1337;
  EddystoneTLM_InitStruct.Uptime = 2000000;
  EddystoneTLM_InitStruct.AdvertisingCount = 3000000;

  EddystoneUID_InitStruct.AdvertisingInterval = ADVERTISING_INTERVAL_IN_MS;
 80016d8:	4d41      	ldr	r5, [pc, #260]	; (80017e0 <EddystoneTLM_Process+0x124>)
{
 80016da:	b095      	sub	sp, #84	; 0x54
  uint8_t Url[]         = PHYSICAL_WEB_URL;
 80016dc:	ab0e      	add	r3, sp, #56	; 0x38
 80016de:	c303      	stmia	r3!, {r0, r1}
 80016e0:	9201      	str	r2, [sp, #4]
  uint8_t NamespaceID[] = { NAMESPACE_ID };
 80016e2:	f858 0f07 	ldr.w	r0, [r8, #7]!
  uint8_t Url[]         = PHYSICAL_WEB_URL;
 80016e6:	f899 200a 	ldrb.w	r2, [r9, #10]
 80016ea:	9202      	str	r2, [sp, #8]
 80016ec:	9a01      	ldr	r2, [sp, #4]
 80016ee:	801a      	strh	r2, [r3, #0]
  uint8_t NamespaceID[] = { NAMESPACE_ID };
 80016f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
  uint8_t Url[]         = PHYSICAL_WEB_URL;
 80016f4:	9a02      	ldr	r2, [sp, #8]
 80016f6:	709a      	strb	r2, [r3, #2]
  uint8_t NamespaceID[] = { NAMESPACE_ID };
 80016f8:	ab08      	add	r3, sp, #32
 80016fa:	c303      	stmia	r3!, {r0, r1}
 80016fc:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8001700:	801a      	strh	r2, [r3, #0]
  uint8_t BeaconID[]    = { BEACON_ID };
 8001702:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001706:	f8ad 3014 	strh.w	r3, [sp, #20]
  EddystoneURL_InitStruct.AdvertisingInterval = ADVERTISING_INTERVAL_IN_MS;
 800170a:	4b36      	ldr	r3, [pc, #216]	; (80017e4 <EddystoneTLM_Process+0x128>)
  uint8_t NamespaceID[] = { NAMESPACE_ID };
 800170c:	9203      	str	r2, [sp, #12]
  EddystoneURL_InitStruct.AdvertisingInterval = ADVERTISING_INTERVAL_IN_MS;
 800170e:	6033      	str	r3, [r6, #0]
  EddystoneURL_InitStruct.UrlLength = sizeof(Url) - 1;
 8001710:	f04f 020a 	mov.w	r2, #10
  EddystoneURL_InitStruct.Url = Url;
 8001714:	ab0e      	add	r3, sp, #56	; 0x38
 8001716:	6073      	str	r3, [r6, #4]
  EddystoneURL_InitStruct.UrlLength = sizeof(Url) - 1;
 8001718:	7232      	strb	r2, [r6, #8]
  EddystoneTLM_InitStruct.BeaconTemperature = 1337;
 800171a:	4b33      	ldr	r3, [pc, #204]	; (80017e8 <EddystoneTLM_Process+0x12c>)
 800171c:	4a33      	ldr	r2, [pc, #204]	; (80017ec <EddystoneTLM_Process+0x130>)
  EddystoneUID_InitStruct.CalibratedTxPower = CALIBRATED_TX_POWER_AT_0_M;
  EddystoneUID_InitStruct.NamespaceID = NamespaceID;
  EddystoneUID_InitStruct.BeaconID = BeaconID;
#endif

  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(TimerTLM_Id), hw_ts_SingleShot, EddystoneTLM);
 800171e:	4934      	ldr	r1, [pc, #208]	; (80017f0 <EddystoneTLM_Process+0x134>)
  uint8_t BeaconID[]    = { BEACON_ID };
 8001720:	2700      	movs	r7, #0
  EddystoneTLM_InitStruct.AdvertisingInterval = ADVERTISING_INTERVAL_IN_MS;
 8001722:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
  EddystoneTLM_InitStruct.BeaconTemperature = 1337;
 8001726:	e9c4 2301 	strd	r2, r3, [r4, #4]
  EddystoneUID_InitStruct.CalibratedTxPower = CALIBRATED_TX_POWER_AT_0_M;
 800172a:	f04f 0bea 	mov.w	fp, #234	; 0xea
  EddystoneUID_InitStruct.NamespaceID = NamespaceID;
 800172e:	ab08      	add	r3, sp, #32
  EddystoneTLM_InitStruct.AdvertisingCount = 3000000;
 8001730:	4a30      	ldr	r2, [pc, #192]	; (80017f4 <EddystoneTLM_Process+0x138>)
 8001732:	60e2      	str	r2, [r4, #12]
  uint8_t BeaconID[]    = { BEACON_ID };
 8001734:	9704      	str	r7, [sp, #16]
  EddystoneTLM_InitStruct.AdvertisingInterval = ADVERTISING_INTERVAL_IN_MS;
 8001736:	f8a4 a000 	strh.w	sl, [r4]
  EddystoneTLM_InitStruct.TLM_Version       = 0;
 800173a:	70a7      	strb	r7, [r4, #2]
  EddystoneUID_InitStruct.AdvertisingInterval = ADVERTISING_INTERVAL_IN_MS;
 800173c:	f8a5 a000 	strh.w	sl, [r5]
  EddystoneUID_InitStruct.CalibratedTxPower = CALIBRATED_TX_POWER_AT_0_M;
 8001740:	f885 b002 	strb.w	fp, [r5, #2]
  EddystoneUID_InitStruct.NamespaceID = NamespaceID;
 8001744:	606b      	str	r3, [r5, #4]
  EddystoneUID_InitStruct.BeaconID = BeaconID;
 8001746:	ab04      	add	r3, sp, #16
 8001748:	60ab      	str	r3, [r5, #8]
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(TimerTLM_Id), hw_ts_SingleShot, EddystoneTLM);
 800174a:	463a      	mov	r2, r7
 800174c:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <EddystoneTLM_Process+0x13c>)
 800174e:	4638      	mov	r0, r7
 8001750:	f7ff f994 	bl	8000a7c <HW_TS_Create>
  }
  else
#endif
  {
    uint8_t UrlScheme     = URL_PREFIX;
    uint8_t Url[]         = PHYSICAL_WEB_URL;
 8001754:	f8d9 0000 	ldr.w	r0, [r9]
 8001758:	f8d9 1004 	ldr.w	r1, [r9, #4]
    uint8_t NamespaceID[] = { NAMESPACE_ID };
    uint8_t BeaconID[]    = { BEACON_ID };
 800175c:	9706      	str	r7, [sp, #24]
    uint8_t Url[]         = PHYSICAL_WEB_URL;
 800175e:	ab11      	add	r3, sp, #68	; 0x44
 8001760:	c303      	stmia	r3!, {r0, r1}
 8001762:	9901      	ldr	r1, [sp, #4]
 8001764:	8019      	strh	r1, [r3, #0]
 8001766:	9902      	ldr	r1, [sp, #8]
 8001768:	7099      	strb	r1, [r3, #2]
    uint8_t NamespaceID[] = { NAMESPACE_ID };
 800176a:	f8d8 0000 	ldr.w	r0, [r8]
 800176e:	f8d8 1004 	ldr.w	r1, [r8, #4]
    EddystoneURL_InitStruct.CalibratedTxPower   = CALIBRATED_TX_POWER_AT_0_M;
    EddystoneURL_InitStruct.UrlScheme           = UrlScheme;
    EddystoneURL_InitStruct.Url                 = Url;
    EddystoneURL_InitStruct.UrlLength           = sizeof(Url) - 1;

    EddystoneTLM_InitStruct.AdvertisingInterval = ADVERTISING_INTERVAL_IN_MS;
 8001772:	f8a4 a000 	strh.w	sl, [r4]
    uint8_t NamespaceID[] = { NAMESPACE_ID };
 8001776:	ab0b      	add	r3, sp, #44	; 0x2c
 8001778:	c303      	stmia	r3!, {r0, r1}
 800177a:	9903      	ldr	r1, [sp, #12]
 800177c:	8019      	strh	r1, [r3, #0]
    EddystoneURL_InitStruct.AdvertisingInterval = ADVERTISING_INTERVAL_IN_MS;
 800177e:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <EddystoneTLM_Process+0x128>)
 8001780:	6033      	str	r3, [r6, #0]
    EddystoneURL_InitStruct.Url                 = Url;
 8001782:	ab11      	add	r3, sp, #68	; 0x44
 8001784:	6073      	str	r3, [r6, #4]
    EddystoneURL_InitStruct.UrlLength           = sizeof(Url) - 1;
 8001786:	f04f 030a 	mov.w	r3, #10
 800178a:	7233      	strb	r3, [r6, #8]
    EddystoneTLM_InitStruct.TLM_Version         = 0;
    EddystoneTLM_InitStruct.BatteryVoltage      = VOLTAGE;
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <EddystoneTLM_Process+0x140>)
    EddystoneTLM_InitStruct.TLM_Version         = 0;
 800178e:	70a7      	strb	r7, [r4, #2]
    EddystoneTLM_InitStruct.BatteryVoltage      = VOLTAGE;
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	80a3      	strh	r3, [r4, #4]
    EddystoneTLM_InitStruct.BeaconTemperature   = TEMP;
 8001794:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <EddystoneTLM_Process+0x144>)
    EddystoneTLM_InitStruct.Uptime              = 2000000;
    EddystoneTLM_InitStruct.AdvertisingCount    = COMPTEUR;

    EddystoneUID_InitStruct.AdvertisingInterval = ADVERTISING_INTERVAL_IN_MS;
 8001796:	f8a5 a000 	strh.w	sl, [r5]
    EddystoneTLM_InitStruct.BeaconTemperature   = TEMP;
 800179a:	881a      	ldrh	r2, [r3, #0]
    EddystoneTLM_InitStruct.AdvertisingCount    = COMPTEUR;
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	60a3      	str	r3, [r4, #8]
    EddystoneUID_InitStruct.CalibratedTxPower   = CALIBRATED_TX_POWER_AT_0_M;
    EddystoneUID_InitStruct.NamespaceID         = NamespaceID;
 80017a0:	ab0b      	add	r3, sp, #44	; 0x2c
    uint8_t BeaconID[]    = { BEACON_ID };
 80017a2:	f44f 7180 	mov.w	r1, #256	; 0x100
    EddystoneTLM_InitStruct.BeaconTemperature   = TEMP;
 80017a6:	80e2      	strh	r2, [r4, #6]
    EddystoneUID_InitStruct.NamespaceID         = NamespaceID;
 80017a8:	606b      	str	r3, [r5, #4]
    EddystoneTLM_InitStruct.Uptime              = 2000000;
 80017aa:	4a12      	ldr	r2, [pc, #72]	; (80017f4 <EddystoneTLM_Process+0x138>)
    uint8_t BeaconID[]    = { BEACON_ID };
 80017ac:	f8ad 101c 	strh.w	r1, [sp, #28]
    EddystoneUID_InitStruct.BeaconID            = BeaconID;
 80017b0:	ab06      	add	r3, sp, #24
    
    EddystoneURL_Init(&EddystoneURL_InitStruct);
 80017b2:	4630      	mov	r0, r6
    EddystoneTLM_InitStruct.Uptime              = 2000000;
 80017b4:	60e2      	str	r2, [r4, #12]
    EddystoneUID_InitStruct.BeaconID            = BeaconID;
 80017b6:	60ab      	str	r3, [r5, #8]
    EddystoneUID_InitStruct.CalibratedTxPower   = CALIBRATED_TX_POWER_AT_0_M;
 80017b8:	f885 b002 	strb.w	fp, [r5, #2]
    EddystoneURL_Init(&EddystoneURL_InitStruct);
 80017bc:	f000 f828 	bl	8001810 <EddystoneURL_Init>
    tlm_adv = TRUE;
 80017c0:	4b10      	ldr	r3, [pc, #64]	; (8001804 <EddystoneTLM_Process+0x148>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]

    /* 10s of URL advertize */      
    HW_TS_Start(TimerTLM_Id, DEFAULT_BEACON_SEC * 10);
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <EddystoneTLM_Process+0x134>)
 80017c8:	f245 010a 	movw	r1, #20490	; 0x500a
 80017cc:	7818      	ldrb	r0, [r3, #0]
 80017ce:	f7ff f9d5 	bl	8000b7c <HW_TS_Start>
  }
}
 80017d2:	b015      	add	sp, #84	; 0x54
 80017d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017d8:	200015b0 	.word	0x200015b0
 80017dc:	2000159c 	.word	0x2000159c
 80017e0:	200015bc 	.word	0x200015bc
 80017e4:	02ea03e8 	.word	0x02ea03e8
 80017e8:	002dc6c0 	.word	0x002dc6c0
 80017ec:	05390bb8 	.word	0x05390bb8
 80017f0:	200015ac 	.word	0x200015ac
 80017f4:	001e8480 	.word	0x001e8480
 80017f8:	0800159d 	.word	0x0800159d
 80017fc:	20000004 	.word	0x20000004
 8001800:	200001b4 	.word	0x200001b4
 8001804:	20001598 	.word	0x20001598
 8001808:	080060f3 	.word	0x080060f3
 800180c:	08005f12 	.word	0x08005f12

08001810 <EddystoneURL_Init>:
/* Private macros ------------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
tBleStatus EddystoneURL_Init(EddystoneURL_InitTypeDef *EddystoneURL_Init)
{
 8001810:	b5f0      	push	{r4, r5, r6, r7, lr}
  tBleStatus ret;
  uint16_t AdvertisingInterval = (EddystoneURL_Init->AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
  uint8_t service_data[24] =
  {
    6 + EddystoneURL_Init->UrlLength,                                       /*< Length. */
 8001812:	7a03      	ldrb	r3, [r0, #8]
  uint16_t AdvertisingInterval = (EddystoneURL_Init->AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
 8001814:	8805      	ldrh	r5, [r0, #0]
{
 8001816:	b091      	sub	sp, #68	; 0x44
    6 + EddystoneURL_Init->UrlLength,                                       /*< Length. */
 8001818:	3306      	adds	r3, #6
  uint8_t service_data[24] =
 800181a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800181e:	2316      	movs	r3, #22
 8001820:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001824:	23aa      	movs	r3, #170	; 0xaa
 8001826:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800182a:	23fe      	movs	r3, #254	; 0xfe
 800182c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8001830:	2310      	movs	r3, #16
 8001832:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8001836:	7883      	ldrb	r3, [r0, #2]
 8001838:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 800183c:	78c3      	ldrb	r3, [r0, #3]
 800183e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    0x00,
    0x00,
    0x00,
    0x00
  };
  uint8_t service_uuid_list[] =
 8001842:	4b32      	ldr	r3, [pc, #200]	; (800190c <EddystoneURL_Init+0xfc>)
{
 8001844:	4606      	mov	r6, r0
  uint8_t service_uuid_list[] =
 8001846:	6818      	ldr	r0, [r3, #0]
  {
    3,                                                                      /*< Length. */
    AD_TYPE_16_BIT_SERV_UUID_CMPLT_LIST,                                    /*< Complete list of 16-bit Service UUIDs data type value. */
    0xAA, 0xFE                                                              /*< 16-bit Eddystone UUID. */
  };
  uint8_t flags[] =
 8001848:	f833 2f04 	ldrh.w	r2, [r3, #4]!
  uint8_t service_uuid_list[] =
 800184c:	9009      	str	r0, [sp, #36]	; 0x24
  uint8_t service_data[24] =
 800184e:	2400      	movs	r4, #0
    AD_TYPE_FLAGS,                                                          /*< Flags data type value. */
    (FLAG_BIT_LE_GENERAL_DISCOVERABLE_MODE | FLAG_BIT_BR_EDR_NOT_SUPPORTED) /*< BLE general discoverable, without BR/EDR support. */
  };

  /* Disable scan response. */
  hci_le_set_scan_response_data(0, NULL);
 8001850:	4621      	mov	r1, r4
  uint16_t AdvertisingInterval = (EddystoneURL_Init->AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
 8001852:	012d      	lsls	r5, r5, #4
 8001854:	270a      	movs	r7, #10
  uint8_t service_data[24] =
 8001856:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
  uint16_t AdvertisingInterval = (EddystoneURL_Init->AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
 800185a:	fb95 f5f7 	sdiv	r5, r5, r7
  uint8_t service_data[24] =
 800185e:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
  uint16_t AdvertisingInterval = (EddystoneURL_Init->AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
 8001862:	b2ad      	uxth	r5, r5
  uint8_t service_data[24] =
 8001864:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
 8001868:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
 800186c:	f88d 4033 	strb.w	r4, [sp, #51]	; 0x33
 8001870:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
 8001874:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
 8001878:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
 800187c:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
 8001880:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
 8001884:	f88d 4039 	strb.w	r4, [sp, #57]	; 0x39
 8001888:	f88d 403a 	strb.w	r4, [sp, #58]	; 0x3a
 800188c:	f88d 403b 	strb.w	r4, [sp, #59]	; 0x3b
 8001890:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
 8001894:	f88d 403d 	strb.w	r4, [sp, #61]	; 0x3d
 8001898:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
 800189c:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
  hci_le_set_scan_response_data(0, NULL);
 80018a0:	4620      	mov	r0, r4
  uint8_t flags[] =
 80018a2:	789b      	ldrb	r3, [r3, #2]
 80018a4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 80018a8:	f8ad 2020 	strh.w	r2, [sp, #32]
  hci_le_set_scan_response_data(0, NULL);
 80018ac:	f002 feea 	bl	8004684 <hci_le_set_scan_response_data>

  /* Put the device in a non-connectable mode. */
  ret = aci_gap_set_discoverable(ADV_NONCONN_IND,                          /*< Advertise as non-connectable, undirected. */
 80018b0:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80018b4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80018b8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80018bc:	9400      	str	r4, [sp, #0]
 80018be:	4623      	mov	r3, r4
 80018c0:	462a      	mov	r2, r5
 80018c2:	4629      	mov	r1, r5
 80018c4:	2003      	movs	r0, #3
 80018c6:	f002 fd35 	bl	8004334 <aci_gap_set_discoverable>
                                 PUBLIC_ADDR, NO_WHITE_LIST_USE,           /*< Use the public address, with no white list. */
                                 0, NULL,                                  /*< Do not use a local name. */
                                 0, NULL,                                  /*< Do not include the service UUID list. */
                                 0, 0);                                    /*< Do not set a slave connection interval. */

  if (ret != BLE_STATUS_SUCCESS)
 80018ca:	b9a8      	cbnz	r0, 80018f8 <EddystoneURL_Init+0xe8>
  {
    return ret;
  }

  /* Remove the TX power level advertisement (this is done to decrease the packet size). */
  ret = aci_gap_delete_ad_type(AD_TYPE_TX_POWER_LEVEL);
 80018cc:	4638      	mov	r0, r7
 80018ce:	f002 fdf9 	bl	80044c4 <aci_gap_delete_ad_type>

  if (ret != BLE_STATUS_SUCCESS)
 80018d2:	b988      	cbnz	r0, 80018f8 <EddystoneURL_Init+0xe8>
  {
    return ret;
  }

  for (uint8_t i = 0; i < EddystoneURL_Init->UrlLength; ++i)
 80018d4:	7a32      	ldrb	r2, [r6, #8]
 80018d6:	b2c3      	uxtb	r3, r0
 80018d8:	429a      	cmp	r2, r3
 80018da:	d80f      	bhi.n	80018fc <EddystoneURL_Init+0xec>
  {
    service_data[7 + i] = EddystoneURL_Init->Url[i];
  }

  /* Update the service data. */
  ret = aci_gap_update_adv_data(sizeof(service_data), service_data);
 80018dc:	a90a      	add	r1, sp, #40	; 0x28
 80018de:	2018      	movs	r0, #24
 80018e0:	f002 fdc6 	bl	8004470 <aci_gap_update_adv_data>

  if (ret != BLE_STATUS_SUCCESS)
 80018e4:	b940      	cbnz	r0, 80018f8 <EddystoneURL_Init+0xe8>
  {
    return ret;
  }

  /* Update the service UUID list. */
  ret = aci_gap_update_adv_data(sizeof(service_uuid_list), service_uuid_list);
 80018e6:	a909      	add	r1, sp, #36	; 0x24
 80018e8:	2004      	movs	r0, #4
 80018ea:	f002 fdc1 	bl	8004470 <aci_gap_update_adv_data>

  if (ret != BLE_STATUS_SUCCESS)
 80018ee:	b918      	cbnz	r0, 80018f8 <EddystoneURL_Init+0xe8>
  {
    return ret;
  }

  /* Update the adverstising flags. */
  ret = aci_gap_update_adv_data(sizeof(flags), flags);
 80018f0:	a908      	add	r1, sp, #32
 80018f2:	2003      	movs	r0, #3
 80018f4:	f002 fdbc 	bl	8004470 <aci_gap_update_adv_data>
  {
    return ret;
  }

  return ret;
}
 80018f8:	b011      	add	sp, #68	; 0x44
 80018fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    service_data[7 + i] = EddystoneURL_Init->Url[i];
 80018fc:	6873      	ldr	r3, [r6, #4]
 80018fe:	5c19      	ldrb	r1, [r3, r0]
 8001900:	ab0a      	add	r3, sp, #40	; 0x28
 8001902:	4403      	add	r3, r0
 8001904:	3001      	adds	r0, #1
 8001906:	71d9      	strb	r1, [r3, #7]
 8001908:	e7e5      	b.n	80018d6 <EddystoneURL_Init+0xc6>
 800190a:	bf00      	nop
 800190c:	08005f23 	.word	0x08005f23

08001910 <HW_IPCC_Enable>:
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HW_IPCC_Enable+0x28>)
 8001912:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800191a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800191e:	6a1a      	ldr	r2, [r3, #32]
 8001920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001924:	621a      	str	r2, [r3, #32]
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8001926:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8001928:	bf20      	wfe
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800192a:	4a04      	ldr	r2, [pc, #16]	; (800193c <HW_IPCC_Enable+0x2c>)
 800192c:	68d3      	ldr	r3, [r2, #12]
 800192e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001932:	60d3      	str	r3, [r2, #12]
  LL_PWR_EnableBootC2( );

  return;
}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	58000800 	.word	0x58000800
 800193c:	58000400 	.word	0x58000400

08001940 <HW_IPCC_Init>:
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

void HW_IPCC_Init( void )
{
 8001944:	b507      	push	{r0, r1, r2, lr}
 8001946:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001948:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800194c:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800194e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001954:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001956:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <HW_IPCC_Init+0x3c>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	f042 0201 	orr.w	r2, r2, #1
 8001960:	601a      	str	r2, [r3, #0]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001968:	601a      	str	r2, [r3, #0]
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );

  LL_C1_IPCC_EnableIT_RXO( IPCC );
  LL_C1_IPCC_EnableIT_TXF( IPCC );

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800196a:	202c      	movs	r0, #44	; 0x2c
 800196c:	f000 fa70 	bl	8001e50 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001970:	202d      	movs	r0, #45	; 0x2d

  return;
}
 8001972:	b003      	add	sp, #12
 8001974:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001978:	f000 ba6a 	b.w	8001e50 <HAL_NVIC_EnableIRQ>
 800197c:	58000c00 	.word	0x58000c00

08001980 <HW_IPCC_BLE_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8001980:	4a02      	ldr	r2, [pc, #8]	; (800198c <HW_IPCC_BLE_Init+0xc>)
 8001982:	6853      	ldr	r3, [r2, #4]
 8001984:	f023 0301 	bic.w	r3, r3, #1
 8001988:	6053      	str	r3, [r2, #4]
void HW_IPCC_BLE_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );

  return;
}
 800198a:	4770      	bx	lr
 800198c:	58000c00 	.word	0x58000c00

08001990 <HW_IPCC_BLE_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001990:	4b02      	ldr	r3, [pc, #8]	; (800199c <HW_IPCC_BLE_SendCmd+0xc>)
 8001992:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001996:	609a      	str	r2, [r3, #8]
void HW_IPCC_BLE_SendCmd( void )
{
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );

  return;
}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	58000c00 	.word	0x58000c00

080019a0 <HW_IPCC_SYS_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80019a0:	4a02      	ldr	r2, [pc, #8]	; (80019ac <HW_IPCC_SYS_Init+0xc>)
 80019a2:	6853      	ldr	r3, [r2, #4]
 80019a4:	f023 0302 	bic.w	r3, r3, #2
 80019a8:	6053      	str	r3, [r2, #4]
void HW_IPCC_SYS_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );

  return;
}
 80019aa:	4770      	bx	lr
 80019ac:	58000c00 	.word	0x58000c00

080019b0 <HW_IPCC_SYS_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <HW_IPCC_SYS_SendCmd+0x14>)
 80019b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019b6:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80019be:	605a      	str	r2, [r3, #4]
{
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );

  return;
}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	58000c00 	.word	0x58000c00

080019c8 <HW_IPCC_Tx_Handler>:
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80019c8:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <HW_IPCC_Tx_Handler+0x7c>)
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	f012 0f02 	tst.w	r2, #2
{
 80019d0:	b510      	push	{r4, lr}
 80019d2:	461a      	mov	r2, r3
 80019d4:	d109      	bne.n	80019ea <HW_IPCC_Tx_Handler+0x22>
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80019d6:	6859      	ldr	r1, [r3, #4]
 80019d8:	0389      	lsls	r1, r1, #14
 80019da:	d406      	bmi.n	80019ea <HW_IPCC_Tx_Handler+0x22>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80019e2:	605a      	str	r2, [r3, #4]

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );

  HW_IPCC_SYS_CmdEvtNot();
 80019e4:	f003 fba6 	bl	8005134 <HW_IPCC_SYS_CmdEvtNot>
}
 80019e8:	bd10      	pop	{r4, pc}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80019ea:	68d3      	ldr	r3, [r2, #12]
 80019ec:	079b      	lsls	r3, r3, #30
 80019ee:	d407      	bmi.n	8001a00 <HW_IPCC_Tx_Handler+0x38>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80019f0:	6853      	ldr	r3, [r2, #4]
 80019f2:	039c      	lsls	r4, r3, #14
 80019f4:	d404      	bmi.n	8001a00 <HW_IPCC_Tx_Handler+0x38>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80019f6:	6853      	ldr	r3, [r2, #4]
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019fc:	6053      	str	r3, [r2, #4]
 80019fe:	e7f1      	b.n	80019e4 <HW_IPCC_Tx_Handler+0x1c>
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001a00:	4c10      	ldr	r4, [pc, #64]	; (8001a44 <HW_IPCC_Tx_Handler+0x7c>)
 8001a02:	68e3      	ldr	r3, [r4, #12]
 8001a04:	f013 0f08 	tst.w	r3, #8
 8001a08:	4623      	mov	r3, r4
 8001a0a:	d10d      	bne.n	8001a28 <HW_IPCC_Tx_Handler+0x60>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8001a0c:	6862      	ldr	r2, [r4, #4]
 8001a0e:	0310      	lsls	r0, r2, #12
 8001a10:	d40a      	bmi.n	8001a28 <HW_IPCC_Tx_Handler+0x60>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001a12:	6863      	ldr	r3, [r4, #4]
 8001a14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a18:	6063      	str	r3, [r4, #4]

static void HW_IPCC_MM_FreeBufHandler( void )
{
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  FreeBufCb();
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HW_IPCC_Tx_Handler+0x80>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4798      	blx	r3
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001a20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001a24:	60a3      	str	r3, [r4, #8]
 8001a26:	e7df      	b.n	80019e8 <HW_IPCC_Tx_Handler+0x20>
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	0691      	lsls	r1, r2, #26
 8001a2c:	d4dc      	bmi.n	80019e8 <HW_IPCC_Tx_Handler+0x20>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	0292      	lsls	r2, r2, #10
 8001a32:	d4d9      	bmi.n	80019e8 <HW_IPCC_Tx_Handler+0x20>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001a3a:	605a      	str	r2, [r3, #4]
  HW_IPCC_BLE_AclDataAckNot();
 8001a3c:	f003 fb4e 	bl	80050dc <HW_IPCC_BLE_AclDataAckNot>
  return;
 8001a40:	e7d2      	b.n	80019e8 <HW_IPCC_Tx_Handler+0x20>
 8001a42:	bf00      	nop
 8001a44:	58000c00 	.word	0x58000c00
 8001a48:	200001bc 	.word	0x200001bc

08001a4c <HW_IPCC_MM_SendFreeBuf>:
{
 8001a4c:	b510      	push	{r4, lr}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001a4e:	4c08      	ldr	r4, [pc, #32]	; (8001a70 <HW_IPCC_MM_SendFreeBuf+0x24>)
 8001a50:	68e3      	ldr	r3, [r4, #12]
 8001a52:	071b      	lsls	r3, r3, #28
 8001a54:	d506      	bpl.n	8001a64 <HW_IPCC_MM_SendFreeBuf+0x18>
    FreeBufCb = cb;
 8001a56:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <HW_IPCC_MM_SendFreeBuf+0x28>)
 8001a58:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001a5a:	6863      	ldr	r3, [r4, #4]
 8001a5c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001a60:	6063      	str	r3, [r4, #4]
}
 8001a62:	bd10      	pop	{r4, pc}
    cb();
 8001a64:	4780      	blx	r0
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001a66:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001a6a:	60a3      	str	r3, [r4, #8]
  return;
 8001a6c:	e7f9      	b.n	8001a62 <HW_IPCC_MM_SendFreeBuf+0x16>
 8001a6e:	bf00      	nop
 8001a70:	58000c00 	.word	0x58000c00
 8001a74:	200001bc 	.word	0x200001bc

08001a78 <HW_IPCC_TRACES_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8001a78:	4a02      	ldr	r2, [pc, #8]	; (8001a84 <HW_IPCC_TRACES_Init+0xc>)
 8001a7a:	6853      	ldr	r3, [r2, #4]
 8001a7c:	f023 0308 	bic.w	r3, r3, #8
 8001a80:	6053      	str	r3, [r2, #4]
void HW_IPCC_TRACES_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );

  return;
}
 8001a82:	4770      	bx	lr
 8001a84:	58000c00 	.word	0x58000c00

08001a88 <HW_IPCC_Rx_Handler>:
{
 8001a88:	b538      	push	{r3, r4, r5, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001a8a:	4c12      	ldr	r4, [pc, #72]	; (8001ad4 <HW_IPCC_Rx_Handler+0x4c>)
 8001a8c:	69e3      	ldr	r3, [r4, #28]
 8001a8e:	f013 0f02 	tst.w	r3, #2
 8001a92:	4625      	mov	r5, r4
 8001a94:	d007      	beq.n	8001aa6 <HW_IPCC_Rx_Handler+0x1e>
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8001a96:	6863      	ldr	r3, [r4, #4]
 8001a98:	079b      	lsls	r3, r3, #30
 8001a9a:	d404      	bmi.n	8001aa6 <HW_IPCC_Rx_Handler+0x1e>
  HW_IPCC_SYS_EvtNot();
 8001a9c:	f003 fb54 	bl	8005148 <HW_IPCC_SYS_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	60a3      	str	r3, [r4, #8]
  return;
 8001aa4:	e009      	b.n	8001aba <HW_IPCC_Rx_Handler+0x32>
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001aa6:	69eb      	ldr	r3, [r5, #28]
 8001aa8:	07d8      	lsls	r0, r3, #31
 8001aaa:	d507      	bpl.n	8001abc <HW_IPCC_Rx_Handler+0x34>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8001aac:	686b      	ldr	r3, [r5, #4]
 8001aae:	07d9      	lsls	r1, r3, #31
 8001ab0:	d404      	bmi.n	8001abc <HW_IPCC_Rx_Handler+0x34>
  HW_IPCC_BLE_RxEvtNot();
 8001ab2:	f003 fafd 	bl	80050b0 <HW_IPCC_BLE_RxEvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	60ab      	str	r3, [r5, #8]
}
 8001aba:	bd38      	pop	{r3, r4, r5, pc}
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001abc:	4c05      	ldr	r4, [pc, #20]	; (8001ad4 <HW_IPCC_Rx_Handler+0x4c>)
 8001abe:	69e3      	ldr	r3, [r4, #28]
 8001ac0:	071a      	lsls	r2, r3, #28
 8001ac2:	d5fa      	bpl.n	8001aba <HW_IPCC_Rx_Handler+0x32>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8001ac4:	6863      	ldr	r3, [r4, #4]
 8001ac6:	071b      	lsls	r3, r3, #28
 8001ac8:	d4f7      	bmi.n	8001aba <HW_IPCC_Rx_Handler+0x32>

static void HW_IPCC_TRACES_EvtHandler( void )
{
  HW_IPCC_TRACES_EvtNot();
 8001aca:	f003 fb93 	bl	80051f4 <HW_IPCC_TRACES_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001ace:	2308      	movs	r3, #8
 8001ad0:	e7e7      	b.n	8001aa2 <HW_IPCC_Rx_Handler+0x1a>
 8001ad2:	bf00      	nop
 8001ad4:	58000c00 	.word	0x58000c00

08001ad8 <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8001adc:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ade:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ae0:	4302      	orrs	r2, r0
 8001ae2:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae6:	4018      	ands	r0, r3
 8001ae8:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001aea:	9b01      	ldr	r3, [sp, #4]
}
 8001aec:	b002      	add	sp, #8
 8001aee:	4770      	bx	lr

08001af0 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af2:	b087      	sub	sp, #28
 8001af4:	4604      	mov	r4, r0
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001af6:	2214      	movs	r2, #20
 8001af8:	2100      	movs	r1, #0
 8001afa:	a801      	add	r0, sp, #4
 8001afc:	f003 fccd 	bl	800549a <memset>
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001b00:	2002      	movs	r0, #2
 8001b02:	f7ff ffe9 	bl	8001ad8 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001b06:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <BSP_LED_Init+0x48>)
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
  gpioinitstruct.Pull = GPIO_NOPULL;
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001b08:	4d0c      	ldr	r5, [pc, #48]	; (8001b3c <BSP_LED_Init+0x4c>)
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001b0a:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001b0e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001b12:	9601      	str	r6, [sp, #4]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8001b14:	2700      	movs	r7, #0
 8001b16:	2301      	movs	r3, #1
 8001b18:	e9cd 3702 	strd	r3, r7, [sp, #8]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001b1c:	a901      	add	r1, sp, #4
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001b22:	f000 fb8b 	bl	800223c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001b26:	463a      	mov	r2, r7
 8001b28:	4631      	mov	r1, r6
 8001b2a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8001b2e:	f000 fc3b 	bl	80023a8 <HAL_GPIO_WritePin>
}
 8001b32:	b007      	add	sp, #28
 8001b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b36:	bf00      	nop
 8001b38:	08005f2a 	.word	0x08005f2a
 8001b3c:	20000008 	.word	0x20000008

08001b40 <BSP_LED_On>:
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <BSP_LED_On+0x14>)
 8001b42:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8001b46:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <BSP_LED_On+0x18>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001b4e:	f000 bc2b 	b.w	80023a8 <HAL_GPIO_WritePin>
 8001b52:	bf00      	nop
 8001b54:	08005f2a 	.word	0x08005f2a
 8001b58:	20000008 	.word	0x20000008

08001b5c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001b5c:	b570      	push	{r4, r5, r6, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	4604      	mov	r4, r0
 8001b62:	460e      	mov	r6, r1
  GPIO_InitTypeDef gpioinitstruct = {0};
 8001b64:	2214      	movs	r2, #20
 8001b66:	2100      	movs	r1, #0
 8001b68:	a801      	add	r0, sp, #4
 8001b6a:	f003 fc96 	bl	800549a <memset>
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001b6e:	b9cc      	cbnz	r4, 8001ba4 <BSP_PB_Init+0x48>
 8001b70:	2004      	movs	r0, #4
 8001b72:	f7ff ffb1 	bl	8001ad8 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001b76:	b9d6      	cbnz	r6, 8001bae <BSP_PB_Init+0x52>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <BSP_PB_Init+0x8c>)
 8001b7a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
    gpioinitstruct.Pull = GPIO_PULLUP;
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b7e:	2501      	movs	r5, #1
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001b80:	88db      	ldrh	r3, [r3, #6]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8001b82:	e9cd 3601 	strd	r3, r6, [sp, #4]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b86:	2302      	movs	r3, #2
 8001b88:	e9cd 5303 	strd	r5, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001b8c:	4b17      	ldr	r3, [pc, #92]	; (8001bec <BSP_PB_Init+0x90>)
 8001b8e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001b92:	a901      	add	r1, sp, #4
 8001b94:	68e0      	ldr	r0, [r4, #12]
 8001b96:	f000 fb51 	bl	800223c <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8001b9a:	4628      	mov	r0, r5
 8001b9c:	f7ff fa8c 	bl	80010b8 <HAL_Delay>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 8001ba0:	b006      	add	sp, #24
 8001ba2:	bd70      	pop	{r4, r5, r6, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001ba4:	1e63      	subs	r3, r4, #1
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d8e5      	bhi.n	8001b76 <BSP_PB_Init+0x1a>
 8001baa:	2008      	movs	r0, #8
 8001bac:	e7e1      	b.n	8001b72 <BSP_PB_Init+0x16>
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001bae:	2e01      	cmp	r6, #1
 8001bb0:	d1f6      	bne.n	8001ba0 <BSP_PB_Init+0x44>
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001bb2:	4d0d      	ldr	r5, [pc, #52]	; (8001be8 <BSP_PB_Init+0x8c>)
    gpioinitstruct.Pull = GPIO_PULLUP;
 8001bb4:	9603      	str	r6, [sp, #12]
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001bb6:	eb05 0344 	add.w	r3, r5, r4, lsl #1
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001bba:	a901      	add	r1, sp, #4
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001bbc:	88db      	ldrh	r3, [r3, #6]
 8001bbe:	9301      	str	r3, [sp, #4]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <BSP_PB_Init+0x94>)
 8001bc2:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <BSP_PB_Init+0x90>)
 8001bc6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001bca:	442c      	add	r4, r5
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001bcc:	68d8      	ldr	r0, [r3, #12]
 8001bce:	f000 fb35 	bl	800223c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001bd2:	f994 400c 	ldrsb.w	r4, [r4, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	4620      	mov	r0, r4
 8001bda:	210f      	movs	r1, #15
 8001bdc:	f000 f904 	bl	8001de8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001be0:	4620      	mov	r0, r4
 8001be2:	f000 f935 	bl	8001e50 <HAL_NVIC_EnableIRQ>
}
 8001be6:	e7db      	b.n	8001ba0 <BSP_PB_Init+0x44>
 8001be8:	08005f2a 	.word	0x08005f2a
 8001bec:	20000008 	.word	0x20000008
 8001bf0:	10210000 	.word	0x10210000

08001bf4 <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8001bf4:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <SystemInit+0x60>)
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001bfa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001bfe:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001c02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001c0a:	f46f 7c82 	mvn.w	ip, #260	; 0x104
  RCC->CR |= RCC_CR_MSION;
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	f042 0201 	orr.w	r2, r2, #1
 8001c14:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00070000U;
 8001c16:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001c1a:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001c1c:	6818      	ldr	r0, [r3, #0]
 8001c1e:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 8001c22:	4462      	add	r2, ip
 8001c24:	4002      	ands	r2, r0
 8001c26:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001c28:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001c2c:	f022 0205 	bic.w	r2, r2, #5
 8001c30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001c34:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001c38:	f022 0201 	bic.w	r2, r2, #1
 8001c3c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001c40:	4a05      	ldr	r2, [pc, #20]	; (8001c58 <SystemInit+0x64>)
 8001c42:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001c44:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c4c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c4e:	6199      	str	r1, [r3, #24]
}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00
 8001c58:	22041000 	.word	0x22041000

08001c5c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001c5c:	b530      	push	{r4, r5, lr}
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8001c5e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8001c62:	4921      	ldr	r1, [pc, #132]	; (8001ce8 <SystemCoreClockUpdate+0x8c>)
 8001c64:	6823      	ldr	r3, [r4, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c66:	68a0      	ldr	r0, [r4, #8]
 8001c68:	4a20      	ldr	r2, [pc, #128]	; (8001cec <SystemCoreClockUpdate+0x90>)
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8001c6a:	f3c3 1303 	ubfx	r3, r3, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c6e:	f000 000c 	and.w	r0, r0, #12
 8001c72:	2808      	cmp	r0, #8
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8001c74:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c78:	d012      	beq.n	8001ca0 <SystemCoreClockUpdate+0x44>
 8001c7a:	280c      	cmp	r0, #12
 8001c7c:	d012      	beq.n	8001ca4 <SystemCoreClockUpdate+0x48>
 8001c7e:	2804      	cmp	r0, #4
 8001c80:	d130      	bne.n	8001ce4 <SystemCoreClockUpdate+0x88>
      SystemCoreClock = msirange;
      break;

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8001c82:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <SystemCoreClockUpdate+0x94>)
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
      
      SystemCoreClock = pllvco/pllr;
 8001c84:	6013      	str	r3, [r2, #0]
      break;
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c90:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8001c94:	6813      	ldr	r3, [r2, #0]
 8001c96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c98:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c9c:	6013      	str	r3, [r2, #0]

}
 8001c9e:	bd30      	pop	{r4, r5, pc}
      SystemCoreClock = HSE_VALUE;
 8001ca0:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <SystemCoreClockUpdate+0x98>)
 8001ca2:	e7ef      	b.n	8001c84 <SystemCoreClockUpdate+0x28>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001ca4:	68e0      	ldr	r0, [r4, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8001ca6:	68e3      	ldr	r3, [r4, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001ca8:	f000 0003 	and.w	r0, r0, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8001cac:	f3c3 1302 	ubfx	r3, r3, #4, #3
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8001cb0:	2802      	cmp	r0, #2
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8001cb2:	f103 0301 	add.w	r3, r3, #1
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8001cb6:	d10e      	bne.n	8001cd6 <SystemCoreClockUpdate+0x7a>
        pllvco = (HSI_VALUE / pllm);
 8001cb8:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <SystemCoreClockUpdate+0x94>)
        pllvco = (HSE_VALUE / pllm);
 8001cba:	fbb0 f3f3 	udiv	r3, r0, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cbe:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8001cc2:	68c4      	ldr	r4, [r0, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8001cc4:	68c0      	ldr	r0, [r0, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cc6:	f3c4 2406 	ubfx	r4, r4, #8, #7
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8001cca:	0f40      	lsrs	r0, r0, #29
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ccc:	4363      	muls	r3, r4
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8001cce:	3001      	adds	r0, #1
      SystemCoreClock = pllvco/pllr;
 8001cd0:	fbb3 f3f0 	udiv	r3, r3, r0
 8001cd4:	e7d6      	b.n	8001c84 <SystemCoreClockUpdate+0x28>
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8001cd6:	2803      	cmp	r0, #3
 8001cd8:	d101      	bne.n	8001cde <SystemCoreClockUpdate+0x82>
        pllvco = (HSE_VALUE / pllm);
 8001cda:	4806      	ldr	r0, [pc, #24]	; (8001cf4 <SystemCoreClockUpdate+0x98>)
 8001cdc:	e7ed      	b.n	8001cba <SystemCoreClockUpdate+0x5e>
        pllvco = (msirange / pllm);
 8001cde:	fbb5 f3f3 	udiv	r3, r5, r3
 8001ce2:	e7ec      	b.n	8001cbe <SystemCoreClockUpdate+0x62>
      SystemCoreClock = msirange;
 8001ce4:	6015      	str	r5, [r2, #0]
      break;
 8001ce6:	e7ce      	b.n	8001c86 <SystemCoreClockUpdate+0x2a>
 8001ce8:	08005f3c 	.word	0x08005f3c
 8001cec:	20000020 	.word	0x20000020
 8001cf0:	00f42400 	.word	0x00f42400
 8001cf4:	01e84800 	.word	0x01e84800

08001cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf8:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8001cfa:	4d0f      	ldr	r5, [pc, #60]	; (8001d38 <HAL_InitTick+0x40>)
 8001cfc:	782b      	ldrb	r3, [r5, #0]
{
 8001cfe:	4606      	mov	r6, r0
  if (uwTickFreq != 0U)
 8001d00:	b90b      	cbnz	r3, 8001d06 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d02:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001d04:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 8001d06:	f001 f8b7 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8001d0a:	782a      	ldrb	r2, [r5, #0]
 8001d0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d10:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d14:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d18:	f000 f8bc 	bl	8001e94 <HAL_SYSTICK_Config>
 8001d1c:	4604      	mov	r4, r0
 8001d1e:	2800      	cmp	r0, #0
 8001d20:	d1ef      	bne.n	8001d02 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d22:	2e0f      	cmp	r6, #15
 8001d24:	d8ed      	bhi.n	8001d02 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d26:	4602      	mov	r2, r0
 8001d28:	4631      	mov	r1, r6
 8001d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2e:	f000 f85b 	bl	8001de8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d32:	606e      	str	r6, [r5, #4]
 8001d34:	4620      	mov	r0, r4
 8001d36:	e7e5      	b.n	8001d04 <HAL_InitTick+0xc>
 8001d38:	20000024 	.word	0x20000024

08001d3c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d3c:	4a09      	ldr	r2, [pc, #36]	; (8001d64 <HAL_Init+0x28>)
 8001d3e:	6813      	ldr	r3, [r2, #0]
 8001d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001d44:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d46:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d48:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d4a:	f000 f83b 	bl	8001dc4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f7ff ffd2 	bl	8001cf8 <HAL_InitTick>
 8001d54:	4604      	mov	r4, r0
 8001d56:	b918      	cbnz	r0, 8001d60 <HAL_Init+0x24>
    HAL_MspInit();
 8001d58:	f7ff f9d5 	bl	8001106 <HAL_MspInit>
}
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001d60:	2401      	movs	r4, #1
 8001d62:	e7fb      	b.n	8001d5c <HAL_Init+0x20>
 8001d64:	58004000 	.word	0x58004000

08001d68 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001d68:	4a03      	ldr	r2, [pc, #12]	; (8001d78 <HAL_IncTick+0x10>)
 8001d6a:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <HAL_IncTick+0x14>)
 8001d6c:	6811      	ldr	r1, [r2, #0]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	440b      	add	r3, r1
 8001d72:	6013      	str	r3, [r2, #0]
}
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	200015c8 	.word	0x200015c8
 8001d7c:	20000024 	.word	0x20000024

08001d80 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001d80:	4b01      	ldr	r3, [pc, #4]	; (8001d88 <HAL_GetTick+0x8>)
 8001d82:	6818      	ldr	r0, [r3, #0]
}
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	200015c8 	.word	0x200015c8

08001d8c <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 8001d8c:	4b01      	ldr	r3, [pc, #4]	; (8001d94 <HAL_GetTickPrio+0x8>)
 8001d8e:	6858      	ldr	r0, [r3, #4]
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20000024 	.word	0x20000024

08001d98 <HAL_GetTickFreq>:
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
  return uwTickFreq;
}
 8001d98:	4b01      	ldr	r3, [pc, #4]	; (8001da0 <HAL_GetTickFreq+0x8>)
 8001d9a:	7818      	ldrb	r0, [r3, #0]
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000024 	.word	0x20000024

08001da4 <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001da4:	4a02      	ldr	r2, [pc, #8]	; (8001db0 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8001da6:	6853      	ldr	r3, [r2, #4]
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 8001dae:	4770      	bx	lr
 8001db0:	e0042000 	.word	0xe0042000

08001db4 <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001db4:	4a02      	ldr	r2, [pc, #8]	; (8001dc0 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8001db6:	6853      	ldr	r3, [r2, #4]
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 8001dbe:	4770      	bx	lr
 8001dc0:	e0042000 	.word	0xe0042000

08001dc4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc4:	4a07      	ldr	r2, [pc, #28]	; (8001de4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001dc6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001dcc:	041b      	lsls	r3, r3, #16
 8001dce:	0c1b      	lsrs	r3, r3, #16
 8001dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd4:	0200      	lsls	r0, r0, #8
 8001dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dda:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001dde:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001de0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001de2:	4770      	bx	lr
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de8:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dea:	b570      	push	{r4, r5, r6, lr}
 8001dec:	68dc      	ldr	r4, [r3, #12]
 8001dee:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df2:	f1c4 0507 	rsb	r5, r4, #7
 8001df6:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df8:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dfc:	bf28      	it	cs
 8001dfe:	2504      	movcs	r5, #4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e04:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e06:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0a:	bf8c      	ite	hi
 8001e0c:	3c03      	subhi	r4, #3
 8001e0e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	ea21 0303 	bic.w	r3, r1, r3
 8001e14:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e16:	fa06 f404 	lsl.w	r4, r6, r4
 8001e1a:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001e1e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e24:	bfa8      	it	ge
 8001e26:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8001e2a:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2e:	bfbc      	itt	lt
 8001e30:	f000 000f 	andlt.w	r0, r0, #15
 8001e34:	4a05      	ldrlt	r2, [pc, #20]	; (8001e4c <HAL_NVIC_SetPriority+0x64>)
 8001e36:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e38:	bfaa      	itet	ge
 8001e3a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e40:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001e44:	bd70      	pop	{r4, r5, r6, pc}
 8001e46:	bf00      	nop
 8001e48:	e000ed00 	.word	0xe000ed00
 8001e4c:	e000ed14 	.word	0xe000ed14

08001e50 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001e50:	2800      	cmp	r0, #0
 8001e52:	db08      	blt.n	8001e66 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e54:	0942      	lsrs	r2, r0, #5
 8001e56:	2301      	movs	r3, #1
 8001e58:	f000 001f 	and.w	r0, r0, #31
 8001e5c:	fa03 f000 	lsl.w	r0, r3, r0
 8001e60:	4b01      	ldr	r3, [pc, #4]	; (8001e68 <HAL_NVIC_EnableIRQ+0x18>)
 8001e62:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001e66:	4770      	bx	lr
 8001e68:	e000e100 	.word	0xe000e100

08001e6c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001e6c:	2800      	cmp	r0, #0
 8001e6e:	db0d      	blt.n	8001e8c <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e70:	0943      	lsrs	r3, r0, #5
 8001e72:	2201      	movs	r2, #1
 8001e74:	f000 001f 	and.w	r0, r0, #31
 8001e78:	fa02 f000 	lsl.w	r0, r2, r0
 8001e7c:	3320      	adds	r3, #32
 8001e7e:	4a04      	ldr	r2, [pc, #16]	; (8001e90 <HAL_NVIC_DisableIRQ+0x24>)
 8001e80:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001e84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e88:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000e100 	.word	0xe000e100

08001e94 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e94:	3801      	subs	r0, #1
 8001e96:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001e9a:	d20a      	bcs.n	8001eb2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9e:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea2:	21f0      	movs	r1, #240	; 0xf0
 8001ea4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eaa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eac:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001eb2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000e010 	.word	0xe000e010
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <HAL_NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001ec0:	2800      	cmp	r0, #0
 8001ec2:	db09      	blt.n	8001ed8 <HAL_NVIC_SetPendingIRQ+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec4:	0943      	lsrs	r3, r0, #5
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f000 001f 	and.w	r0, r0, #31
 8001ecc:	fa02 f000 	lsl.w	r0, r2, r0
 8001ed0:	3340      	adds	r3, #64	; 0x40
 8001ed2:	4a02      	ldr	r2, [pc, #8]	; (8001edc <HAL_NVIC_SetPendingIRQ+0x1c>)
 8001ed4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000e100 	.word	0xe000e100

08001ee0 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001ee0:	2800      	cmp	r0, #0
 8001ee2:	db09      	blt.n	8001ef8 <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee4:	0943      	lsrs	r3, r0, #5
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f000 001f 	and.w	r0, r0, #31
 8001eec:	fa02 f000 	lsl.w	r0, r2, r0
 8001ef0:	3360      	adds	r3, #96	; 0x60
 8001ef2:	4a02      	ldr	r2, [pc, #8]	; (8001efc <HAL_NVIC_ClearPendingIRQ+0x1c>)
 8001ef4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000e100 	.word	0xe000e100

08001f00 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f00:	b570      	push	{r4, r5, r6, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f02:	e9d0 4513 	ldrd	r4, r5, [r0, #76]	; 0x4c
 8001f06:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001f08:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8001f0a:	b114      	cbz	r4, 8001f12 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f0c:	e9d0 4516 	ldrd	r4, r5, [r0, #88]	; 0x58
 8001f10:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f12:	e9d0 6410 	ldrd	r6, r4, [r0, #64]	; 0x40
 8001f16:	f004 051c 	and.w	r5, r4, #28
 8001f1a:	2401      	movs	r4, #1
 8001f1c:	40ac      	lsls	r4, r5
 8001f1e:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f20:	6804      	ldr	r4, [r0, #0]
 8001f22:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f24:	6883      	ldr	r3, [r0, #8]
 8001f26:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f28:	bf0b      	itete	eq
 8001f2a:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001f2c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001f2e:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001f30:	60e2      	strne	r2, [r4, #12]
  }
}
 8001f32:	bd70      	pop	{r4, r5, r6, pc}

08001f34 <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001f34:	4910      	ldr	r1, [pc, #64]	; (8001f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8001f36:	6803      	ldr	r3, [r0, #0]
 8001f38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001f3a:	428b      	cmp	r3, r1
 8001f3c:	f022 0203 	bic.w	r2, r2, #3
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001f40:	bf95      	itete	ls
 8001f42:	f102 4280 	addls.w	r2, r2, #1073741824	; 0x40000000
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001f46:	490d      	ldrhi	r1, [pc, #52]	; (8001f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001f48:	f502 3202 	addls.w	r2, r2, #133120	; 0x20800
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001f4c:	1889      	addhi	r1, r1, r2
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001f4e:	bf98      	it	ls
 8001f50:	6482      	strls	r2, [r0, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001f52:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001f54:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 8001f56:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001f58:	f1a3 0308 	sub.w	r3, r3, #8
 8001f5c:	f04f 0214 	mov.w	r2, #20
 8001f60:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001f64:	f04f 0201 	mov.w	r2, #1
 8001f68:	f003 031c 	and.w	r3, r3, #28
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001f70:	bf88      	it	hi
 8001f72:	6481      	strhi	r1, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001f74:	6503      	str	r3, [r0, #80]	; 0x50
}
 8001f76:	4770      	bx	lr
 8001f78:	40020407 	.word	0x40020407
 8001f7c:	4002081c 	.word	0x4002081c
 8001f80:	40020880 	.word	0x40020880

08001f84 <HAL_DMA_Init>:
{
 8001f84:	b510      	push	{r4, lr}
  if (hdma == NULL)
 8001f86:	4604      	mov	r4, r0
 8001f88:	2800      	cmp	r0, #0
 8001f8a:	d05d      	beq.n	8002048 <HAL_DMA_Init+0xc4>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f8c:	6801      	ldr	r1, [r0, #0]
 8001f8e:	4b2f      	ldr	r3, [pc, #188]	; (800204c <HAL_DMA_Init+0xc8>)
 8001f90:	4299      	cmp	r1, r3
 8001f92:	f04f 0014 	mov.w	r0, #20
 8001f96:	d84a      	bhi.n	800202e <HAL_DMA_Init+0xaa>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f98:	4a2d      	ldr	r2, [pc, #180]	; (8002050 <HAL_DMA_Init+0xcc>)
 8001f9a:	440a      	add	r2, r1
 8001f9c:	fbb2 f2f0 	udiv	r2, r2, r0
 8001fa0:	0092      	lsls	r2, r2, #2
 8001fa2:	6462      	str	r2, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001fa4:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8001fa8:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001faa:	2302      	movs	r3, #2
 8001fac:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8001fb0:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8001fb4:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb6:	6920      	ldr	r0, [r4, #16]
  tmp = hdma->Instance->CCR;
 8001fb8:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fba:	4303      	orrs	r3, r0
 8001fbc:	6960      	ldr	r0, [r4, #20]
 8001fbe:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc0:	69a0      	ldr	r0, [r4, #24]
 8001fc2:	4303      	orrs	r3, r0
 8001fc4:	69e0      	ldr	r0, [r4, #28]
 8001fc6:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc8:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001fca:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8001fce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fd2:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001fd4:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8001fd6:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f7ff ffab 	bl	8001f34 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fde:	68a3      	ldr	r3, [r4, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fe0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fe2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fe6:	bf04      	itt	eq
 8001fe8:	2300      	moveq	r3, #0
 8001fea:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fec:	6862      	ldr	r2, [r4, #4]
 8001fee:	b2d3      	uxtb	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ff2:	e9d4 1013 	ldrd	r1, r0, [r4, #76]	; 0x4c
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ff6:	3a01      	subs	r2, #1
 8001ff8:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ffa:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ffc:	d81f      	bhi.n	800203e <HAL_DMA_Init+0xba>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ffe:	4a15      	ldr	r2, [pc, #84]	; (8002054 <HAL_DMA_Init+0xd0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002000:	4815      	ldr	r0, [pc, #84]	; (8002058 <HAL_DMA_Init+0xd4>)
 8002002:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002004:	441a      	add	r2, r3

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002006:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002008:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800200a:	2101      	movs	r1, #1
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002014:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002016:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002018:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800201a:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800201c:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800201e:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8002020:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002022:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8002024:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8002028:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
 800202c:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_DMA_Init+0xd8>)
 8002030:	440b      	add	r3, r1
 8002032:	fbb3 f3f0 	udiv	r3, r3, r0
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_DMA_Init+0xdc>)
 800203c:	e7b4      	b.n	8001fa8 <HAL_DMA_Init+0x24>
    hdma->DMAmuxRequestGen = 0U;
 800203e:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8002040:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002044:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002046:	e7ea      	b.n	800201e <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 8002048:	2001      	movs	r0, #1
 800204a:	e7ef      	b.n	800202c <HAL_DMA_Init+0xa8>
 800204c:	40020407 	.word	0x40020407
 8002050:	bffdfff8 	.word	0xbffdfff8
 8002054:	1000823f 	.word	0x1000823f
 8002058:	40020940 	.word	0x40020940
 800205c:	bffdfbf8 	.word	0xbffdfbf8
 8002060:	40020400 	.word	0x40020400

08002064 <HAL_DMA_Start_IT>:
{
 8002064:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8002066:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 800206a:	2d01      	cmp	r5, #1
{
 800206c:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800206e:	d039      	beq.n	80020e4 <HAL_DMA_Start_IT+0x80>
 8002070:	2501      	movs	r5, #1
 8002072:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8002076:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 800207a:	2d01      	cmp	r5, #1
 800207c:	f04f 0600 	mov.w	r6, #0
 8002080:	f04f 0502 	mov.w	r5, #2
 8002084:	d12c      	bne.n	80020e0 <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002086:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800208a:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800208c:	6806      	ldr	r6, [r0, #0]
 800208e:	6835      	ldr	r5, [r6, #0]
 8002090:	f025 0501 	bic.w	r5, r5, #1
 8002094:	6035      	str	r5, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002096:	f7ff ff33 	bl	8001f00 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800209a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800209c:	6803      	ldr	r3, [r0, #0]
 800209e:	b1ba      	cbz	r2, 80020d0 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	f042 020e 	orr.w	r2, r2, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020a6:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80020a8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80020aa:	6811      	ldr	r1, [r2, #0]
 80020ac:	03c9      	lsls	r1, r1, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80020ae:	bf42      	ittt	mi
 80020b0:	6811      	ldrmi	r1, [r2, #0]
 80020b2:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 80020b6:	6011      	strmi	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80020b8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80020ba:	b11a      	cbz	r2, 80020c4 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80020bc:	6811      	ldr	r1, [r2, #0]
 80020be:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80020c2:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	f042 0201 	orr.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020cc:	2000      	movs	r0, #0
}
 80020ce:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	f022 0204 	bic.w	r2, r2, #4
 80020d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	f042 020a 	orr.w	r2, r2, #10
 80020de:	e7e2      	b.n	80020a6 <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 80020e0:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 80020e4:	2002      	movs	r0, #2
 80020e6:	e7f2      	b.n	80020ce <HAL_DMA_Start_IT+0x6a>

080020e8 <HAL_DMA_Abort_IT>:
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80020e8:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80020ec:	2b02      	cmp	r3, #2
{
 80020ee:	b510      	push	{r4, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80020f0:	d003      	beq.n	80020fa <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f2:	2304      	movs	r3, #4
 80020f4:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80020f6:	2001      	movs	r0, #1
}
 80020f8:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020fa:	6803      	ldr	r3, [r0, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	f022 020e 	bic.w	r2, r2, #14
 8002102:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	f022 0201 	bic.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800210c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800210e:	6813      	ldr	r3, [r2, #0]
 8002110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002114:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002116:	e9d0 1310 	ldrd	r1, r3, [r0, #64]	; 0x40
 800211a:	f003 021c 	and.w	r2, r3, #28
 800211e:	2301      	movs	r3, #1
 8002120:	4093      	lsls	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002124:	e9d0 3213 	ldrd	r3, r2, [r0, #76]	; 0x4c
 8002128:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800212a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800212c:	b133      	cbz	r3, 800213c <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002134:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002136:	e9d0 3216 	ldrd	r3, r2, [r0, #88]	; 0x58
 800213a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800213c:	2301      	movs	r3, #1
 800213e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferAbortCallback != NULL)
 8002142:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002144:	2400      	movs	r4, #0
 8002146:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 800214a:	b113      	cbz	r3, 8002152 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 800214c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800214e:	4620      	mov	r0, r4
 8002150:	e7d2      	b.n	80020f8 <HAL_DMA_Abort_IT+0x10>
 8002152:	4618      	mov	r0, r3
 8002154:	e7d0      	b.n	80020f8 <HAL_DMA_Abort_IT+0x10>

08002156 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002156:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002158:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 800215a:	6803      	ldr	r3, [r0, #0]
{
 800215c:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800215e:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002162:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002164:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002166:	2404      	movs	r4, #4
 8002168:	4094      	lsls	r4, r2
 800216a:	4234      	tst	r4, r6
 800216c:	d00e      	beq.n	800218c <HAL_DMA_IRQHandler+0x36>
 800216e:	f015 0f04 	tst.w	r5, #4
 8002172:	d00b      	beq.n	800218c <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002178:	bf5e      	ittt	pl
 800217a:	681a      	ldrpl	r2, [r3, #0]
 800217c:	f022 0204 	bicpl.w	r2, r2, #4
 8002180:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8002182:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002184:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8002186:	b373      	cbz	r3, 80021e6 <HAL_DMA_IRQHandler+0x90>
}
 8002188:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800218a:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800218c:	2402      	movs	r4, #2
 800218e:	4094      	lsls	r4, r2
 8002190:	4234      	tst	r4, r6
 8002192:	d012      	beq.n	80021ba <HAL_DMA_IRQHandler+0x64>
 8002194:	f015 0f02 	tst.w	r5, #2
 8002198:	d00f      	beq.n	80021ba <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	0695      	lsls	r5, r2, #26
 800219e:	d406      	bmi.n	80021ae <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	f022 020a 	bic.w	r2, r2, #10
 80021a6:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80021a8:	2301      	movs	r3, #1
 80021aa:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80021ae:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80021b0:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 80021b2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 80021b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80021b8:	e7e5      	b.n	8002186 <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80021ba:	2408      	movs	r4, #8
 80021bc:	4094      	lsls	r4, r2
 80021be:	4234      	tst	r4, r6
 80021c0:	d011      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x90>
 80021c2:	072c      	lsls	r4, r5, #28
 80021c4:	d50f      	bpl.n	80021e6 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021c6:	681c      	ldr	r4, [r3, #0]
 80021c8:	f024 040e 	bic.w	r4, r4, #14
 80021cc:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80021ce:	2301      	movs	r3, #1
 80021d0:	fa03 f202 	lsl.w	r2, r3, r2
 80021d4:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021d6:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80021d8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80021dc:	2300      	movs	r3, #0
 80021de:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80021e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80021e4:	e7cf      	b.n	8002186 <HAL_DMA_IRQHandler+0x30>
}
 80021e6:	bc70      	pop	{r4, r5, r6}
 80021e8:	4770      	bx	lr
	...

080021ec <HAL_DMAEx_ConfigMuxSync>:
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 80021ec:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80021f0:	2b01      	cmp	r3, #1
{
 80021f2:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State == HAL_DMA_STATE_READY)
 80021f4:	d11b      	bne.n	800222e <HAL_DMAEx_ConfigMuxSync+0x42>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 80021f6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d019      	beq.n	8002232 <HAL_DMAEx_ConfigMuxSync+0x46>

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 80021fe:	68cb      	ldr	r3, [r1, #12]
 8002200:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8002202:	1e5a      	subs	r2, r3, #1
 8002204:	e9d1 3600 	ldrd	r3, r6, [r1]
 8002208:	4333      	orrs	r3, r6
 800220a:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 800220e:	7a0a      	ldrb	r2, [r1, #8]
 8002210:	6825      	ldr	r5, [r4, #0]
 8002212:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002216:	7a4a      	ldrb	r2, [r1, #9]
 8002218:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 800221c:	4a06      	ldr	r2, [pc, #24]	; (8002238 <HAL_DMAEx_ConfigMuxSync+0x4c>)
 800221e:	402a      	ands	r2, r5
 8002220:	4313      	orrs	r3, r2
 8002222:	6023      	str	r3, [r4, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8002224:	2300      	movs	r3, #0
 8002226:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    return HAL_OK;
 800222a:	4618      	mov	r0, r3
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
  }
}
 800222c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800222e:	2001      	movs	r0, #1
 8002230:	e7fc      	b.n	800222c <HAL_DMAEx_ConfigMuxSync+0x40>
    __HAL_LOCK(hdma);
 8002232:	2002      	movs	r0, #2
 8002234:	e7fa      	b.n	800222c <HAL_DMAEx_ConfigMuxSync+0x40>
 8002236:	bf00      	nop
 8002238:	e000fdff 	.word	0xe000fdff

0800223c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800223c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002240:	4a57      	ldr	r2, [pc, #348]	; (80023a0 <HAL_GPIO_Init+0x164>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002242:	f8d1 e000 	ldr.w	lr, [r1]
  uint32_t position = 0x00u;
 8002246:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002248:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224c:	fa3e f403 	lsrs.w	r4, lr, r3
 8002250:	d101      	bne.n	8002256 <HAL_GPIO_Init+0x1a>
      }
    }
    
    position++;
  }
}
 8002252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002256:	2401      	movs	r4, #1
 8002258:	fa04 f803 	lsl.w	r8, r4, r3
    if (iocurrent != 0x00u)
 800225c:	ea18 050e 	ands.w	r5, r8, lr
 8002260:	f000 8094 	beq.w	800238c <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002264:	684c      	ldr	r4, [r1, #4]
 8002266:	f024 0a10 	bic.w	sl, r4, #16
 800226a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800226e:	2603      	movs	r6, #3
 8002270:	f10a 37ff 	add.w	r7, sl, #4294967295
 8002274:	fa06 f60c 	lsl.w	r6, r6, ip
 8002278:	2f01      	cmp	r7, #1
 800227a:	ea6f 0606 	mvn.w	r6, r6
 800227e:	d811      	bhi.n	80022a4 <HAL_GPIO_Init+0x68>
        temp = GPIOx->OSPEEDR;
 8002280:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002282:	ea07 0b06 	and.w	fp, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002286:	68cf      	ldr	r7, [r1, #12]
 8002288:	fa07 f70c 	lsl.w	r7, r7, ip
 800228c:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8002290:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002292:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002294:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002298:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800229c:	409f      	lsls	r7, r3
 800229e:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80022a2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80022a4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022a6:	ea07 0806 	and.w	r8, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022aa:	688f      	ldr	r7, [r1, #8]
 80022ac:	fa07 f70c 	lsl.w	r7, r7, ip
 80022b0:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022b4:	f1ba 0f02 	cmp.w	sl, #2
      GPIOx->PUPDR = temp;
 80022b8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ba:	d114      	bne.n	80022e6 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3u];
 80022bc:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 80022c0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022c4:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80022c8:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022cc:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80022d0:	fa09 fb0a 	lsl.w	fp, r9, sl
 80022d4:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022d8:	690f      	ldr	r7, [r1, #16]
 80022da:	fa07 f70a 	lsl.w	r7, r7, sl
 80022de:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 80022e2:	f8c8 7020 	str.w	r7, [r8, #32]
      temp = GPIOx->MODER;
 80022e6:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022e8:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022ea:	f004 0703 	and.w	r7, r4, #3
 80022ee:	fa07 fc0c 	lsl.w	ip, r7, ip
 80022f2:	ea4c 0606 	orr.w	r6, ip, r6
      GPIOx->MODER = temp;
 80022f6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022f8:	00e6      	lsls	r6, r4, #3
 80022fa:	d547      	bpl.n	800238c <HAL_GPIO_Init+0x150>
 80022fc:	f023 0703 	bic.w	r7, r3, #3
 8002300:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8002304:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002308:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 800230c:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800230e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002312:	fa09 f80c 	lsl.w	r8, r9, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002316:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800231a:	ea26 0808 	bic.w	r8, r6, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800231e:	d037      	beq.n	8002390 <HAL_GPIO_Init+0x154>
 8002320:	4e20      	ldr	r6, [pc, #128]	; (80023a4 <HAL_GPIO_Init+0x168>)
 8002322:	42b0      	cmp	r0, r6
 8002324:	d036      	beq.n	8002394 <HAL_GPIO_Init+0x158>
 8002326:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800232a:	42b0      	cmp	r0, r6
 800232c:	d034      	beq.n	8002398 <HAL_GPIO_Init+0x15c>
 800232e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002332:	42b0      	cmp	r0, r6
 8002334:	d032      	beq.n	800239c <HAL_GPIO_Init+0x160>
 8002336:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800233a:	42b0      	cmp	r0, r6
 800233c:	bf14      	ite	ne
 800233e:	2607      	movne	r6, #7
 8002340:	2604      	moveq	r6, #4
 8002342:	fa06 f60c 	lsl.w	r6, r6, ip
 8002346:	ea46 0608 	orr.w	r6, r6, r8
        SYSCFG->EXTICR[position >> 2u] = temp;
 800234a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 800234c:	f8d2 6080 	ldr.w	r6, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 8002350:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002352:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8002356:	bf0c      	ite	eq
 8002358:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800235a:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 800235c:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
        temp = EXTI->EMR1;
 8002360:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002364:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8002368:	bf0c      	ite	eq
 800236a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800236c:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 800236e:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI->RTSR1;
 8002372:	6816      	ldr	r6, [r2, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002374:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8002378:	bf0c      	ite	eq
 800237a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800237c:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 800237e:	6016      	str	r6, [r2, #0]
        temp = EXTI->FTSR1;
 8002380:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002382:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8002384:	bf54      	ite	pl
 8002386:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8002388:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 800238a:	6056      	str	r6, [r2, #4]
    position++;
 800238c:	3301      	adds	r3, #1
 800238e:	e75d      	b.n	800224c <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002390:	2600      	movs	r6, #0
 8002392:	e7d6      	b.n	8002342 <HAL_GPIO_Init+0x106>
 8002394:	2601      	movs	r6, #1
 8002396:	e7d4      	b.n	8002342 <HAL_GPIO_Init+0x106>
 8002398:	2602      	movs	r6, #2
 800239a:	e7d2      	b.n	8002342 <HAL_GPIO_Init+0x106>
 800239c:	2603      	movs	r6, #3
 800239e:	e7d0      	b.n	8002342 <HAL_GPIO_Init+0x106>
 80023a0:	58000800 	.word	0x58000800
 80023a4:	48000400 	.word	0x48000400

080023a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a8:	b10a      	cbz	r2, 80023ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023aa:	6181      	str	r1, [r0, #24]
 80023ac:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023ae:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80023b0:	4770      	bx	lr

080023b2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023b2:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023b4:	4604      	mov	r4, r0
 80023b6:	2800      	cmp	r0, #0
 80023b8:	d04a      	beq.n	8002450 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ba:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80023be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023c2:	b91b      	cbnz	r3, 80023cc <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023c4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023c8:	f7fe feac 	bl	8001124 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023cc:	2324      	movs	r3, #36	; 0x24
 80023ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023d2:	6823      	ldr	r3, [r4, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	f022 0201 	bic.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023dc:	6862      	ldr	r2, [r4, #4]
 80023de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	e9d4 2102 	ldrd	r2, r1, [r4, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023f0:	2901      	cmp	r1, #1
 80023f2:	d124      	bne.n	800243e <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023f8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002400:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002404:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800240c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800240e:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8002412:	430a      	orrs	r2, r1
 8002414:	69a1      	ldr	r1, [r4, #24]
 8002416:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800241a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800241c:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8002420:	430a      	orrs	r2, r1
 8002422:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	f042 0201 	orr.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800242c:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800242e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002430:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002432:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002436:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002438:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 800243c:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800243e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002442:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002444:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002446:	bf04      	itt	eq
 8002448:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800244c:	605a      	streq	r2, [r3, #4]
 800244e:	e7d4      	b.n	80023fa <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8002450:	2001      	movs	r0, #1
 8002452:	e7f3      	b.n	800243c <HAL_I2C_Init+0x8a>

08002454 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002454:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	2a20      	cmp	r2, #32
{
 800245c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800245e:	d11d      	bne.n	800249c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002460:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002464:	2b01      	cmp	r3, #1
 8002466:	d019      	beq.n	800249c <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002468:	2324      	movs	r3, #36	; 0x24
 800246a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800246e:	6803      	ldr	r3, [r0, #0]
 8002470:	681c      	ldr	r4, [r3, #0]
 8002472:	f024 0401 	bic.w	r4, r4, #1
 8002476:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002478:	681c      	ldr	r4, [r3, #0]
 800247a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800247e:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002480:	681c      	ldr	r4, [r3, #0]
 8002482:	4321      	orrs	r1, r4
 8002484:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002486:	6819      	ldr	r1, [r3, #0]
 8002488:	f041 0101 	orr.w	r1, r1, #1
 800248c:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800248e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002490:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002494:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002498:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800249a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800249c:	2002      	movs	r0, #2
 800249e:	e7fc      	b.n	800249a <HAL_I2CEx_ConfigAnalogFilter+0x46>

080024a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024a0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a2:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80024a6:	b2e4      	uxtb	r4, r4
 80024a8:	2c20      	cmp	r4, #32
 80024aa:	d11c      	bne.n	80024e6 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ac:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d018      	beq.n	80024e6 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024b4:	2324      	movs	r3, #36	; 0x24
 80024b6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024ba:	6803      	ldr	r3, [r0, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	f022 0201 	bic.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024c4:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024c6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024ca:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024ce:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80024da:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80024de:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80024e2:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80024e4:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80024e6:	2002      	movs	r0, #2
 80024e8:	e7fc      	b.n	80024e4 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

080024ec <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024ec:	4a02      	ldr	r2, [pc, #8]	; (80024f8 <HAL_PWR_EnableBkUpAccess+0xc>)
 80024ee:	6813      	ldr	r3, [r2, #0]
 80024f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f4:	6013      	str	r3, [r2, #0]
}
 80024f6:	4770      	bx	lr
 80024f8:	58000400 	.word	0x58000400

080024fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024fc:	4b02      	ldr	r3, [pc, #8]	; (8002508 <HAL_PWREx_GetVoltageRange+0xc>)
 80024fe:	6818      	ldr	r0, [r3, #0]
}
 8002500:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	58000400 	.word	0x58000400

0800250c <LL_RCC_HSE_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800250c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002510:	6818      	ldr	r0, [r3, #0]
}
 8002512:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8002516:	4770      	bx	lr

08002518 <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251c:	6818      	ldr	r0, [r3, #0]
}
 800251e:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8002522:	4770      	bx	lr

08002524 <LL_RCC_LSI1_IsReady>:
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002528:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 800252c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002530:	4770      	bx	lr

08002532 <LL_RCC_MSI_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002536:	6818      	ldr	r0, [r3, #0]
}
 8002538:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800253c:	4770      	bx	lr

0800253e <LL_RCC_MSI_SetRange>:
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800253e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002542:	6813      	ldr	r3, [r2, #0]
 8002544:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002548:	4318      	orrs	r0, r3
 800254a:	6010      	str	r0, [r2, #0]
}
 800254c:	4770      	bx	lr

0800254e <LL_RCC_MSI_GetRange>:
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800254e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
}
 8002558:	28b0      	cmp	r0, #176	; 0xb0
 800255a:	bf28      	it	cs
 800255c:	20b0      	movcs	r0, #176	; 0xb0
 800255e:	4770      	bx	lr

08002560 <LL_RCC_MSI_SetCalibTrimming>:
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002560:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002564:	6853      	ldr	r3, [r2, #4]
 8002566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800256a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800256e:	6050      	str	r0, [r2, #4]
}
 8002570:	4770      	bx	lr
	...

08002574 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002574:	28b0      	cmp	r0, #176	; 0xb0
 8002576:	4b2e      	ldr	r3, [pc, #184]	; (8002630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002578:	4a2e      	ldr	r2, [pc, #184]	; (8002634 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800257a:	bf98      	it	ls
 800257c:	0900      	lsrls	r0, r0, #4
{
 800257e:	b5f0      	push	{r4, r5, r6, r7, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002580:	bf8c      	ite	hi
 8002582:	6add      	ldrhi	r5, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002584:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002588:	4c2b      	ldr	r4, [pc, #172]	; (8002638 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800258a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 800258e:	b089      	sub	sp, #36	; 0x24
 8002590:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002594:	f003 030f 	and.w	r3, r3, #15
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002598:	466e      	mov	r6, sp
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800259a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259e:	fbb5 f5f3 	udiv	r5, r5, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80025a2:	4b26      	ldr	r3, [pc, #152]	; (800263c <RCC_SetFlashLatencyFromMSIRange+0xc8>)
 80025a4:	fbb5 f5f3 	udiv	r5, r5, r3
 80025a8:	f7ff ffa8 	bl	80024fc <HAL_PWREx_GetVoltageRange>
 80025ac:	4607      	mov	r7, r0
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80025ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80025b2:	3410      	adds	r4, #16
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80025b4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80025b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025bc:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80025c0:	ac08      	add	r4, sp, #32
 80025c2:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025c6:	d017      	beq.n	80025f8 <RCC_SetFlashLatencyFromMSIRange+0x84>
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80025c8:	2d06      	cmp	r5, #6
 80025ca:	d924      	bls.n	8002616 <RCC_SetFlashLatencyFromMSIRange+0xa2>
 80025cc:	2d0c      	cmp	r5, #12
 80025ce:	d924      	bls.n	800261a <RCC_SetFlashLatencyFromMSIRange+0xa6>
 80025d0:	2d10      	cmp	r5, #16
 80025d2:	d924      	bls.n	800261e <RCC_SetFlashLatencyFromMSIRange+0xaa>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80025d4:	2400      	movs	r4, #0
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80025d6:	4d1a      	ldr	r5, [pc, #104]	; (8002640 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80025d8:	682b      	ldr	r3, [r5, #0]
 80025da:	f023 0307 	bic.w	r3, r3, #7
 80025de:	4323      	orrs	r3, r4
 80025e0:	602b      	str	r3, [r5, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80025e2:	f7ff fbcd 	bl	8001d80 <HAL_GetTick>
 80025e6:	4606      	mov	r6, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80025e8:	682b      	ldr	r3, [r5, #0]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	429c      	cmp	r4, r3
 80025f0:	d117      	bne.n	8002622 <RCC_SetFlashLatencyFromMSIRange+0xae>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80025f2:	2000      	movs	r0, #0
}
 80025f4:	b009      	add	sp, #36	; 0x24
 80025f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80025f8:	2300      	movs	r3, #0
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80025fa:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 80025fe:	4295      	cmp	r5, r2
 8002600:	d805      	bhi.n	800260e <RCC_SetFlashLatencyFromMSIRange+0x9a>
        latency = FLASH_LATENCY_RANGE[index];
 8002602:	aa08      	add	r2, sp, #32
 8002604:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002608:	f853 4c10 	ldr.w	r4, [r3, #-16]
 800260c:	e7e3      	b.n	80025d6 <RCC_SetFlashLatencyFromMSIRange+0x62>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800260e:	3301      	adds	r3, #1
 8002610:	2b04      	cmp	r3, #4
 8002612:	d1f2      	bne.n	80025fa <RCC_SetFlashLatencyFromMSIRange+0x86>
 8002614:	e7de      	b.n	80025d4 <RCC_SetFlashLatencyFromMSIRange+0x60>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002616:	2300      	movs	r3, #0
 8002618:	e7f3      	b.n	8002602 <RCC_SetFlashLatencyFromMSIRange+0x8e>
 800261a:	2301      	movs	r3, #1
 800261c:	e7f1      	b.n	8002602 <RCC_SetFlashLatencyFromMSIRange+0x8e>
 800261e:	2302      	movs	r3, #2
 8002620:	e7ef      	b.n	8002602 <RCC_SetFlashLatencyFromMSIRange+0x8e>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002622:	f7ff fbad 	bl	8001d80 <HAL_GetTick>
 8002626:	1b80      	subs	r0, r0, r6
 8002628:	2802      	cmp	r0, #2
 800262a:	d9dd      	bls.n	80025e8 <RCC_SetFlashLatencyFromMSIRange+0x74>
      return HAL_TIMEOUT;
 800262c:	2003      	movs	r0, #3
 800262e:	e7e1      	b.n	80025f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
 8002630:	08005f3c 	.word	0x08005f3c
 8002634:	08005f7c 	.word	0x08005f7c
 8002638:	0800603c 	.word	0x0800603c
 800263c:	000f4240 	.word	0x000f4240
 8002640:	58004000 	.word	0x58004000

08002644 <HAL_RCC_OscConfig>:
{
 8002644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (RCC_OscInitStruct == NULL)
 8002646:	4604      	mov	r4, r0
 8002648:	b908      	cbnz	r0, 800264e <HAL_RCC_OscConfig+0xa>
          return HAL_ERROR;
 800264a:	2001      	movs	r0, #1
 800264c:	e081      	b.n	8002752 <HAL_RCC_OscConfig+0x10e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800264e:	6803      	ldr	r3, [r0, #0]
 8002650:	069f      	lsls	r7, r3, #26
 8002652:	d52a      	bpl.n	80026aa <HAL_RCC_OscConfig+0x66>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002654:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002658:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800265a:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800265c:	f013 030c 	ands.w	r3, r3, #12
 8002660:	d005      	beq.n	800266e <HAL_RCC_OscConfig+0x2a>
 8002662:	2b0c      	cmp	r3, #12
 8002664:	d15a      	bne.n	800271c <HAL_RCC_OscConfig+0xd8>
 8002666:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800266a:	2b01      	cmp	r3, #1
 800266c:	d156      	bne.n	800271c <HAL_RCC_OscConfig+0xd8>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800266e:	f7ff ff60 	bl	8002532 <LL_RCC_MSI_IsReady>
 8002672:	b110      	cbz	r0, 800267a <HAL_RCC_OscConfig+0x36>
 8002674:	69e3      	ldr	r3, [r4, #28]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0e7      	beq.n	800264a <HAL_RCC_OscConfig+0x6>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800267a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800267c:	f7ff ff67 	bl	800254e <LL_RCC_MSI_GetRange>
 8002680:	4282      	cmp	r2, r0
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002682:	6a60      	ldr	r0, [r4, #36]	; 0x24
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002684:	d93f      	bls.n	8002706 <HAL_RCC_OscConfig+0xc2>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002686:	f7ff ff75 	bl	8002574 <RCC_SetFlashLatencyFromMSIRange>
 800268a:	2800      	cmp	r0, #0
 800268c:	d1dd      	bne.n	800264a <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800268e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002690:	f7ff ff55 	bl	800253e <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002694:	6a20      	ldr	r0, [r4, #32]
 8002696:	f7ff ff63 	bl	8002560 <LL_RCC_MSI_SetCalibTrimming>
        SystemCoreClockUpdate();
 800269a:	f7ff fadf 	bl	8001c5c <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800269e:	4bba      	ldr	r3, [pc, #744]	; (8002988 <HAL_RCC_OscConfig+0x344>)
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	f7ff fb29 	bl	8001cf8 <HAL_InitTick>
 80026a6:	2800      	cmp	r0, #0
 80026a8:	d1cf      	bne.n	800264a <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026aa:	6823      	ldr	r3, [r4, #0]
 80026ac:	07de      	lsls	r6, r3, #31
 80026ae:	d462      	bmi.n	8002776 <HAL_RCC_OscConfig+0x132>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b0:	6823      	ldr	r3, [r4, #0]
 80026b2:	079d      	lsls	r5, r3, #30
 80026b4:	f100 80ad 	bmi.w	8002812 <HAL_RCC_OscConfig+0x1ce>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80026b8:	6823      	ldr	r3, [r4, #0]
 80026ba:	f013 0f18 	tst.w	r3, #24
 80026be:	f040 80ee 	bne.w	800289e <HAL_RCC_OscConfig+0x25a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c2:	6823      	ldr	r3, [r4, #0]
 80026c4:	0758      	lsls	r0, r3, #29
 80026c6:	f100 8188 	bmi.w	80029da <HAL_RCC_OscConfig+0x396>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	0658      	lsls	r0, r3, #25
 80026ce:	f140 81ed 	bpl.w	8002aac <HAL_RCC_OscConfig+0x468>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026d4:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 81d4 	beq.w	8002a86 <HAL_RCC_OscConfig+0x442>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80026de:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 80026ea:	f7ff fb49 	bl	8001d80 <HAL_GetTick>
 80026ee:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80026f0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80026f4:	0799      	lsls	r1, r3, #30
 80026f6:	f100 81d9 	bmi.w	8002aac <HAL_RCC_OscConfig+0x468>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026fa:	f7ff fb41 	bl	8001d80 <HAL_GetTick>
 80026fe:	1b80      	subs	r0, r0, r6
 8002700:	2802      	cmp	r0, #2
 8002702:	d9f5      	bls.n	80026f0 <HAL_RCC_OscConfig+0xac>
 8002704:	e024      	b.n	8002750 <HAL_RCC_OscConfig+0x10c>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002706:	f7ff ff1a 	bl	800253e <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800270a:	6a20      	ldr	r0, [r4, #32]
 800270c:	f7ff ff28 	bl	8002560 <LL_RCC_MSI_SetCalibTrimming>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002710:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002712:	f7ff ff2f 	bl	8002574 <RCC_SetFlashLatencyFromMSIRange>
 8002716:	2800      	cmp	r0, #0
 8002718:	d0bf      	beq.n	800269a <HAL_RCC_OscConfig+0x56>
 800271a:	e796      	b.n	800264a <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800271c:	69e2      	ldr	r2, [r4, #28]
 800271e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002722:	b1ba      	cbz	r2, 8002754 <HAL_RCC_OscConfig+0x110>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800272c:	f7ff fb28 	bl	8001d80 <HAL_GetTick>
 8002730:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() == 0U)
 8002732:	f7ff fefe 	bl	8002532 <LL_RCC_MSI_IsReady>
 8002736:	b130      	cbz	r0, 8002746 <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002738:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800273a:	f7ff ff00 	bl	800253e <LL_RCC_MSI_SetRange>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800273e:	6a20      	ldr	r0, [r4, #32]
 8002740:	f7ff ff0e 	bl	8002560 <LL_RCC_MSI_SetCalibTrimming>
 8002744:	e7b1      	b.n	80026aa <HAL_RCC_OscConfig+0x66>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002746:	f7ff fb1b 	bl	8001d80 <HAL_GetTick>
 800274a:	1b40      	subs	r0, r0, r5
 800274c:	2802      	cmp	r0, #2
 800274e:	d9f0      	bls.n	8002732 <HAL_RCC_OscConfig+0xee>
            return HAL_TIMEOUT;
 8002750:	2003      	movs	r0, #3
}
 8002752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	f022 0201 	bic.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800275c:	f7ff fb10 	bl	8001d80 <HAL_GetTick>
 8002760:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() != 0U)
 8002762:	f7ff fee6 	bl	8002532 <LL_RCC_MSI_IsReady>
 8002766:	2800      	cmp	r0, #0
 8002768:	d09f      	beq.n	80026aa <HAL_RCC_OscConfig+0x66>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800276a:	f7ff fb09 	bl	8001d80 <HAL_GetTick>
 800276e:	1b40      	subs	r0, r0, r5
 8002770:	2802      	cmp	r0, #2
 8002772:	d9f6      	bls.n	8002762 <HAL_RCC_OscConfig+0x11e>
 8002774:	e7ec      	b.n	8002750 <HAL_RCC_OscConfig+0x10c>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800277a:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800277c:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800277e:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002782:	2b08      	cmp	r3, #8
 8002784:	d005      	beq.n	8002792 <HAL_RCC_OscConfig+0x14e>
 8002786:	2b0c      	cmp	r3, #12
 8002788:	d10b      	bne.n	80027a2 <HAL_RCC_OscConfig+0x15e>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800278a:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800278e:	2b03      	cmp	r3, #3
 8002790:	d107      	bne.n	80027a2 <HAL_RCC_OscConfig+0x15e>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002792:	f7ff febb 	bl	800250c <LL_RCC_HSE_IsReady>
 8002796:	2800      	cmp	r0, #0
 8002798:	d08a      	beq.n	80026b0 <HAL_RCC_OscConfig+0x6c>
 800279a:	6863      	ldr	r3, [r4, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d187      	bne.n	80026b0 <HAL_RCC_OscConfig+0x6c>
 80027a0:	e753      	b.n	800264a <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a2:	6862      	ldr	r2, [r4, #4]
 80027a4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80027a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ac:	d111      	bne.n	80027d2 <HAL_RCC_OscConfig+0x18e>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027b4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80027b6:	f7ff fae3 	bl	8001d80 <HAL_GetTick>
 80027ba:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() == 0U)
 80027bc:	f7ff fea6 	bl	800250c <LL_RCC_HSE_IsReady>
 80027c0:	2800      	cmp	r0, #0
 80027c2:	f47f af75 	bne.w	80026b0 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c6:	f7ff fadb 	bl	8001d80 <HAL_GetTick>
 80027ca:	1b40      	subs	r0, r0, r5
 80027cc:	2864      	cmp	r0, #100	; 0x64
 80027ce:	d9f5      	bls.n	80027bc <HAL_RCC_OscConfig+0x178>
 80027d0:	e7be      	b.n	8002750 <HAL_RCC_OscConfig+0x10c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d2:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80027d6:	d104      	bne.n	80027e2 <HAL_RCC_OscConfig+0x19e>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	e7e5      	b.n	80027ae <HAL_RCC_OscConfig+0x16a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80027e2:	6819      	ldr	r1, [r3, #0]
 80027e4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80027e8:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80027ea:	6819      	ldr	r1, [r3, #0]
 80027ec:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80027f0:	6019      	str	r1, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027f2:	2a00      	cmp	r2, #0
 80027f4:	d1df      	bne.n	80027b6 <HAL_RCC_OscConfig+0x172>
        tickstart = HAL_GetTick();
 80027f6:	f7ff fac3 	bl	8001d80 <HAL_GetTick>
 80027fa:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() != 0U)
 80027fc:	f7ff fe86 	bl	800250c <LL_RCC_HSE_IsReady>
 8002800:	2800      	cmp	r0, #0
 8002802:	f43f af55 	beq.w	80026b0 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002806:	f7ff fabb 	bl	8001d80 <HAL_GetTick>
 800280a:	1b40      	subs	r0, r0, r5
 800280c:	2864      	cmp	r0, #100	; 0x64
 800280e:	d9f5      	bls.n	80027fc <HAL_RCC_OscConfig+0x1b8>
 8002810:	e79e      	b.n	8002750 <HAL_RCC_OscConfig+0x10c>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002812:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002816:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002818:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800281a:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800281e:	2b04      	cmp	r3, #4
 8002820:	d005      	beq.n	800282e <HAL_RCC_OscConfig+0x1ea>
 8002822:	2b0c      	cmp	r3, #12
 8002824:	d114      	bne.n	8002850 <HAL_RCC_OscConfig+0x20c>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002826:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800282a:	2b02      	cmp	r3, #2
 800282c:	d110      	bne.n	8002850 <HAL_RCC_OscConfig+0x20c>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800282e:	f7ff fe73 	bl	8002518 <LL_RCC_HSI_IsReady>
 8002832:	b118      	cbz	r0, 800283c <HAL_RCC_OscConfig+0x1f8>
 8002834:	68e3      	ldr	r3, [r4, #12]
 8002836:	2b00      	cmp	r3, #0
 8002838:	f43f af07 	beq.w	800264a <HAL_RCC_OscConfig+0x6>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800283c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002840:	6921      	ldr	r1, [r4, #16]
 8002842:	6853      	ldr	r3, [r2, #4]
 8002844:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002848:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800284c:	6053      	str	r3, [r2, #4]
 800284e:	e733      	b.n	80026b8 <HAL_RCC_OscConfig+0x74>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002850:	68e2      	ldr	r2, [r4, #12]
 8002852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002856:	b182      	cbz	r2, 800287a <HAL_RCC_OscConfig+0x236>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800285e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002860:	f7ff fa8e 	bl	8001d80 <HAL_GetTick>
 8002864:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() == 0U)
 8002866:	f7ff fe57 	bl	8002518 <LL_RCC_HSI_IsReady>
 800286a:	2800      	cmp	r0, #0
 800286c:	d1e6      	bne.n	800283c <HAL_RCC_OscConfig+0x1f8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800286e:	f7ff fa87 	bl	8001d80 <HAL_GetTick>
 8002872:	1b40      	subs	r0, r0, r5
 8002874:	2802      	cmp	r0, #2
 8002876:	d9f6      	bls.n	8002866 <HAL_RCC_OscConfig+0x222>
 8002878:	e76a      	b.n	8002750 <HAL_RCC_OscConfig+0x10c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002880:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002882:	f7ff fa7d 	bl	8001d80 <HAL_GetTick>
 8002886:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() != 0U)
 8002888:	f7ff fe46 	bl	8002518 <LL_RCC_HSI_IsReady>
 800288c:	2800      	cmp	r0, #0
 800288e:	f43f af13 	beq.w	80026b8 <HAL_RCC_OscConfig+0x74>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002892:	f7ff fa75 	bl	8001d80 <HAL_GetTick>
 8002896:	1b40      	subs	r0, r0, r5
 8002898:	2802      	cmp	r0, #2
 800289a:	d9f5      	bls.n	8002888 <HAL_RCC_OscConfig+0x244>
 800289c:	e758      	b.n	8002750 <HAL_RCC_OscConfig+0x10c>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800289e:	6962      	ldr	r2, [r4, #20]
 80028a0:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80028a4:	2a00      	cmp	r2, #0
 80028a6:	d071      	beq.n	800298c <HAL_RCC_OscConfig+0x348>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80028a8:	06d9      	lsls	r1, r3, #27
 80028aa:	d547      	bpl.n	800293c <HAL_RCC_OscConfig+0x2f8>
        if (LL_RCC_LSI1_IsReady() == 0U)
 80028ac:	f7ff fe3a 	bl	8002524 <LL_RCC_LSI1_IsReady>
 80028b0:	b358      	cbz	r0, 800290a <HAL_RCC_OscConfig+0x2c6>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80028b2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80028b6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80028ba:	f043 0304 	orr.w	r3, r3, #4
 80028be:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 80028c2:	f7ff fa5d 	bl	8001d80 <HAL_GetTick>
 80028c6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80028c8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80028cc:	071a      	lsls	r2, r3, #28
 80028ce:	d52f      	bpl.n	8002930 <HAL_RCC_OscConfig+0x2ec>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80028d0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80028d4:	69a2      	ldr	r2, [r4, #24]
 80028d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80028de:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80028e2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80028e6:	f023 0301 	bic.w	r3, r3, #1
 80028ea:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 80028ee:	f7ff fa47 	bl	8001d80 <HAL_GetTick>
 80028f2:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() != 0U)
 80028f4:	f7ff fe16 	bl	8002524 <LL_RCC_LSI1_IsReady>
 80028f8:	2800      	cmp	r0, #0
 80028fa:	f43f aee2 	beq.w	80026c2 <HAL_RCC_OscConfig+0x7e>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80028fe:	f7ff fa3f 	bl	8001d80 <HAL_GetTick>
 8002902:	1b40      	subs	r0, r0, r5
 8002904:	2802      	cmp	r0, #2
 8002906:	d9f5      	bls.n	80028f4 <HAL_RCC_OscConfig+0x2b0>
 8002908:	e722      	b.n	8002750 <HAL_RCC_OscConfig+0x10c>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800290a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 8002916:	f7ff fa33 	bl	8001d80 <HAL_GetTick>
 800291a:	4605      	mov	r5, r0
          while (LL_RCC_LSI1_IsReady() == 0U)
 800291c:	f7ff fe02 	bl	8002524 <LL_RCC_LSI1_IsReady>
 8002920:	2800      	cmp	r0, #0
 8002922:	d1c6      	bne.n	80028b2 <HAL_RCC_OscConfig+0x26e>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002924:	f7ff fa2c 	bl	8001d80 <HAL_GetTick>
 8002928:	1b40      	subs	r0, r0, r5
 800292a:	2802      	cmp	r0, #2
 800292c:	d9f6      	bls.n	800291c <HAL_RCC_OscConfig+0x2d8>
 800292e:	e70f      	b.n	8002750 <HAL_RCC_OscConfig+0x10c>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002930:	f7ff fa26 	bl	8001d80 <HAL_GetTick>
 8002934:	1b80      	subs	r0, r0, r6
 8002936:	2803      	cmp	r0, #3
 8002938:	d9c6      	bls.n	80028c8 <HAL_RCC_OscConfig+0x284>
 800293a:	e709      	b.n	8002750 <HAL_RCC_OscConfig+0x10c>
 800293c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8002948:	f7ff fa1a 	bl	8001d80 <HAL_GetTick>
 800294c:	4606      	mov	r6, r0
        while (LL_RCC_LSI1_IsReady() == 0U)
 800294e:	f7ff fde9 	bl	8002524 <LL_RCC_LSI1_IsReady>
 8002952:	b198      	cbz	r0, 800297c <HAL_RCC_OscConfig+0x338>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002958:	461d      	mov	r5, r3
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800295a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800295e:	f022 0204 	bic.w	r2, r2, #4
 8002962:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002966:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800296a:	071b      	lsls	r3, r3, #28
 800296c:	f57f aea9 	bpl.w	80026c2 <HAL_RCC_OscConfig+0x7e>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002970:	f7ff fa06 	bl	8001d80 <HAL_GetTick>
 8002974:	1b80      	subs	r0, r0, r6
 8002976:	2803      	cmp	r0, #3
 8002978:	d9f5      	bls.n	8002966 <HAL_RCC_OscConfig+0x322>
 800297a:	e6e9      	b.n	8002750 <HAL_RCC_OscConfig+0x10c>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800297c:	f7ff fa00 	bl	8001d80 <HAL_GetTick>
 8002980:	1b80      	subs	r0, r0, r6
 8002982:	2802      	cmp	r0, #2
 8002984:	d9e3      	bls.n	800294e <HAL_RCC_OscConfig+0x30a>
 8002986:	e6e3      	b.n	8002750 <HAL_RCC_OscConfig+0x10c>
 8002988:	20000028 	.word	0x20000028
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800298c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002990:	f023 0304 	bic.w	r3, r3, #4
 8002994:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002998:	f7ff f9f2 	bl	8001d80 <HAL_GetTick>
 800299c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800299e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80029a2:	071f      	lsls	r7, r3, #28
 80029a4:	d413      	bmi.n	80029ce <HAL_RCC_OscConfig+0x38a>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80029a6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80029aa:	f023 0301 	bic.w	r3, r3, #1
 80029ae:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 80029b2:	f7ff f9e5 	bl	8001d80 <HAL_GetTick>
 80029b6:	4605      	mov	r5, r0
      while (LL_RCC_LSI1_IsReady() != 0U)
 80029b8:	f7ff fdb4 	bl	8002524 <LL_RCC_LSI1_IsReady>
 80029bc:	2800      	cmp	r0, #0
 80029be:	f43f ae80 	beq.w	80026c2 <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80029c2:	f7ff f9dd 	bl	8001d80 <HAL_GetTick>
 80029c6:	1b40      	subs	r0, r0, r5
 80029c8:	2802      	cmp	r0, #2
 80029ca:	d9f5      	bls.n	80029b8 <HAL_RCC_OscConfig+0x374>
 80029cc:	e6c0      	b.n	8002750 <HAL_RCC_OscConfig+0x10c>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80029ce:	f7ff f9d7 	bl	8001d80 <HAL_GetTick>
 80029d2:	1b80      	subs	r0, r0, r6
 80029d4:	2803      	cmp	r0, #3
 80029d6:	d9e2      	bls.n	800299e <HAL_RCC_OscConfig+0x35a>
 80029d8:	e6ba      	b.n	8002750 <HAL_RCC_OscConfig+0x10c>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029da:	4d84      	ldr	r5, [pc, #528]	; (8002bec <HAL_RCC_OscConfig+0x5a8>)
 80029dc:	682b      	ldr	r3, [r5, #0]
 80029de:	05d8      	lsls	r0, r3, #23
 80029e0:	d51c      	bpl.n	8002a1c <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e2:	68a3      	ldr	r3, [r4, #8]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80029ea:	d125      	bne.n	8002a38 <HAL_RCC_OscConfig+0x3f4>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80029ec:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 80029f8:	f7ff f9c2 	bl	8001d80 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80029fc:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8002a00:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a02:	f241 3588 	movw	r5, #5000	; 0x1388
 8002a06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a0a:	079a      	lsls	r2, r3, #30
 8002a0c:	f53f ae5d 	bmi.w	80026ca <HAL_RCC_OscConfig+0x86>
 8002a10:	f7ff f9b6 	bl	8001d80 <HAL_GetTick>
 8002a14:	1b80      	subs	r0, r0, r6
 8002a16:	42a8      	cmp	r0, r5
 8002a18:	d9f5      	bls.n	8002a06 <HAL_RCC_OscConfig+0x3c2>
 8002a1a:	e699      	b.n	8002750 <HAL_RCC_OscConfig+0x10c>
      HAL_PWR_EnableBkUpAccess();
 8002a1c:	f7ff fd66 	bl	80024ec <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8002a20:	f7ff f9ae 	bl	8001d80 <HAL_GetTick>
 8002a24:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a26:	682b      	ldr	r3, [r5, #0]
 8002a28:	05d9      	lsls	r1, r3, #23
 8002a2a:	d4da      	bmi.n	80029e2 <HAL_RCC_OscConfig+0x39e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a2c:	f7ff f9a8 	bl	8001d80 <HAL_GetTick>
 8002a30:	1b80      	subs	r0, r0, r6
 8002a32:	2802      	cmp	r0, #2
 8002a34:	d9f7      	bls.n	8002a26 <HAL_RCC_OscConfig+0x3e2>
 8002a36:	e68b      	b.n	8002750 <HAL_RCC_OscConfig+0x10c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a38:	2b05      	cmp	r3, #5
 8002a3a:	d106      	bne.n	8002a4a <HAL_RCC_OscConfig+0x406>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a3c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002a40:	f043 0304 	orr.w	r3, r3, #4
 8002a44:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8002a48:	e7d0      	b.n	80029ec <HAL_RCC_OscConfig+0x3a8>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a4a:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8002a4e:	f022 0201 	bic.w	r2, r2, #1
 8002a52:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a56:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8002a5a:	f022 0204 	bic.w	r2, r2, #4
 8002a5e:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1c8      	bne.n	80029f8 <HAL_RCC_OscConfig+0x3b4>
      tickstart = HAL_GetTick();
 8002a66:	f7ff f98b 	bl	8001d80 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a6a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002a6e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002a70:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002a74:	079b      	lsls	r3, r3, #30
 8002a76:	f57f ae28 	bpl.w	80026ca <HAL_RCC_OscConfig+0x86>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7a:	f7ff f981 	bl	8001d80 <HAL_GetTick>
 8002a7e:	1bc0      	subs	r0, r0, r7
 8002a80:	42b0      	cmp	r0, r6
 8002a82:	d9f5      	bls.n	8002a70 <HAL_RCC_OscConfig+0x42c>
 8002a84:	e664      	b.n	8002750 <HAL_RCC_OscConfig+0x10c>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002a86:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002a8a:	f023 0301 	bic.w	r3, r3, #1
 8002a8e:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002a92:	f7ff f975 	bl	8001d80 <HAL_GetTick>
 8002a96:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002a98:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002a9c:	079a      	lsls	r2, r3, #30
 8002a9e:	d505      	bpl.n	8002aac <HAL_RCC_OscConfig+0x468>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aa0:	f7ff f96e 	bl	8001d80 <HAL_GetTick>
 8002aa4:	1b80      	subs	r0, r0, r6
 8002aa6:	2802      	cmp	r0, #2
 8002aa8:	d9f6      	bls.n	8002a98 <HAL_RCC_OscConfig+0x454>
 8002aaa:	e651      	b.n	8002750 <HAL_RCC_OscConfig+0x10c>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002aac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002aae:	b909      	cbnz	r1, 8002ab4 <HAL_RCC_OscConfig+0x470>
  return HAL_OK;
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	e64e      	b.n	8002752 <HAL_RCC_OscConfig+0x10e>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002ab4:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ab8:	2902      	cmp	r1, #2
 8002aba:	68aa      	ldr	r2, [r5, #8]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002abc:	68eb      	ldr	r3, [r5, #12]
 8002abe:	f002 020c 	and.w	r2, r2, #12
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ac2:	d174      	bne.n	8002bae <HAL_RCC_OscConfig+0x56a>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002ac6:	f003 0103 	and.w	r1, r3, #3
 8002aca:	4281      	cmp	r1, r0
 8002acc:	d118      	bne.n	8002b00 <HAL_RCC_OscConfig+0x4bc>
 8002ace:	6b60      	ldr	r0, [r4, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ad0:	f003 0170 	and.w	r1, r3, #112	; 0x70
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad4:	4281      	cmp	r1, r0
 8002ad6:	d113      	bne.n	8002b00 <HAL_RCC_OscConfig+0x4bc>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ad8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ada:	f3c3 2106 	ubfx	r1, r3, #8, #7
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ade:	4281      	cmp	r1, r0
 8002ae0:	d10e      	bne.n	8002b00 <HAL_RCC_OscConfig+0x4bc>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ae2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ae4:	f403 1178 	and.w	r1, r3, #4063232	; 0x3e0000
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ae8:	4281      	cmp	r1, r0
 8002aea:	d109      	bne.n	8002b00 <HAL_RCC_OscConfig+0x4bc>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002aec:	6c20      	ldr	r0, [r4, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002aee:	f003 6160 	and.w	r1, r3, #234881024	; 0xe000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002af2:	4281      	cmp	r1, r0
 8002af4:	d104      	bne.n	8002b00 <HAL_RCC_OscConfig+0x4bc>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002af6:	6c61      	ldr	r1, [r4, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002af8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002afc:	428b      	cmp	r3, r1
 8002afe:	d03f      	beq.n	8002b80 <HAL_RCC_OscConfig+0x53c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b00:	2a0c      	cmp	r2, #12
 8002b02:	f43f ada2 	beq.w	800264a <HAL_RCC_OscConfig+0x6>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b06:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002b0a:	682b      	ldr	r3, [r5, #0]
 8002b0c:	015b      	lsls	r3, r3, #5
 8002b0e:	f53f ad9c 	bmi.w	800264a <HAL_RCC_OscConfig+0x6>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002b12:	682b      	ldr	r3, [r5, #0]
 8002b14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b18:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8002b1a:	f7ff f931 	bl	8001d80 <HAL_GetTick>
 8002b1e:	4606      	mov	r6, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b20:	682b      	ldr	r3, [r5, #0]
 8002b22:	019f      	lsls	r7, r3, #6
 8002b24:	d426      	bmi.n	8002b74 <HAL_RCC_OscConfig+0x530>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b26:	e9d4 320c 	ldrd	r3, r2, [r4, #48]	; 0x30
 8002b2a:	68e9      	ldr	r1, [r5, #12]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	4a30      	ldr	r2, [pc, #192]	; (8002bf0 <HAL_RCC_OscConfig+0x5ac>)
 8002b30:	400a      	ands	r2, r1
 8002b32:	4313      	orrs	r3, r2
 8002b34:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002b36:	4313      	orrs	r3, r2
 8002b38:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002b42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b46:	60eb      	str	r3, [r5, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002b48:	682b      	ldr	r3, [r5, #0]
 8002b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b4e:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b50:	68eb      	ldr	r3, [r5, #12]
 8002b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b56:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8002b58:	f7ff f912 	bl	8001d80 <HAL_GetTick>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b5c:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
            tickstart = HAL_GetTick();
 8002b60:	4605      	mov	r5, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b62:	6823      	ldr	r3, [r4, #0]
 8002b64:	0198      	lsls	r0, r3, #6
 8002b66:	d4a3      	bmi.n	8002ab0 <HAL_RCC_OscConfig+0x46c>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b68:	f7ff f90a 	bl	8001d80 <HAL_GetTick>
 8002b6c:	1b40      	subs	r0, r0, r5
 8002b6e:	2802      	cmp	r0, #2
 8002b70:	d9f7      	bls.n	8002b62 <HAL_RCC_OscConfig+0x51e>
 8002b72:	e5ed      	b.n	8002750 <HAL_RCC_OscConfig+0x10c>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b74:	f7ff f904 	bl	8001d80 <HAL_GetTick>
 8002b78:	1b80      	subs	r0, r0, r6
 8002b7a:	2802      	cmp	r0, #2
 8002b7c:	d9d0      	bls.n	8002b20 <HAL_RCC_OscConfig+0x4dc>
 8002b7e:	e5e7      	b.n	8002750 <HAL_RCC_OscConfig+0x10c>
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b80:	682b      	ldr	r3, [r5, #0]
 8002b82:	0199      	lsls	r1, r3, #6
 8002b84:	d494      	bmi.n	8002ab0 <HAL_RCC_OscConfig+0x46c>
 8002b86:	682b      	ldr	r3, [r5, #0]
 8002b88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b8c:	602b      	str	r3, [r5, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b8e:	68eb      	ldr	r3, [r5, #12]
 8002b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b94:	60eb      	str	r3, [r5, #12]
          tickstart = HAL_GetTick();
 8002b96:	f7ff f8f3 	bl	8001d80 <HAL_GetTick>
 8002b9a:	4604      	mov	r4, r0
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b9c:	682b      	ldr	r3, [r5, #0]
 8002b9e:	019a      	lsls	r2, r3, #6
 8002ba0:	d486      	bmi.n	8002ab0 <HAL_RCC_OscConfig+0x46c>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba2:	f7ff f8ed 	bl	8001d80 <HAL_GetTick>
 8002ba6:	1b00      	subs	r0, r0, r4
 8002ba8:	2802      	cmp	r0, #2
 8002baa:	d9f7      	bls.n	8002b9c <HAL_RCC_OscConfig+0x558>
 8002bac:	e5d0      	b.n	8002750 <HAL_RCC_OscConfig+0x10c>
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bae:	2a0c      	cmp	r2, #12
 8002bb0:	f43f ad4b 	beq.w	800264a <HAL_RCC_OscConfig+0x6>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002bb4:	682b      	ldr	r3, [r5, #0]
 8002bb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bba:	602b      	str	r3, [r5, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002bbc:	68eb      	ldr	r3, [r5, #12]
 8002bbe:	f023 0303 	bic.w	r3, r3, #3
 8002bc2:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002bc4:	68eb      	ldr	r3, [r5, #12]
 8002bc6:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bce:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8002bd0:	f7ff f8d6 	bl	8001d80 <HAL_GetTick>
 8002bd4:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bd6:	682b      	ldr	r3, [r5, #0]
 8002bd8:	019b      	lsls	r3, r3, #6
 8002bda:	f57f af69 	bpl.w	8002ab0 <HAL_RCC_OscConfig+0x46c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bde:	f7ff f8cf 	bl	8001d80 <HAL_GetTick>
 8002be2:	1b00      	subs	r0, r0, r4
 8002be4:	2802      	cmp	r0, #2
 8002be6:	d9f6      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x592>
 8002be8:	e5b2      	b.n	8002750 <HAL_RCC_OscConfig+0x10c>
 8002bea:	bf00      	nop
 8002bec:	58000400 	.word	0x58000400
 8002bf0:	11c1808c 	.word	0x11c1808c

08002bf4 <HAL_RCC_ClockConfig>:
{
 8002bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bf8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002bfa:	4604      	mov	r4, r0
 8002bfc:	b910      	cbnz	r0, 8002c04 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002bfe:	2001      	movs	r0, #1
}
 8002c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c04:	4e74      	ldr	r6, [pc, #464]	; (8002dd8 <HAL_RCC_ClockConfig+0x1e4>)
 8002c06:	6833      	ldr	r3, [r6, #0]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	428b      	cmp	r3, r1
 8002c0e:	d316      	bcc.n	8002c3e <HAL_RCC_ClockConfig+0x4a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c10:	6823      	ldr	r3, [r4, #0]
 8002c12:	0798      	lsls	r0, r3, #30
 8002c14:	d527      	bpl.n	8002c66 <HAL_RCC_ClockConfig+0x72>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002c16:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002c1a:	68a2      	ldr	r2, [r4, #8]
 8002c1c:	68b3      	ldr	r3, [r6, #8]
 8002c1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002c26:	f7ff f8ab 	bl	8001d80 <HAL_GetTick>
 8002c2a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002c2c:	68b3      	ldr	r3, [r6, #8]
 8002c2e:	03d9      	lsls	r1, r3, #15
 8002c30:	d419      	bmi.n	8002c66 <HAL_RCC_ClockConfig+0x72>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c32:	f7ff f8a5 	bl	8001d80 <HAL_GetTick>
 8002c36:	1bc0      	subs	r0, r0, r7
 8002c38:	2802      	cmp	r0, #2
 8002c3a:	d9f7      	bls.n	8002c2c <HAL_RCC_ClockConfig+0x38>
 8002c3c:	e011      	b.n	8002c62 <HAL_RCC_ClockConfig+0x6e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	6833      	ldr	r3, [r6, #0]
 8002c40:	f023 0307 	bic.w	r3, r3, #7
 8002c44:	430b      	orrs	r3, r1
 8002c46:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002c48:	f7ff f89a 	bl	8001d80 <HAL_GetTick>
 8002c4c:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	6833      	ldr	r3, [r6, #0]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	42ab      	cmp	r3, r5
 8002c56:	d0db      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c58:	f7ff f892 	bl	8001d80 <HAL_GetTick>
 8002c5c:	1bc0      	subs	r0, r0, r7
 8002c5e:	2802      	cmp	r0, #2
 8002c60:	d9f5      	bls.n	8002c4e <HAL_RCC_ClockConfig+0x5a>
        return HAL_TIMEOUT;
 8002c62:	2003      	movs	r0, #3
 8002c64:	e7cc      	b.n	8002c00 <HAL_RCC_ClockConfig+0xc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	069a      	lsls	r2, r3, #26
 8002c6a:	d516      	bpl.n	8002c9a <HAL_RCC_ClockConfig+0xa6>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002c6c:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002c70:	6962      	ldr	r2, [r4, #20]
 8002c72:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8002c76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8002c80:	f7ff f87e 	bl	8001d80 <HAL_GetTick>
 8002c84:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002c86:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8002c8a:	039b      	lsls	r3, r3, #14
 8002c8c:	d405      	bmi.n	8002c9a <HAL_RCC_ClockConfig+0xa6>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c8e:	f7ff f877 	bl	8001d80 <HAL_GetTick>
 8002c92:	1bc0      	subs	r0, r0, r7
 8002c94:	2802      	cmp	r0, #2
 8002c96:	d9f6      	bls.n	8002c86 <HAL_RCC_ClockConfig+0x92>
 8002c98:	e7e3      	b.n	8002c62 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002c9a:	6823      	ldr	r3, [r4, #0]
 8002c9c:	0658      	lsls	r0, r3, #25
 8002c9e:	d517      	bpl.n	8002cd0 <HAL_RCC_ClockConfig+0xdc>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002ca0:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002ca4:	69a2      	ldr	r2, [r4, #24]
 8002ca6:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8002caa:	f023 030f 	bic.w	r3, r3, #15
 8002cae:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8002cb2:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8002cb6:	f7ff f863 	bl	8001d80 <HAL_GetTick>
 8002cba:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002cbc:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8002cc0:	03d9      	lsls	r1, r3, #15
 8002cc2:	d405      	bmi.n	8002cd0 <HAL_RCC_ClockConfig+0xdc>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002cc4:	f7ff f85c 	bl	8001d80 <HAL_GetTick>
 8002cc8:	1bc0      	subs	r0, r0, r7
 8002cca:	2802      	cmp	r0, #2
 8002ccc:	d9f6      	bls.n	8002cbc <HAL_RCC_ClockConfig+0xc8>
 8002cce:	e7c8      	b.n	8002c62 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	075a      	lsls	r2, r3, #29
 8002cd4:	d513      	bpl.n	8002cfe <HAL_RCC_ClockConfig+0x10a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002cd6:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002cda:	68e2      	ldr	r2, [r4, #12]
 8002cdc:	68b3      	ldr	r3, [r6, #8]
 8002cde:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002ce6:	f7ff f84b 	bl	8001d80 <HAL_GetTick>
 8002cea:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002cec:	68b3      	ldr	r3, [r6, #8]
 8002cee:	039b      	lsls	r3, r3, #14
 8002cf0:	d405      	bmi.n	8002cfe <HAL_RCC_ClockConfig+0x10a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002cf2:	f7ff f845 	bl	8001d80 <HAL_GetTick>
 8002cf6:	1bc0      	subs	r0, r0, r7
 8002cf8:	2802      	cmp	r0, #2
 8002cfa:	d9f7      	bls.n	8002cec <HAL_RCC_ClockConfig+0xf8>
 8002cfc:	e7b1      	b.n	8002c62 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfe:	6823      	ldr	r3, [r4, #0]
 8002d00:	0718      	lsls	r0, r3, #28
 8002d02:	d514      	bpl.n	8002d2e <HAL_RCC_ClockConfig+0x13a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002d04:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002d08:	6922      	ldr	r2, [r4, #16]
 8002d0a:	68b3      	ldr	r3, [r6, #8]
 8002d0c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002d10:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002d14:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002d16:	f7ff f833 	bl	8001d80 <HAL_GetTick>
 8002d1a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002d1c:	68b3      	ldr	r3, [r6, #8]
 8002d1e:	0359      	lsls	r1, r3, #13
 8002d20:	d405      	bmi.n	8002d2e <HAL_RCC_ClockConfig+0x13a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d22:	f7ff f82d 	bl	8001d80 <HAL_GetTick>
 8002d26:	1bc0      	subs	r0, r0, r7
 8002d28:	2802      	cmp	r0, #2
 8002d2a:	d9f7      	bls.n	8002d1c <HAL_RCC_ClockConfig+0x128>
 8002d2c:	e799      	b.n	8002c62 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	07da      	lsls	r2, r3, #31
 8002d32:	d40d      	bmi.n	8002d50 <HAL_RCC_ClockConfig+0x15c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d34:	4c28      	ldr	r4, [pc, #160]	; (8002dd8 <HAL_RCC_ClockConfig+0x1e4>)
 8002d36:	6823      	ldr	r3, [r4, #0]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	42ab      	cmp	r3, r5
 8002d3e:	d837      	bhi.n	8002db0 <HAL_RCC_ClockConfig+0x1bc>
  SystemCoreClockUpdate();
 8002d40:	f7fe ff8c 	bl	8001c5c <SystemCoreClockUpdate>
  return HAL_InitTick(HAL_GetTickPrio());
 8002d44:	f7ff f822 	bl	8001d8c <HAL_GetTickPrio>
}
 8002d48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(HAL_GetTickPrio());
 8002d4c:	f7fe bfd4 	b.w	8001cf8 <HAL_InitTick>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d50:	6863      	ldr	r3, [r4, #4]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d103      	bne.n	8002d5e <HAL_RCC_ClockConfig+0x16a>
      if (LL_RCC_HSE_IsReady() == 0U)
 8002d56:	f7ff fbd9 	bl	800250c <LL_RCC_HSE_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
 8002d5a:	b940      	cbnz	r0, 8002d6e <HAL_RCC_ClockConfig+0x17a>
 8002d5c:	e74f      	b.n	8002bfe <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d11f      	bne.n	8002da2 <HAL_RCC_ClockConfig+0x1ae>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	019b      	lsls	r3, r3, #6
 8002d6a:	f57f af48 	bpl.w	8002bfe <HAL_RCC_ClockConfig+0xa>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002d6e:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002d72:	6862      	ldr	r2, [r4, #4]
 8002d74:	68b3      	ldr	r3, [r6, #8]
 8002d76:	f023 0303 	bic.w	r3, r3, #3
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002d7e:	f7fe ffff 	bl	8001d80 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d82:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002d86:	4607      	mov	r7, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d88:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8a:	6862      	ldr	r2, [r4, #4]
 8002d8c:	f003 030c 	and.w	r3, r3, #12
 8002d90:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002d94:	d0ce      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d96:	f7fe fff3 	bl	8001d80 <HAL_GetTick>
 8002d9a:	1bc0      	subs	r0, r0, r7
 8002d9c:	4540      	cmp	r0, r8
 8002d9e:	d9f3      	bls.n	8002d88 <HAL_RCC_ClockConfig+0x194>
 8002da0:	e75f      	b.n	8002c62 <HAL_RCC_ClockConfig+0x6e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002da2:	b913      	cbnz	r3, 8002daa <HAL_RCC_ClockConfig+0x1b6>
      if (LL_RCC_MSI_IsReady() == 0U)
 8002da4:	f7ff fbc5 	bl	8002532 <LL_RCC_MSI_IsReady>
 8002da8:	e7d7      	b.n	8002d5a <HAL_RCC_ClockConfig+0x166>
      if (LL_RCC_HSI_IsReady() == 0U)
 8002daa:	f7ff fbb5 	bl	8002518 <LL_RCC_HSI_IsReady>
 8002dae:	e7d4      	b.n	8002d5a <HAL_RCC_ClockConfig+0x166>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	f023 0307 	bic.w	r3, r3, #7
 8002db6:	432b      	orrs	r3, r5
 8002db8:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002dba:	f7fe ffe1 	bl	8001d80 <HAL_GetTick>
 8002dbe:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc0:	6823      	ldr	r3, [r4, #0]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	42ab      	cmp	r3, r5
 8002dc8:	d0ba      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x14c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002dca:	f7fe ffd9 	bl	8001d80 <HAL_GetTick>
 8002dce:	1b80      	subs	r0, r0, r6
 8002dd0:	2802      	cmp	r0, #2
 8002dd2:	d9f5      	bls.n	8002dc0 <HAL_RCC_ClockConfig+0x1cc>
 8002dd4:	e745      	b.n	8002c62 <HAL_RCC_ClockConfig+0x6e>
 8002dd6:	bf00      	nop
 8002dd8:	58004000 	.word	0x58004000

08002ddc <HAL_RCC_GetSysClockFreq>:
 8002ddc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 8002de0:	b508      	push	{r3, lr}
 8002de2:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002de4:	f013 030c 	ands.w	r3, r3, #12
 8002de8:	d107      	bne.n	8002dfa <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002dea:	f7ff fbb0 	bl	800254e <LL_RCC_MSI_GetRange>
 8002dee:	4b1f      	ldr	r3, [pc, #124]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x90>)
 8002df0:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8002df4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 8002df8:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d033      	beq.n	8002e66 <HAL_RCC_GetSysClockFreq+0x8a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d107      	bne.n	8002e12 <HAL_RCC_GetSysClockFreq+0x36>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002e02:	6813      	ldr	r3, [r2, #0]
      sysclockfreq = HSE_VALUE;
 8002e04:	481a      	ldr	r0, [pc, #104]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e06:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002e0a:	4b1a      	ldr	r3, [pc, #104]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e0c:	bf08      	it	eq
 8002e0e:	4618      	moveq	r0, r3
 8002e10:	e7f2      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x1c>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002e12:	68d3      	ldr	r3, [r2, #12]
 8002e14:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d022      	beq.n	8002e62 <HAL_RCC_GetSysClockFreq+0x86>
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d118      	bne.n	8002e52 <HAL_RCC_GetSysClockFreq+0x76>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002e20:	6813      	ldr	r3, [r2, #0]
          pllinputfreq = HSE_VALUE / 2U;
 8002e22:	4813      	ldr	r0, [pc, #76]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e24:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002e28:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e2a:	bf18      	it	ne
 8002e2c:	4603      	movne	r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002e2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e32:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002e34:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002e36:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002e38:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002e3c:	4358      	muls	r0, r3
 8002e3e:	f3c1 1302 	ubfx	r3, r1, #4, #3
 8002e42:	3301      	adds	r3, #1
 8002e44:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e48:	0f53      	lsrs	r3, r2, #29
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e50:	e7d2      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x1c>
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002e52:	f7ff fb7c 	bl	800254e <LL_RCC_MSI_GetRange>
 8002e56:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x90>)
 8002e58:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8002e5c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002e60:	e7e5      	b.n	8002e2e <HAL_RCC_GetSysClockFreq+0x52>
        pllinputfreq = HSI_VALUE;
 8002e62:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e64:	e7e3      	b.n	8002e2e <HAL_RCC_GetSysClockFreq+0x52>
    sysclockfreq = HSI_VALUE;
 8002e66:	4802      	ldr	r0, [pc, #8]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e68:	e7c6      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x1c>
 8002e6a:	bf00      	nop
 8002e6c:	08005f3c 	.word	0x08005f3c
 8002e70:	00f42400 	.word	0x00f42400
 8002e74:	01e84800 	.word	0x01e84800

08002e78 <HAL_RCC_GetHCLKFreq>:
{
 8002e78:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002e7a:	f7ff ffaf 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e82:	4a04      	ldr	r2, [pc, #16]	; (8002e94 <HAL_RCC_GetHCLKFreq+0x1c>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002e8e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e92:	bd08      	pop	{r3, pc}
 8002e94:	08005f7c 	.word	0x08005f7c

08002e98 <HAL_RCC_GetPCLK1Freq>:
{
 8002e98:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002e9a:	f7ff ffed 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea2:	4a05      	ldr	r2, [pc, #20]	; (8002eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eae:	f003 031f 	and.w	r3, r3, #31
}
 8002eb2:	40d8      	lsrs	r0, r3
 8002eb4:	bd08      	pop	{r3, pc}
 8002eb6:	bf00      	nop
 8002eb8:	0800601c 	.word	0x0800601c

08002ebc <HAL_RCC_GetPCLK2Freq>:
{
 8002ebc:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002ebe:	f7ff ffdb 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec6:	4a05      	ldr	r2, [pc, #20]	; (8002edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed2:	f003 031f 	and.w	r3, r3, #31
}
 8002ed6:	40d8      	lsrs	r0, r3
 8002ed8:	bd08      	pop	{r3, pc}
 8002eda:	bf00      	nop
 8002edc:	0800601c 	.word	0x0800601c

08002ee0 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee4:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 8002ee8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002eec:	4770      	bx	lr

08002eee <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002eee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ef2:	0902      	lsrs	r2, r0, #4
 8002ef4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002ef8:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 8002efc:	0100      	lsls	r0, r0, #4
 8002efe:	ea23 0302 	bic.w	r3, r3, r2
 8002f02:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 8002f06:	4318      	orrs	r0, r3
 8002f08:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
}
 8002f0c:	4770      	bx	lr

08002f0e <LL_RCC_PLLSAI1_Enable>:
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f12:	6813      	ldr	r3, [r2, #0]
 8002f14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f18:	6013      	str	r3, [r2, #0]
}
 8002f1a:	4770      	bx	lr

08002f1c <LL_RCC_PLLSAI1_Disable>:
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002f1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f20:	6813      	ldr	r3, [r2, #0]
 8002f22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f26:	6013      	str	r3, [r2, #0]
}
 8002f28:	4770      	bx	lr

08002f2a <LL_RCC_PLLSAI1_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2e:	6818      	ldr	r0, [r3, #0]
}
 8002f30:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 8002f34:	4770      	bx	lr

08002f36 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f38:	6805      	ldr	r5, [r0, #0]
 8002f3a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
{
 8002f3e:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f40:	d043      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002f42:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002f44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f48:	d015      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002f4a:	d802      	bhi.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002f4c:	b1d3      	cbz	r3, 8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002f4e:	2501      	movs	r5, #1
 8002f50:	e03b      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 8002f52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f56:	d002      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002f58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f5c:	d1f7      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x18>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002f5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f62:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002f64:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002f68:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002f6c:	430b      	orrs	r3, r1
 8002f6e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002f72:	2500      	movs	r5, #0
 8002f74:	e029      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x94>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002f76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f7a:	68d3      	ldr	r3, [r2, #12]
 8002f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f80:	60d3      	str	r3, [r2, #12]
 8002f82:	e7ec      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x28>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002f84:	f7ff ffca 	bl	8002f1c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002f88:	f7fe fefa 	bl	8001d80 <HAL_GetTick>
 8002f8c:	4605      	mov	r5, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f8e:	f7ff ffcc 	bl	8002f2a <LL_RCC_PLLSAI1_IsReady>
 8002f92:	b9a0      	cbnz	r0, 8002fbe <HAL_RCCEx_PeriphCLKConfig+0x88>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002f94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f98:	6861      	ldr	r1, [r4, #4]
 8002f9a:	6913      	ldr	r3, [r2, #16]
 8002f9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fa0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002fa4:	6113      	str	r3, [r2, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002fa6:	6913      	ldr	r3, [r2, #16]
 8002fa8:	68a1      	ldr	r1, [r4, #8]
 8002faa:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 8002fae:	430b      	orrs	r3, r1
 8002fb0:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002fb2:	f7ff ffac 	bl	8002f0e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb6:	f7fe fee3 	bl	8001d80 <HAL_GetTick>
 8002fba:	4605      	mov	r5, r0
 8002fbc:	e0cd      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x224>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fbe:	f7fe fedf 	bl	8001d80 <HAL_GetTick>
 8002fc2:	1b40      	subs	r0, r0, r5
 8002fc4:	2802      	cmp	r0, #2
 8002fc6:	d9e2      	bls.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002fc8:	2503      	movs	r5, #3
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fca:	6823      	ldr	r3, [r4, #0]
 8002fcc:	051a      	lsls	r2, r3, #20
 8002fce:	d515      	bpl.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xc6>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002fd0:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002fd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fd6:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 8002fda:	f407 7740 	and.w	r7, r7, #768	; 0x300
 8002fde:	42bb      	cmp	r3, r7
 8002fe0:	d00c      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xc6>
      HAL_PWR_EnableBkUpAccess();
 8002fe2:	f7ff fa83 	bl	80024ec <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002fe6:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002fea:	2f00      	cmp	r7, #0
 8002fec:	f040 80c0 	bne.w	8003170 <HAL_RCCEx_PeriphCLKConfig+0x23a>
 8002ff0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	07df      	lsls	r7, r3, #31
 8003000:	d509      	bpl.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003002:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003006:	69a0      	ldr	r0, [r4, #24]
 8003008:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800300c:	f022 0203 	bic.w	r2, r2, #3
 8003010:	4302      	orrs	r2, r0
 8003012:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003016:	079e      	lsls	r6, r3, #30
 8003018:	d509      	bpl.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xf8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800301a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800301e:	69e0      	ldr	r0, [r4, #28]
 8003020:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003024:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003028:	4302      	orrs	r2, r0
 800302a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800302e:	06d8      	lsls	r0, r3, #27
 8003030:	d50c      	bpl.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003032:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003034:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8003038:	0c31      	lsrs	r1, r6, #16
 800303a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800303e:	0409      	lsls	r1, r1, #16
 8003040:	ea22 0201 	bic.w	r2, r2, r1
 8003044:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8003048:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800304c:	0699      	lsls	r1, r3, #26
 800304e:	d50c      	bpl.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x134>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003050:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003052:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8003056:	0c31      	lsrs	r1, r6, #16
 8003058:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800305c:	0409      	lsls	r1, r1, #16
 800305e:	ea22 0201 	bic.w	r2, r2, r1
 8003062:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8003066:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800306a:	075a      	lsls	r2, r3, #29
 800306c:	d502      	bpl.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800306e:	6a20      	ldr	r0, [r4, #32]
 8003070:	f7ff ff3d 	bl	8002eee <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003074:	6823      	ldr	r3, [r4, #0]
 8003076:	071b      	lsls	r3, r3, #28
 8003078:	d502      	bpl.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x14a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800307a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800307c:	f7ff ff37 	bl	8002eee <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	05df      	lsls	r7, r3, #23
 8003084:	d511      	bpl.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x174>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003086:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800308a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800308c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003090:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003094:	430b      	orrs	r3, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003096:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 800309a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800309e:	f040 808f 	bne.w	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80030a2:	68d3      	ldr	r3, [r2, #12]
 80030a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030a8:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030aa:	6823      	ldr	r3, [r4, #0]
 80030ac:	059e      	lsls	r6, r3, #22
 80030ae:	d51a      	bpl.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80030b2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80030b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ba:	d003      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80030bc:	f032 4180 	bics.w	r1, r2, #1073741824	; 0x40000000
 80030c0:	f040 80b6 	bne.w	8003230 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80030c4:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80030c8:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 80030cc:	4311      	orrs	r1, r2
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030ce:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80030d2:	bf08      	it	eq
 80030d4:	f04f 42b0 	moveq.w	r2, #1476395008	; 0x58000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80030d8:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
 80030dc:	bf02      	ittt	eq
 80030de:	68d3      	ldreq	r3, [r2, #12]
 80030e0:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
 80030e4:	60d3      	streq	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030e6:	6823      	ldr	r3, [r4, #0]
 80030e8:	0558      	lsls	r0, r3, #21
 80030ea:	d511      	bpl.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80030ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80030f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80030f6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80030fa:	430b      	orrs	r3, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80030fc:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8003100:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003104:	f040 80a2 	bne.w	800324c <HAL_RCCEx_PeriphCLKConfig+0x316>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003108:	68d3      	ldr	r3, [r2, #12]
 800310a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310e:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003110:	6822      	ldr	r2, [r4, #0]
 8003112:	04d1      	lsls	r1, r2, #19
 8003114:	d509      	bpl.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003116:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800311a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800311c:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 8003120:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003124:	4303      	orrs	r3, r0
 8003126:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800312a:	0493      	lsls	r3, r2, #18
 800312c:	d50d      	bpl.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x214>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800312e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003132:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003134:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003136:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800313a:	430b      	orrs	r3, r1
 800313c:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800313e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003140:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003142:	f023 0303 	bic.w	r3, r3, #3
 8003146:	430b      	orrs	r3, r1
 8003148:	6253      	str	r3, [r2, #36]	; 0x24
}
 800314a:	4628      	mov	r0, r5
 800314c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800314e:	f7fe fe17 	bl	8001d80 <HAL_GetTick>
 8003152:	1b40      	subs	r0, r0, r5
 8003154:	2802      	cmp	r0, #2
 8003156:	f63f af37 	bhi.w	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x92>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800315a:	f7ff fee6 	bl	8002f2a <LL_RCC_PLLSAI1_IsReady>
 800315e:	2801      	cmp	r0, #1
 8003160:	d1f5      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x218>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003162:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003166:	6961      	ldr	r1, [r4, #20]
 8003168:	6913      	ldr	r3, [r2, #16]
 800316a:	430b      	orrs	r3, r1
 800316c:	6113      	str	r3, [r2, #16]
 800316e:	e6f6      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x28>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003170:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8003174:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003178:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800317c:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8003180:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003184:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003188:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800318a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800318e:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 8003190:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003194:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8003198:	07db      	lsls	r3, r3, #31
 800319a:	f57f af2f 	bpl.w	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xc6>
          tickstart = HAL_GetTick();
 800319e:	f7fe fdef 	bl	8001d80 <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a2:	f241 3788 	movw	r7, #5000	; 0x1388
          tickstart = HAL_GetTick();
 80031a6:	4606      	mov	r6, r0
          while (LL_RCC_LSE_IsReady() != 1U)
 80031a8:	f7ff fe9a 	bl	8002ee0 <LL_RCC_LSE_IsReady>
 80031ac:	2801      	cmp	r0, #1
 80031ae:	f43f af25 	beq.w	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xc6>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b2:	f7fe fde5 	bl	8001d80 <HAL_GetTick>
 80031b6:	1b80      	subs	r0, r0, r6
 80031b8:	42b8      	cmp	r0, r7
 80031ba:	d9f5      	bls.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x272>
              ret = HAL_TIMEOUT;
 80031bc:	2503      	movs	r5, #3
 80031be:	e71d      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xc6>
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031c0:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80031c4:	f47f af71 	bne.w	80030aa <HAL_RCCEx_PeriphCLKConfig+0x174>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80031c8:	f7ff fea8 	bl	8002f1c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80031cc:	f7fe fdd8 	bl	8001d80 <HAL_GetTick>
 80031d0:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031d2:	f7ff feaa 	bl	8002f2a <LL_RCC_PLLSAI1_IsReady>
 80031d6:	b9a0      	cbnz	r0, 8003202 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80031d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031dc:	6861      	ldr	r1, [r4, #4]
 80031de:	6913      	ldr	r3, [r2, #16]
 80031e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80031e8:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80031ea:	6913      	ldr	r3, [r2, #16]
 80031ec:	68e1      	ldr	r1, [r4, #12]
 80031ee:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80031f2:	430b      	orrs	r3, r1
 80031f4:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80031f6:	f7ff fe8a 	bl	8002f0e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031fa:	f7fe fdc1 	bl	8001d80 <HAL_GetTick>
 80031fe:	4606      	mov	r6, r0
 8003200:	e00b      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003202:	f7fe fdbd 	bl	8001d80 <HAL_GetTick>
 8003206:	1b80      	subs	r0, r0, r6
 8003208:	2802      	cmp	r0, #2
 800320a:	d9e2      	bls.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x29c>
              ret = HAL_TIMEOUT;
 800320c:	2503      	movs	r5, #3
 800320e:	e74c      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x174>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003210:	f7fe fdb6 	bl	8001d80 <HAL_GetTick>
 8003214:	1b80      	subs	r0, r0, r6
 8003216:	2802      	cmp	r0, #2
 8003218:	d8f8      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800321a:	f7ff fe86 	bl	8002f2a <LL_RCC_PLLSAI1_IsReady>
 800321e:	2801      	cmp	r0, #1
 8003220:	d1f6      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003222:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003226:	6961      	ldr	r1, [r4, #20]
 8003228:	6913      	ldr	r3, [r2, #16]
 800322a:	430b      	orrs	r3, r1
 800322c:	6113      	str	r3, [r2, #16]
 800322e:	e73c      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x174>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003230:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003234:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8003238:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800323c:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003240:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8003244:	f020 6040 	bic.w	r0, r0, #201326592	; 0xc000000
 8003248:	4301      	orrs	r1, r0
 800324a:	e740      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x198>
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800324c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8003250:	f47f af5e 	bne.w	8003110 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003254:	f7ff fe62 	bl	8002f1c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003258:	f7fe fd92 	bl	8001d80 <HAL_GetTick>
 800325c:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800325e:	f7ff fe64 	bl	8002f2a <LL_RCC_PLLSAI1_IsReady>
 8003262:	b9a0      	cbnz	r0, 800328e <HAL_RCCEx_PeriphCLKConfig+0x358>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003264:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003268:	6861      	ldr	r1, [r4, #4]
 800326a:	6913      	ldr	r3, [r2, #16]
 800326c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003270:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003274:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003276:	6913      	ldr	r3, [r2, #16]
 8003278:	6921      	ldr	r1, [r4, #16]
 800327a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800327e:	430b      	orrs	r3, r1
 8003280:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003282:	f7ff fe44 	bl	8002f0e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003286:	f7fe fd7b 	bl	8001d80 <HAL_GetTick>
 800328a:	4606      	mov	r6, r0
 800328c:	e00b      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x370>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800328e:	f7fe fd77 	bl	8001d80 <HAL_GetTick>
 8003292:	1b80      	subs	r0, r0, r6
 8003294:	2802      	cmp	r0, #2
 8003296:	d9e2      	bls.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x328>
              ret = HAL_TIMEOUT;
 8003298:	2503      	movs	r5, #3
 800329a:	e739      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x1da>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800329c:	f7fe fd70 	bl	8001d80 <HAL_GetTick>
 80032a0:	1b80      	subs	r0, r0, r6
 80032a2:	2802      	cmp	r0, #2
 80032a4:	d8f8      	bhi.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x362>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032a6:	f7ff fe40 	bl	8002f2a <LL_RCC_PLLSAI1_IsReady>
 80032aa:	2801      	cmp	r0, #1
 80032ac:	d1f6      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x366>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80032ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032b2:	6961      	ldr	r1, [r4, #20]
 80032b4:	6913      	ldr	r3, [r2, #16]
 80032b6:	430b      	orrs	r3, r1
 80032b8:	6113      	str	r3, [r2, #16]
 80032ba:	e729      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x1da>

080032bc <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80032bc:	6802      	ldr	r2, [r0, #0]
{
 80032be:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80032c0:	68d3      	ldr	r3, [r2, #12]
 80032c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032c6:	60d3      	str	r3, [r2, #12]
{
 80032c8:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 80032ca:	f7fe fd59 	bl	8001d80 <HAL_GetTick>
 80032ce:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80032d0:	6823      	ldr	r3, [r4, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	069b      	lsls	r3, r3, #26
 80032d6:	d501      	bpl.n	80032dc <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80032d8:	2000      	movs	r0, #0
}
 80032da:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80032dc:	f7fe fd50 	bl	8001d80 <HAL_GetTick>
 80032e0:	1b40      	subs	r0, r0, r5
 80032e2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80032e6:	d9f3      	bls.n	80032d0 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 80032e8:	2003      	movs	r0, #3
 80032ea:	e7f6      	b.n	80032da <HAL_RTC_WaitForSynchro+0x1e>

080032ec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80032ec:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80032ee:	6803      	ldr	r3, [r0, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	0652      	lsls	r2, r2, #25
{
 80032f4:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80032f6:	d501      	bpl.n	80032fc <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80032f8:	2000      	movs	r0, #0
}
 80032fa:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80032fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003300:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8003302:	f7fe fd3d 	bl	8001d80 <HAL_GetTick>
 8003306:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003308:	6823      	ldr	r3, [r4, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	065b      	lsls	r3, r3, #25
 800330e:	d4f3      	bmi.n	80032f8 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003310:	f7fe fd36 	bl	8001d80 <HAL_GetTick>
 8003314:	1b40      	subs	r0, r0, r5
 8003316:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800331a:	d9f5      	bls.n	8003308 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 800331c:	2003      	movs	r0, #3
 800331e:	e7ec      	b.n	80032fa <RTC_EnterInitMode+0xe>

08003320 <HAL_RTC_Init>:
{
 8003320:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8003322:	4604      	mov	r4, r0
 8003324:	b1d8      	cbz	r0, 800335e <HAL_RTC_Init+0x3e>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003326:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800332a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800332e:	b91b      	cbnz	r3, 8003338 <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 8003330:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 8003334:	f7fd ffe6 	bl	8001304 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003338:	2302      	movs	r3, #2
 800333a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800333e:	6823      	ldr	r3, [r4, #0]
 8003340:	22ca      	movs	r2, #202	; 0xca
 8003342:	625a      	str	r2, [r3, #36]	; 0x24
 8003344:	2253      	movs	r2, #83	; 0x53
 8003346:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003348:	4620      	mov	r0, r4
 800334a:	f7ff ffcf 	bl	80032ec <RTC_EnterInitMode>
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	4605      	mov	r5, r0
 8003352:	b130      	cbz	r0, 8003362 <HAL_RTC_Init+0x42>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003354:	22ff      	movs	r2, #255	; 0xff
 8003356:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003358:	2304      	movs	r3, #4
 800335a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
     return HAL_ERROR;
 800335e:	2501      	movs	r5, #1
 8003360:	e038      	b.n	80033d4 <HAL_RTC_Init+0xb4>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003362:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003364:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003366:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800336a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800336e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003370:	6862      	ldr	r2, [r4, #4]
 8003372:	6899      	ldr	r1, [r3, #8]
 8003374:	4302      	orrs	r2, r0
 8003376:	69a0      	ldr	r0, [r4, #24]
 8003378:	4302      	orrs	r2, r0
 800337a:	430a      	orrs	r2, r1
 800337c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800337e:	68e2      	ldr	r2, [r4, #12]
 8003380:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003386:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003388:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800338c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003394:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003396:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003398:	f022 0203 	bic.w	r2, r2, #3
 800339c:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800339e:	69e2      	ldr	r2, [r4, #28]
 80033a0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80033a2:	4302      	orrs	r2, r0
 80033a4:	430a      	orrs	r2, r1
 80033a6:	64da      	str	r2, [r3, #76]	; 0x4c
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	069b      	lsls	r3, r3, #26
 80033ac:	d40c      	bmi.n	80033c8 <HAL_RTC_Init+0xa8>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033ae:	4620      	mov	r0, r4
 80033b0:	f7ff ff84 	bl	80032bc <HAL_RTC_WaitForSynchro>
 80033b4:	b140      	cbz	r0, 80033c8 <HAL_RTC_Init+0xa8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	22ff      	movs	r2, #255	; 0xff
 80033ba:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80033bc:	2304      	movs	r3, #4
 80033be:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 80033c2:	f884 5020 	strb.w	r5, [r4, #32]
 80033c6:	e7ca      	b.n	800335e <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	22ff      	movs	r2, #255	; 0xff
 80033cc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80033ce:	2301      	movs	r3, #1
 80033d0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 80033d4:	4628      	mov	r0, r5
 80033d6:	bd38      	pop	{r3, r4, r5, pc}

080033d8 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033d8:	f890 3020 	ldrb.w	r3, [r0, #32]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	f04f 0302 	mov.w	r3, #2
 80033e2:	d012      	beq.n	800340a <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033e4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033e8:	6803      	ldr	r3, [r0, #0]
 80033ea:	22ca      	movs	r2, #202	; 0xca
 80033ec:	625a      	str	r2, [r3, #36]	; 0x24
 80033ee:	2253      	movs	r2, #83	; 0x53
 80033f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	f042 0220 	orr.w	r2, r2, #32
 80033f8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033fa:	22ff      	movs	r2, #255	; 0xff
 80033fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80033fe:	2301      	movs	r3, #1
 8003400:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003404:	2300      	movs	r3, #0
 8003406:	f880 3020 	strb.w	r3, [r0, #32]
  __HAL_LOCK(hrtc);
 800340a:	4618      	mov	r0, r3

  return HAL_OK;
}
 800340c:	4770      	bx	lr

0800340e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800340e:	6802      	ldr	r2, [r0, #0]
 8003410:	6813      	ldr	r3, [r2, #0]
 8003412:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003416:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003418:	6893      	ldr	r3, [r2, #8]
 800341a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341e:	f023 0301 	bic.w	r3, r3, #1
 8003422:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003424:	2320      	movs	r3, #32
 8003426:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800342a:	2300      	movs	r3, #0
 800342c:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 800342e:	4770      	bx	lr

08003430 <HAL_UART_Transmit_DMA>:
{
 8003430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003432:	4604      	mov	r4, r0
 8003434:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003436:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800343a:	2f20      	cmp	r7, #32
 800343c:	d13a      	bne.n	80034b4 <HAL_UART_Transmit_DMA+0x84>
    if ((pData == NULL) || (Size == 0U))
 800343e:	b361      	cbz	r1, 800349a <HAL_UART_Transmit_DMA+0x6a>
 8003440:	b35a      	cbz	r2, 800349a <HAL_UART_Transmit_DMA+0x6a>
    __HAL_LOCK(huart);
 8003442:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 8003446:	2a01      	cmp	r2, #1
 8003448:	d034      	beq.n	80034b4 <HAL_UART_Transmit_DMA+0x84>
    if (huart->hdmatx != NULL)
 800344a:	6f60      	ldr	r0, [r4, #116]	; 0x74
    huart->TxXferCount = Size;
 800344c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    __HAL_LOCK(huart);
 8003450:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003452:	2600      	movs	r6, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003454:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003456:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    __HAL_LOCK(huart);
 800345a:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    huart->pTxBuffPtr  = pData;
 800345e:	6521      	str	r1, [r4, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003460:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003464:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (huart->hdmatx != NULL)
 8003468:	b1c8      	cbz	r0, 800349e <HAL_UART_Transmit_DMA+0x6e>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800346a:	f8df c04c 	ldr.w	ip, [pc, #76]	; 80034b8 <HAL_UART_Transmit_DMA+0x88>
 800346e:	6822      	ldr	r2, [r4, #0]
 8003470:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003474:	f8df c044 	ldr.w	ip, [pc, #68]	; 80034bc <HAL_UART_Transmit_DMA+0x8c>
 8003478:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800347c:	f8df c040 	ldr.w	ip, [pc, #64]	; 80034c0 <HAL_UART_Transmit_DMA+0x90>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003480:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 8003482:	e9c0 c60d 	strd	ip, r6, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003486:	f7fe fded 	bl	8002064 <HAL_DMA_Start_IT>
 800348a:	b140      	cbz	r0, 800349e <HAL_UART_Transmit_DMA+0x6e>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800348c:	2310      	movs	r3, #16
 800348e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8003492:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8003496:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
      return HAL_ERROR;
 800349a:	2001      	movs	r0, #1
 800349c:	e009      	b.n	80034b2 <HAL_UART_Transmit_DMA+0x82>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	2240      	movs	r2, #64	; 0x40
 80034a2:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034a4:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 80034a6:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    __HAL_UNLOCK(huart);
 80034ac:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034b0:	609a      	str	r2, [r3, #8]
}
 80034b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80034b4:	2002      	movs	r0, #2
 80034b6:	e7fc      	b.n	80034b2 <HAL_UART_Transmit_DMA+0x82>
 80034b8:	080034c5 	.word	0x080034c5
 80034bc:	080034f5 	.word	0x080034f5
 80034c0:	08003501 	.word	0x08003501

080034c4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80034c4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80034c6:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80034c8:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f013 0320 	ands.w	r3, r3, #32
 80034d0:	d10b      	bne.n	80034ea <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 80034d2:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034d6:	6813      	ldr	r3, [r2, #0]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034de:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034e6:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034e8:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80034ea:	4610      	mov	r0, r2
 80034ec:	f7fd fc5e 	bl	8000dac <HAL_UART_TxCpltCallback>
}
 80034f0:	e7fa      	b.n	80034e8 <UART_DMATransmitCplt+0x24>

080034f2 <HAL_UART_TxHalfCpltCallback>:
 80034f2:	4770      	bx	lr

080034f4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80034f4:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80034f6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80034f8:	f7ff fffb 	bl	80034f2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034fc:	bd08      	pop	{r3, pc}

080034fe <HAL_UART_ErrorCallback>:
 80034fe:	4770      	bx	lr

08003500 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003500:	6a81      	ldr	r1, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003502:	680b      	ldr	r3, [r1, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003504:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003508:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
{
 800350c:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800350e:	689c      	ldr	r4, [r3, #8]
 8003510:	0624      	lsls	r4, r4, #24
 8003512:	d50f      	bpl.n	8003534 <UART_DMAError+0x34>
 8003514:	2a21      	cmp	r2, #33	; 0x21
 8003516:	d10d      	bne.n	8003534 <UART_DMAError+0x34>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003518:	2200      	movs	r2, #0
 800351a:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003524:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800352c:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 800352e:	2220      	movs	r2, #32
 8003530:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	065b      	lsls	r3, r3, #25
 8003538:	d507      	bpl.n	800354a <UART_DMAError+0x4a>
 800353a:	2822      	cmp	r0, #34	; 0x22
 800353c:	d105      	bne.n	800354a <UART_DMAError+0x4a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	f8a1 305e 	strh.w	r3, [r1, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8003544:	4608      	mov	r0, r1
 8003546:	f7ff ff62 	bl	800340e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800354a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800354e:	f043 0310 	orr.w	r3, r3, #16
 8003552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003556:	4608      	mov	r0, r1
 8003558:	f7ff ffd1 	bl	80034fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800355c:	bd10      	pop	{r4, pc}
	...

08003560 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003560:	6802      	ldr	r2, [r0, #0]
 8003562:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003564:	6811      	ldr	r1, [r2, #0]
{
 8003566:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 8003568:	f640 050f 	movw	r5, #2063	; 0x80f
 800356c:	422b      	tst	r3, r5
{
 800356e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003570:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 8003572:	d10b      	bne.n	800358c <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003574:	069e      	lsls	r6, r3, #26
 8003576:	f140 8083 	bpl.w	8003680 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800357a:	068d      	lsls	r5, r1, #26
 800357c:	d401      	bmi.n	8003582 <HAL_UART_IRQHandler+0x22>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800357e:	00c6      	lsls	r6, r0, #3
 8003580:	d57e      	bpl.n	8003680 <HAL_UART_IRQHandler+0x120>
      if (huart->RxISR != NULL)
 8003582:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    if (huart->TxISR != NULL)
 8003584:	2b00      	cmp	r3, #0
 8003586:	d075      	beq.n	8003674 <HAL_UART_IRQHandler+0x114>
      huart->TxISR(huart);
 8003588:	4620      	mov	r0, r4
 800358a:	e06d      	b.n	8003668 <HAL_UART_IRQHandler+0x108>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800358c:	4e58      	ldr	r6, [pc, #352]	; (80036f0 <HAL_UART_IRQHandler+0x190>)
 800358e:	4006      	ands	r6, r0
 8003590:	d102      	bne.n	8003598 <HAL_UART_IRQHandler+0x38>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003592:	4d58      	ldr	r5, [pc, #352]	; (80036f4 <HAL_UART_IRQHandler+0x194>)
 8003594:	4229      	tst	r1, r5
 8003596:	d073      	beq.n	8003680 <HAL_UART_IRQHandler+0x120>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003598:	07dd      	lsls	r5, r3, #31
 800359a:	d509      	bpl.n	80035b0 <HAL_UART_IRQHandler+0x50>
 800359c:	05cd      	lsls	r5, r1, #23
 800359e:	d507      	bpl.n	80035b0 <HAL_UART_IRQHandler+0x50>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035a0:	2501      	movs	r5, #1
 80035a2:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035a4:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80035a8:	f045 0501 	orr.w	r5, r5, #1
 80035ac:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035b0:	079d      	lsls	r5, r3, #30
 80035b2:	d509      	bpl.n	80035c8 <HAL_UART_IRQHandler+0x68>
 80035b4:	07c5      	lsls	r5, r0, #31
 80035b6:	d507      	bpl.n	80035c8 <HAL_UART_IRQHandler+0x68>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035b8:	2502      	movs	r5, #2
 80035ba:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035bc:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80035c0:	f045 0504 	orr.w	r5, r5, #4
 80035c4:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035c8:	075d      	lsls	r5, r3, #29
 80035ca:	d509      	bpl.n	80035e0 <HAL_UART_IRQHandler+0x80>
 80035cc:	07c5      	lsls	r5, r0, #31
 80035ce:	d507      	bpl.n	80035e0 <HAL_UART_IRQHandler+0x80>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80035d0:	2504      	movs	r5, #4
 80035d2:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035d4:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80035d8:	f045 0502 	orr.w	r5, r5, #2
 80035dc:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_ORE) != 0U)
 80035e0:	071d      	lsls	r5, r3, #28
 80035e2:	d50a      	bpl.n	80035fa <HAL_UART_IRQHandler+0x9a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80035e4:	068d      	lsls	r5, r1, #26
 80035e6:	d400      	bmi.n	80035ea <HAL_UART_IRQHandler+0x8a>
 80035e8:	b13e      	cbz	r6, 80035fa <HAL_UART_IRQHandler+0x9a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035ea:	2508      	movs	r5, #8
 80035ec:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035ee:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80035f2:	f045 0508 	orr.w	r5, r5, #8
 80035f6:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035fa:	051e      	lsls	r6, r3, #20
 80035fc:	d50a      	bpl.n	8003614 <HAL_UART_IRQHandler+0xb4>
 80035fe:	014d      	lsls	r5, r1, #5
 8003600:	d508      	bpl.n	8003614 <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003602:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8003606:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003608:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800360c:	f042 0220 	orr.w	r2, r2, #32
 8003610:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003614:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8003618:	b362      	cbz	r2, 8003674 <HAL_UART_IRQHandler+0x114>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800361a:	069e      	lsls	r6, r3, #26
 800361c:	d507      	bpl.n	800362e <HAL_UART_IRQHandler+0xce>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800361e:	068d      	lsls	r5, r1, #26
 8003620:	d401      	bmi.n	8003626 <HAL_UART_IRQHandler+0xc6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003622:	00c0      	lsls	r0, r0, #3
 8003624:	d503      	bpl.n	800362e <HAL_UART_IRQHandler+0xce>
        if (huart->RxISR != NULL)
 8003626:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003628:	b10b      	cbz	r3, 800362e <HAL_UART_IRQHandler+0xce>
          huart->RxISR(huart);
 800362a:	4620      	mov	r0, r4
 800362c:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800362e:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8003630:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003634:	6892      	ldr	r2, [r2, #8]
 8003636:	0651      	lsls	r1, r2, #25
        UART_EndRxTransfer(huart);
 8003638:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800363a:	d402      	bmi.n	8003642 <HAL_UART_IRQHandler+0xe2>
 800363c:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 8003640:	d019      	beq.n	8003676 <HAL_UART_IRQHandler+0x116>
        UART_EndRxTransfer(huart);
 8003642:	f7ff fee4 	bl	800340e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003646:	6823      	ldr	r3, [r4, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	0652      	lsls	r2, r2, #25
 800364c:	d50f      	bpl.n	800366e <HAL_UART_IRQHandler+0x10e>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800364e:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003650:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003656:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003658:	b148      	cbz	r0, 800366e <HAL_UART_IRQHandler+0x10e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800365a:	4b27      	ldr	r3, [pc, #156]	; (80036f8 <HAL_UART_IRQHandler+0x198>)
 800365c:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800365e:	f7fe fd43 	bl	80020e8 <HAL_DMA_Abort_IT>
 8003662:	b138      	cbz	r0, 8003674 <HAL_UART_IRQHandler+0x114>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003664:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003666:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8003668:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800366c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800366e:	4620      	mov	r0, r4
 8003670:	f7ff ff45 	bl	80034fe <HAL_UART_ErrorCallback>
}
 8003674:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003676:	f7ff ff42 	bl	80034fe <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800367a:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 800367e:	e7f9      	b.n	8003674 <HAL_UART_IRQHandler+0x114>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003680:	02de      	lsls	r6, r3, #11
 8003682:	d509      	bpl.n	8003698 <HAL_UART_IRQHandler+0x138>
 8003684:	0245      	lsls	r5, r0, #9
 8003686:	d507      	bpl.n	8003698 <HAL_UART_IRQHandler+0x138>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003688:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800368c:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800368e:	6213      	str	r3, [r2, #32]
}
 8003690:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8003694:	f000 bdca 	b.w	800422c <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003698:	061e      	lsls	r6, r3, #24
 800369a:	d505      	bpl.n	80036a8 <HAL_UART_IRQHandler+0x148>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800369c:	060d      	lsls	r5, r1, #24
 800369e:	d401      	bmi.n	80036a4 <HAL_UART_IRQHandler+0x144>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80036a0:	0200      	lsls	r0, r0, #8
 80036a2:	d501      	bpl.n	80036a8 <HAL_UART_IRQHandler+0x148>
    if (huart->TxISR != NULL)
 80036a4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80036a6:	e76d      	b.n	8003584 <HAL_UART_IRQHandler+0x24>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80036a8:	065e      	lsls	r6, r3, #25
 80036aa:	d50e      	bpl.n	80036ca <HAL_UART_IRQHandler+0x16a>
 80036ac:	064d      	lsls	r5, r1, #25
 80036ae:	d50c      	bpl.n	80036ca <HAL_UART_IRQHandler+0x16a>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036b0:	6813      	ldr	r3, [r2, #0]
 80036b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036b6:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036b8:	2320      	movs	r3, #32
 80036ba:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	6723      	str	r3, [r4, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036c2:	4620      	mov	r0, r4
 80036c4:	f7fd fb72 	bl	8000dac <HAL_UART_TxCpltCallback>
 80036c8:	e7d4      	b.n	8003674 <HAL_UART_IRQHandler+0x114>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80036ca:	0218      	lsls	r0, r3, #8
 80036cc:	d506      	bpl.n	80036dc <HAL_UART_IRQHandler+0x17c>
 80036ce:	004a      	lsls	r2, r1, #1
 80036d0:	d504      	bpl.n	80036dc <HAL_UART_IRQHandler+0x17c>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80036d2:	4620      	mov	r0, r4
}
 80036d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80036d8:	f000 bdaa 	b.w	8004230 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80036dc:	01db      	lsls	r3, r3, #7
 80036de:	d5c9      	bpl.n	8003674 <HAL_UART_IRQHandler+0x114>
 80036e0:	2900      	cmp	r1, #0
 80036e2:	dac7      	bge.n	8003674 <HAL_UART_IRQHandler+0x114>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80036e4:	4620      	mov	r0, r4
}
 80036e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 80036ea:	f000 bda0 	b.w	800422e <HAL_UARTEx_RxFifoFullCallback>
 80036ee:	bf00      	nop
 80036f0:	10000001 	.word	0x10000001
 80036f4:	04000120 	.word	0x04000120
 80036f8:	080036fd 	.word	0x080036fd

080036fc <UART_DMAAbortOnError>:
{
 80036fc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80036fe:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003706:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 800370a:	f7ff fef8 	bl	80034fe <HAL_UART_ErrorCallback>
}
 800370e:	bd08      	pop	{r3, pc}

08003710 <UART_SetConfig>:
  if (UART_INSTANCE_LOWPOWER(huart))
 8003710:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003712:	69c1      	ldr	r1, [r0, #28]
 8003714:	6882      	ldr	r2, [r0, #8]
{
 8003716:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800371a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800371c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800371e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003720:	4302      	orrs	r2, r0
 8003722:	6960      	ldr	r0, [r4, #20]
 8003724:	4302      	orrs	r2, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 8003726:	6e60      	ldr	r0, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003728:	430a      	orrs	r2, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 800372a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800372c:	48ac      	ldr	r0, [pc, #688]	; (80039e0 <UART_SetConfig+0x2d0>)
 800372e:	4028      	ands	r0, r5
 8003730:	4302      	orrs	r2, r0
 8003732:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	68e0      	ldr	r0, [r4, #12]
 8003738:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800373c:	4302      	orrs	r2, r0
 800373e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003740:	4aa8      	ldr	r2, [pc, #672]	; (80039e4 <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003742:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003744:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8003746:	bf1c      	itt	ne
 8003748:	6a22      	ldrne	r2, [r4, #32]
 800374a:	4310      	orrne	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8003752:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8003756:	4302      	orrs	r2, r0
 8003758:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800375a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800375e:	f022 020f 	bic.w	r2, r2, #15
 8003762:	4302      	orrs	r2, r0
 8003764:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003766:	4aa0      	ldr	r2, [pc, #640]	; (80039e8 <UART_SetConfig+0x2d8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d11a      	bne.n	80037a2 <UART_SetConfig+0x92>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800376c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003770:	4a9e      	ldr	r2, [pc, #632]	; (80039ec <UART_SetConfig+0x2dc>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003776:	f003 0303 	and.w	r3, r3, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800377a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800377e:	5cd3      	ldrb	r3, [r2, r3]
 8003780:	f103 33ff 	add.w	r3, r3, #4294967295
 8003784:	f040 8334 	bne.w	8003df0 <UART_SetConfig+0x6e0>
    switch (clocksource)
 8003788:	2b07      	cmp	r3, #7
 800378a:	f200 832e 	bhi.w	8003dea <UART_SetConfig+0x6da>
 800378e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003792:	022a      	.short	0x022a
 8003794:	032c0251 	.word	0x032c0251
 8003798:	032c0298 	.word	0x032c0298
 800379c:	032c032c 	.word	0x032c032c
 80037a0:	02b1      	.short	0x02b1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037a2:	4a90      	ldr	r2, [pc, #576]	; (80039e4 <UART_SetConfig+0x2d4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	f040 83ef 	bne.w	8003f88 <UART_SetConfig+0x878>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80037aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ba:	f000 80ac 	beq.w	8003916 <UART_SetConfig+0x206>
 80037be:	d80a      	bhi.n	80037d6 <UART_SetConfig+0xc6>
 80037c0:	b3c3      	cbz	r3, 8003834 <UART_SetConfig+0x124>
        ret = HAL_ERROR;
 80037c2:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
 80037c4:	2300      	movs	r3, #0
 80037c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037ca:	e9c4 131a 	strd	r1, r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80037ce:	6723      	str	r3, [r4, #112]	; 0x70
}
 80037d0:	4610      	mov	r0, r2
 80037d2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037da:	d065      	beq.n	80038a8 <UART_SetConfig+0x198>
 80037dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037e0:	d1ef      	bne.n	80037c2 <UART_SetConfig+0xb2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80037e2:	2800      	cmp	r0, #0
 80037e4:	f000 80e7 	beq.w	80039b6 <UART_SetConfig+0x2a6>
 80037e8:	2801      	cmp	r0, #1
 80037ea:	f000 80e8 	beq.w	80039be <UART_SetConfig+0x2ae>
 80037ee:	2802      	cmp	r0, #2
 80037f0:	f000 80e9 	beq.w	80039c6 <UART_SetConfig+0x2b6>
 80037f4:	2803      	cmp	r0, #3
 80037f6:	f000 80ea 	beq.w	80039ce <UART_SetConfig+0x2be>
 80037fa:	2804      	cmp	r0, #4
 80037fc:	f000 80eb 	beq.w	80039d6 <UART_SetConfig+0x2c6>
 8003800:	2805      	cmp	r0, #5
 8003802:	f000 810b 	beq.w	8003a1c <UART_SetConfig+0x30c>
 8003806:	2806      	cmp	r0, #6
 8003808:	f000 810c 	beq.w	8003a24 <UART_SetConfig+0x314>
 800380c:	2807      	cmp	r0, #7
 800380e:	f000 810d 	beq.w	8003a2c <UART_SetConfig+0x31c>
 8003812:	2808      	cmp	r0, #8
 8003814:	f000 810e 	beq.w	8003a34 <UART_SetConfig+0x324>
 8003818:	2809      	cmp	r0, #9
 800381a:	f000 810f 	beq.w	8003a3c <UART_SetConfig+0x32c>
 800381e:	280a      	cmp	r0, #10
 8003820:	f000 8110 	beq.w	8003a44 <UART_SetConfig+0x334>
 8003824:	280b      	cmp	r0, #11
 8003826:	f04f 0108 	mov.w	r1, #8
 800382a:	bf14      	ite	ne
 800382c:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8003830:	2080      	moveq	r0, #128	; 0x80
 8003832:	e058      	b.n	80038e6 <UART_SetConfig+0x1d6>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003834:	f7ff fb30 	bl	8002e98 <HAL_RCC_GetPCLK1Freq>
 8003838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800383a:	b1fb      	cbz	r3, 800387c <UART_SetConfig+0x16c>
 800383c:	2b01      	cmp	r3, #1
 800383e:	d01f      	beq.n	8003880 <UART_SetConfig+0x170>
 8003840:	2b02      	cmp	r3, #2
 8003842:	d01f      	beq.n	8003884 <UART_SetConfig+0x174>
 8003844:	2b03      	cmp	r3, #3
 8003846:	d01f      	beq.n	8003888 <UART_SetConfig+0x178>
 8003848:	2b04      	cmp	r3, #4
 800384a:	d01f      	beq.n	800388c <UART_SetConfig+0x17c>
 800384c:	2b05      	cmp	r3, #5
 800384e:	d01f      	beq.n	8003890 <UART_SetConfig+0x180>
 8003850:	2b06      	cmp	r3, #6
 8003852:	d01f      	beq.n	8003894 <UART_SetConfig+0x184>
 8003854:	2b07      	cmp	r3, #7
 8003856:	d01f      	beq.n	8003898 <UART_SetConfig+0x188>
 8003858:	2b08      	cmp	r3, #8
 800385a:	d01f      	beq.n	800389c <UART_SetConfig+0x18c>
 800385c:	2b09      	cmp	r3, #9
 800385e:	d01f      	beq.n	80038a0 <UART_SetConfig+0x190>
 8003860:	2b0a      	cmp	r3, #10
 8003862:	d01f      	beq.n	80038a4 <UART_SetConfig+0x194>
 8003864:	2b0b      	cmp	r3, #11
 8003866:	bf14      	ite	ne
 8003868:	2301      	movne	r3, #1
 800386a:	f44f 7380 	moveq.w	r3, #256	; 0x100
  UART_GETCLOCKSOURCE(huart, clocksource);
 800386e:	2100      	movs	r1, #0
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003870:	fbb0 f0f3 	udiv	r0, r0, r3
    if (lpuart_ker_ck_pres != 0U)
 8003874:	2800      	cmp	r0, #0
 8003876:	d136      	bne.n	80038e6 <UART_SetConfig+0x1d6>
 8003878:	4602      	mov	r2, r0
 800387a:	e7a3      	b.n	80037c4 <UART_SetConfig+0xb4>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800387c:	2301      	movs	r3, #1
 800387e:	e7f6      	b.n	800386e <UART_SetConfig+0x15e>
 8003880:	2302      	movs	r3, #2
 8003882:	e7f4      	b.n	800386e <UART_SetConfig+0x15e>
 8003884:	2304      	movs	r3, #4
 8003886:	e7f2      	b.n	800386e <UART_SetConfig+0x15e>
 8003888:	2306      	movs	r3, #6
 800388a:	e7f0      	b.n	800386e <UART_SetConfig+0x15e>
 800388c:	2308      	movs	r3, #8
 800388e:	e7ee      	b.n	800386e <UART_SetConfig+0x15e>
 8003890:	230a      	movs	r3, #10
 8003892:	e7ec      	b.n	800386e <UART_SetConfig+0x15e>
 8003894:	230c      	movs	r3, #12
 8003896:	e7ea      	b.n	800386e <UART_SetConfig+0x15e>
 8003898:	2310      	movs	r3, #16
 800389a:	e7e8      	b.n	800386e <UART_SetConfig+0x15e>
 800389c:	2320      	movs	r3, #32
 800389e:	e7e6      	b.n	800386e <UART_SetConfig+0x15e>
 80038a0:	2340      	movs	r3, #64	; 0x40
 80038a2:	e7e4      	b.n	800386e <UART_SetConfig+0x15e>
 80038a4:	2380      	movs	r3, #128	; 0x80
 80038a6:	e7e2      	b.n	800386e <UART_SetConfig+0x15e>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80038a8:	2800      	cmp	r0, #0
 80038aa:	d06b      	beq.n	8003984 <UART_SetConfig+0x274>
 80038ac:	2801      	cmp	r0, #1
 80038ae:	d06c      	beq.n	800398a <UART_SetConfig+0x27a>
 80038b0:	2802      	cmp	r0, #2
 80038b2:	d06d      	beq.n	8003990 <UART_SetConfig+0x280>
 80038b4:	2803      	cmp	r0, #3
 80038b6:	f04f 0102 	mov.w	r1, #2
 80038ba:	d06c      	beq.n	8003996 <UART_SetConfig+0x286>
 80038bc:	2804      	cmp	r0, #4
 80038be:	d06c      	beq.n	800399a <UART_SetConfig+0x28a>
 80038c0:	2805      	cmp	r0, #5
 80038c2:	d06c      	beq.n	800399e <UART_SetConfig+0x28e>
 80038c4:	2806      	cmp	r0, #6
 80038c6:	d06c      	beq.n	80039a2 <UART_SetConfig+0x292>
 80038c8:	2807      	cmp	r0, #7
 80038ca:	d06c      	beq.n	80039a6 <UART_SetConfig+0x296>
 80038cc:	2808      	cmp	r0, #8
 80038ce:	d06c      	beq.n	80039aa <UART_SetConfig+0x29a>
 80038d0:	2809      	cmp	r0, #9
 80038d2:	d06c      	beq.n	80039ae <UART_SetConfig+0x29e>
 80038d4:	280a      	cmp	r0, #10
 80038d6:	d06c      	beq.n	80039b2 <UART_SetConfig+0x2a2>
 80038d8:	4b45      	ldr	r3, [pc, #276]	; (80039f0 <UART_SetConfig+0x2e0>)
 80038da:	f24f 4224 	movw	r2, #62500	; 0xf424
 80038de:	280b      	cmp	r0, #11
 80038e0:	bf14      	ite	ne
 80038e2:	4618      	movne	r0, r3
 80038e4:	4610      	moveq	r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038e6:	6862      	ldr	r2, [r4, #4]
 80038e8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80038ec:	4283      	cmp	r3, r0
 80038ee:	f63f af68 	bhi.w	80037c2 <UART_SetConfig+0xb2>
 80038f2:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80038f6:	f63f af64 	bhi.w	80037c2 <UART_SetConfig+0xb2>
        switch (clocksource)
 80038fa:	2908      	cmp	r1, #8
 80038fc:	f200 8170 	bhi.w	8003be0 <UART_SetConfig+0x4d0>
 8003900:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003904:	016e00a4 	.word	0x016e00a4
 8003908:	016e00e0 	.word	0x016e00e0
 800390c:	016e011c 	.word	0x016e011c
 8003910:	016e016e 	.word	0x016e016e
 8003914:	0135      	.short	0x0135
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003916:	f7ff fa61 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 800391a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800391c:	b1e3      	cbz	r3, 8003958 <UART_SetConfig+0x248>
 800391e:	2b01      	cmp	r3, #1
 8003920:	d01c      	beq.n	800395c <UART_SetConfig+0x24c>
 8003922:	2b02      	cmp	r3, #2
 8003924:	d01c      	beq.n	8003960 <UART_SetConfig+0x250>
 8003926:	2b03      	cmp	r3, #3
 8003928:	d01c      	beq.n	8003964 <UART_SetConfig+0x254>
 800392a:	2b04      	cmp	r3, #4
 800392c:	d01c      	beq.n	8003968 <UART_SetConfig+0x258>
 800392e:	2b05      	cmp	r3, #5
 8003930:	d01c      	beq.n	800396c <UART_SetConfig+0x25c>
 8003932:	2b06      	cmp	r3, #6
 8003934:	d01c      	beq.n	8003970 <UART_SetConfig+0x260>
 8003936:	2b07      	cmp	r3, #7
 8003938:	d01c      	beq.n	8003974 <UART_SetConfig+0x264>
 800393a:	2b08      	cmp	r3, #8
 800393c:	d01c      	beq.n	8003978 <UART_SetConfig+0x268>
 800393e:	2b09      	cmp	r3, #9
 8003940:	d01c      	beq.n	800397c <UART_SetConfig+0x26c>
 8003942:	2b0a      	cmp	r3, #10
 8003944:	d01c      	beq.n	8003980 <UART_SetConfig+0x270>
 8003946:	2b0b      	cmp	r3, #11
 8003948:	bf14      	ite	ne
 800394a:	2301      	movne	r3, #1
 800394c:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003950:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8003954:	2104      	movs	r1, #4
 8003956:	e78d      	b.n	8003874 <UART_SetConfig+0x164>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003958:	2301      	movs	r3, #1
 800395a:	e7f9      	b.n	8003950 <UART_SetConfig+0x240>
 800395c:	2302      	movs	r3, #2
 800395e:	e7f7      	b.n	8003950 <UART_SetConfig+0x240>
 8003960:	2304      	movs	r3, #4
 8003962:	e7f5      	b.n	8003950 <UART_SetConfig+0x240>
 8003964:	2306      	movs	r3, #6
 8003966:	e7f3      	b.n	8003950 <UART_SetConfig+0x240>
 8003968:	2308      	movs	r3, #8
 800396a:	e7f1      	b.n	8003950 <UART_SetConfig+0x240>
 800396c:	230a      	movs	r3, #10
 800396e:	e7ef      	b.n	8003950 <UART_SetConfig+0x240>
 8003970:	230c      	movs	r3, #12
 8003972:	e7ed      	b.n	8003950 <UART_SetConfig+0x240>
 8003974:	2310      	movs	r3, #16
 8003976:	e7eb      	b.n	8003950 <UART_SetConfig+0x240>
 8003978:	2320      	movs	r3, #32
 800397a:	e7e9      	b.n	8003950 <UART_SetConfig+0x240>
 800397c:	2340      	movs	r3, #64	; 0x40
 800397e:	e7e7      	b.n	8003950 <UART_SetConfig+0x240>
 8003980:	2380      	movs	r3, #128	; 0x80
 8003982:	e7e5      	b.n	8003950 <UART_SetConfig+0x240>
 8003984:	2102      	movs	r1, #2
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003986:	481a      	ldr	r0, [pc, #104]	; (80039f0 <UART_SetConfig+0x2e0>)
 8003988:	e7ad      	b.n	80038e6 <UART_SetConfig+0x1d6>
 800398a:	2102      	movs	r1, #2
 800398c:	4819      	ldr	r0, [pc, #100]	; (80039f4 <UART_SetConfig+0x2e4>)
 800398e:	e7aa      	b.n	80038e6 <UART_SetConfig+0x1d6>
 8003990:	4601      	mov	r1, r0
 8003992:	4819      	ldr	r0, [pc, #100]	; (80039f8 <UART_SetConfig+0x2e8>)
 8003994:	e7a7      	b.n	80038e6 <UART_SetConfig+0x1d6>
 8003996:	4819      	ldr	r0, [pc, #100]	; (80039fc <UART_SetConfig+0x2ec>)
 8003998:	e7a5      	b.n	80038e6 <UART_SetConfig+0x1d6>
 800399a:	4819      	ldr	r0, [pc, #100]	; (8003a00 <UART_SetConfig+0x2f0>)
 800399c:	e7a3      	b.n	80038e6 <UART_SetConfig+0x1d6>
 800399e:	4819      	ldr	r0, [pc, #100]	; (8003a04 <UART_SetConfig+0x2f4>)
 80039a0:	e7a1      	b.n	80038e6 <UART_SetConfig+0x1d6>
 80039a2:	4819      	ldr	r0, [pc, #100]	; (8003a08 <UART_SetConfig+0x2f8>)
 80039a4:	e79f      	b.n	80038e6 <UART_SetConfig+0x1d6>
 80039a6:	4819      	ldr	r0, [pc, #100]	; (8003a0c <UART_SetConfig+0x2fc>)
 80039a8:	e79d      	b.n	80038e6 <UART_SetConfig+0x1d6>
 80039aa:	4819      	ldr	r0, [pc, #100]	; (8003a10 <UART_SetConfig+0x300>)
 80039ac:	e79b      	b.n	80038e6 <UART_SetConfig+0x1d6>
 80039ae:	4819      	ldr	r0, [pc, #100]	; (8003a14 <UART_SetConfig+0x304>)
 80039b0:	e799      	b.n	80038e6 <UART_SetConfig+0x1d6>
 80039b2:	4819      	ldr	r0, [pc, #100]	; (8003a18 <UART_SetConfig+0x308>)
 80039b4:	e797      	b.n	80038e6 <UART_SetConfig+0x1d6>
 80039b6:	2108      	movs	r1, #8
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80039b8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80039bc:	e793      	b.n	80038e6 <UART_SetConfig+0x1d6>
 80039be:	2108      	movs	r1, #8
 80039c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80039c4:	e78f      	b.n	80038e6 <UART_SetConfig+0x1d6>
 80039c6:	2108      	movs	r1, #8
 80039c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80039cc:	e78b      	b.n	80038e6 <UART_SetConfig+0x1d6>
 80039ce:	2108      	movs	r1, #8
 80039d0:	f241 5055 	movw	r0, #5461	; 0x1555
 80039d4:	e787      	b.n	80038e6 <UART_SetConfig+0x1d6>
 80039d6:	2108      	movs	r1, #8
 80039d8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80039dc:	e783      	b.n	80038e6 <UART_SetConfig+0x1d6>
 80039de:	bf00      	nop
 80039e0:	cfff69f3 	.word	0xcfff69f3
 80039e4:	40008000 	.word	0x40008000
 80039e8:	40013800 	.word	0x40013800
 80039ec:	0800605c 	.word	0x0800605c
 80039f0:	00f42400 	.word	0x00f42400
 80039f4:	007a1200 	.word	0x007a1200
 80039f8:	003d0900 	.word	0x003d0900
 80039fc:	0028b0aa 	.word	0x0028b0aa
 8003a00:	001e8480 	.word	0x001e8480
 8003a04:	00186a00 	.word	0x00186a00
 8003a08:	00145855 	.word	0x00145855
 8003a0c:	000f4240 	.word	0x000f4240
 8003a10:	0007a120 	.word	0x0007a120
 8003a14:	0003d090 	.word	0x0003d090
 8003a18:	0001e848 	.word	0x0001e848
 8003a1c:	2108      	movs	r1, #8
 8003a1e:	f640 40cc 	movw	r0, #3276	; 0xccc
 8003a22:	e760      	b.n	80038e6 <UART_SetConfig+0x1d6>
 8003a24:	2108      	movs	r1, #8
 8003a26:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8003a2a:	e75c      	b.n	80038e6 <UART_SetConfig+0x1d6>
 8003a2c:	2108      	movs	r1, #8
 8003a2e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003a32:	e758      	b.n	80038e6 <UART_SetConfig+0x1d6>
 8003a34:	4601      	mov	r1, r0
 8003a36:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003a3a:	e754      	b.n	80038e6 <UART_SetConfig+0x1d6>
 8003a3c:	2108      	movs	r1, #8
 8003a3e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003a42:	e750      	b.n	80038e6 <UART_SetConfig+0x1d6>
 8003a44:	2108      	movs	r1, #8
 8003a46:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003a4a:	e74c      	b.n	80038e6 <UART_SetConfig+0x1d6>
            pclk = HAL_RCC_GetPCLK1Freq();
 8003a4c:	f7ff fa24 	bl	8002e98 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 8089 	beq.w	8003b6a <UART_SetConfig+0x45a>
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d072      	beq.n	8003b42 <UART_SetConfig+0x432>
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d072      	beq.n	8003b46 <UART_SetConfig+0x436>
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d072      	beq.n	8003b4a <UART_SetConfig+0x43a>
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d072      	beq.n	8003b4e <UART_SetConfig+0x43e>
 8003a68:	2b05      	cmp	r3, #5
 8003a6a:	d072      	beq.n	8003b52 <UART_SetConfig+0x442>
 8003a6c:	2b06      	cmp	r3, #6
 8003a6e:	d072      	beq.n	8003b56 <UART_SetConfig+0x446>
 8003a70:	2b07      	cmp	r3, #7
 8003a72:	d072      	beq.n	8003b5a <UART_SetConfig+0x44a>
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d072      	beq.n	8003b5e <UART_SetConfig+0x44e>
 8003a78:	2b09      	cmp	r3, #9
 8003a7a:	d072      	beq.n	8003b62 <UART_SetConfig+0x452>
 8003a7c:	2b0a      	cmp	r3, #10
 8003a7e:	d072      	beq.n	8003b66 <UART_SetConfig+0x456>
 8003a80:	2b0b      	cmp	r3, #11
 8003a82:	d172      	bne.n	8003b6a <UART_SetConfig+0x45a>
 8003a84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a88:	2300      	movs	r3, #0
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	f7fc fb78 	bl	8000180 <__aeabi_uldivmod>
 8003a90:	6865      	ldr	r5, [r4, #4]
 8003a92:	020f      	lsls	r7, r1, #8
 8003a94:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8003a98:	0206      	lsls	r6, r0, #8
 8003a9a:	0868      	lsrs	r0, r5, #1
 8003a9c:	eb16 0b00 	adds.w	fp, r6, r0
 8003aa0:	f147 0c00 	adc.w	ip, r7, #0
 8003aa4:	462a      	mov	r2, r5
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	4658      	mov	r0, fp
 8003aaa:	4661      	mov	r1, ip
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003aac:	f7fc fb68 	bl	8000180 <__aeabi_uldivmod>
            break;
 8003ab0:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ab2:	4ba5      	ldr	r3, [pc, #660]	; (8003d48 <UART_SetConfig+0x638>)
 8003ab4:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8003ab8:	4299      	cmp	r1, r3
 8003aba:	f63f ae82 	bhi.w	80037c2 <UART_SetConfig+0xb2>
          huart->Instance->BRR = usartdiv;
 8003abe:	6823      	ldr	r3, [r4, #0]
 8003ac0:	60d8      	str	r0, [r3, #12]
 8003ac2:	e67f      	b.n	80037c4 <UART_SetConfig+0xb4>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ac4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d036      	beq.n	8003b38 <UART_SetConfig+0x428>
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d016      	beq.n	8003afc <UART_SetConfig+0x3ec>
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d016      	beq.n	8003b00 <UART_SetConfig+0x3f0>
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d016      	beq.n	8003b04 <UART_SetConfig+0x3f4>
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d01e      	beq.n	8003b18 <UART_SetConfig+0x408>
 8003ada:	2b05      	cmp	r3, #5
 8003adc:	d01e      	beq.n	8003b1c <UART_SetConfig+0x40c>
 8003ade:	2b06      	cmp	r3, #6
 8003ae0:	d01e      	beq.n	8003b20 <UART_SetConfig+0x410>
 8003ae2:	2b07      	cmp	r3, #7
 8003ae4:	d020      	beq.n	8003b28 <UART_SetConfig+0x418>
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d020      	beq.n	8003b2c <UART_SetConfig+0x41c>
 8003aea:	2b09      	cmp	r3, #9
 8003aec:	d020      	beq.n	8003b30 <UART_SetConfig+0x420>
 8003aee:	2b0a      	cmp	r3, #10
 8003af0:	d020      	beq.n	8003b34 <UART_SetConfig+0x424>
 8003af2:	2b0b      	cmp	r3, #11
 8003af4:	d120      	bne.n	8003b38 <UART_SetConfig+0x428>
 8003af6:	4e95      	ldr	r6, [pc, #596]	; (8003d4c <UART_SetConfig+0x63c>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003af8:	2700      	movs	r7, #0
 8003afa:	e006      	b.n	8003b0a <UART_SetConfig+0x3fa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003afc:	4e94      	ldr	r6, [pc, #592]	; (8003d50 <UART_SetConfig+0x640>)
 8003afe:	e7fb      	b.n	8003af8 <UART_SetConfig+0x3e8>
 8003b00:	4e94      	ldr	r6, [pc, #592]	; (8003d54 <UART_SetConfig+0x644>)
 8003b02:	e7f9      	b.n	8003af8 <UART_SetConfig+0x3e8>
 8003b04:	a78c      	add	r7, pc, #560	; (adr r7, 8003d38 <UART_SetConfig+0x628>)
 8003b06:	e9d7 6700 	ldrd	r6, r7, [r7]
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b0a:	0855      	lsrs	r5, r2, #1
 8003b0c:	1970      	adds	r0, r6, r5
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	f147 0100 	adc.w	r1, r7, #0
 8003b16:	e7c9      	b.n	8003aac <UART_SetConfig+0x39c>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b18:	4e8f      	ldr	r6, [pc, #572]	; (8003d58 <UART_SetConfig+0x648>)
 8003b1a:	e7ed      	b.n	8003af8 <UART_SetConfig+0x3e8>
 8003b1c:	4e8f      	ldr	r6, [pc, #572]	; (8003d5c <UART_SetConfig+0x64c>)
 8003b1e:	e7eb      	b.n	8003af8 <UART_SetConfig+0x3e8>
 8003b20:	a787      	add	r7, pc, #540	; (adr r7, 8003d40 <UART_SetConfig+0x630>)
 8003b22:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003b26:	e7f0      	b.n	8003b0a <UART_SetConfig+0x3fa>
 8003b28:	4e8d      	ldr	r6, [pc, #564]	; (8003d60 <UART_SetConfig+0x650>)
 8003b2a:	e7e5      	b.n	8003af8 <UART_SetConfig+0x3e8>
 8003b2c:	4e8d      	ldr	r6, [pc, #564]	; (8003d64 <UART_SetConfig+0x654>)
 8003b2e:	e7e3      	b.n	8003af8 <UART_SetConfig+0x3e8>
 8003b30:	4e8d      	ldr	r6, [pc, #564]	; (8003d68 <UART_SetConfig+0x658>)
 8003b32:	e7e1      	b.n	8003af8 <UART_SetConfig+0x3e8>
 8003b34:	4e8d      	ldr	r6, [pc, #564]	; (8003d6c <UART_SetConfig+0x65c>)
 8003b36:	e7df      	b.n	8003af8 <UART_SetConfig+0x3e8>
 8003b38:	4e8d      	ldr	r6, [pc, #564]	; (8003d70 <UART_SetConfig+0x660>)
 8003b3a:	e7dd      	b.n	8003af8 <UART_SetConfig+0x3e8>
            pclk = HAL_RCC_GetSysClockFreq();
 8003b3c:	f7ff f94e 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 8003b40:	e786      	b.n	8003a50 <UART_SetConfig+0x340>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b42:	2202      	movs	r2, #2
 8003b44:	e7a0      	b.n	8003a88 <UART_SetConfig+0x378>
 8003b46:	2204      	movs	r2, #4
 8003b48:	e79e      	b.n	8003a88 <UART_SetConfig+0x378>
 8003b4a:	2206      	movs	r2, #6
 8003b4c:	e79c      	b.n	8003a88 <UART_SetConfig+0x378>
 8003b4e:	2208      	movs	r2, #8
 8003b50:	e79a      	b.n	8003a88 <UART_SetConfig+0x378>
 8003b52:	220a      	movs	r2, #10
 8003b54:	e798      	b.n	8003a88 <UART_SetConfig+0x378>
 8003b56:	220c      	movs	r2, #12
 8003b58:	e796      	b.n	8003a88 <UART_SetConfig+0x378>
 8003b5a:	2210      	movs	r2, #16
 8003b5c:	e794      	b.n	8003a88 <UART_SetConfig+0x378>
 8003b5e:	2220      	movs	r2, #32
 8003b60:	e792      	b.n	8003a88 <UART_SetConfig+0x378>
 8003b62:	2240      	movs	r2, #64	; 0x40
 8003b64:	e790      	b.n	8003a88 <UART_SetConfig+0x378>
 8003b66:	2280      	movs	r2, #128	; 0x80
 8003b68:	e78e      	b.n	8003a88 <UART_SetConfig+0x378>
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	e78c      	b.n	8003a88 <UART_SetConfig+0x378>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b70:	b39b      	cbz	r3, 8003bda <UART_SetConfig+0x4ca>
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d016      	beq.n	8003ba4 <UART_SetConfig+0x494>
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d017      	beq.n	8003baa <UART_SetConfig+0x49a>
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d018      	beq.n	8003bb0 <UART_SetConfig+0x4a0>
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d018      	beq.n	8003bb4 <UART_SetConfig+0x4a4>
 8003b82:	2b05      	cmp	r3, #5
 8003b84:	d019      	beq.n	8003bba <UART_SetConfig+0x4aa>
 8003b86:	2b06      	cmp	r3, #6
 8003b88:	d019      	beq.n	8003bbe <UART_SetConfig+0x4ae>
 8003b8a:	2b07      	cmp	r3, #7
 8003b8c:	d019      	beq.n	8003bc2 <UART_SetConfig+0x4b2>
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d01a      	beq.n	8003bc8 <UART_SetConfig+0x4b8>
 8003b92:	2b09      	cmp	r3, #9
 8003b94:	d01b      	beq.n	8003bce <UART_SetConfig+0x4be>
 8003b96:	2b0a      	cmp	r3, #10
 8003b98:	d01c      	beq.n	8003bd4 <UART_SetConfig+0x4c4>
 8003b9a:	2b0b      	cmp	r3, #11
 8003b9c:	d11d      	bne.n	8003bda <UART_SetConfig+0x4ca>
 8003b9e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8003ba2:	e7a9      	b.n	8003af8 <UART_SetConfig+0x3e8>
 8003ba4:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 8003ba8:	e7a6      	b.n	8003af8 <UART_SetConfig+0x3e8>
 8003baa:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8003bae:	e7a3      	b.n	8003af8 <UART_SetConfig+0x3e8>
 8003bb0:	4e70      	ldr	r6, [pc, #448]	; (8003d74 <UART_SetConfig+0x664>)
 8003bb2:	e7a1      	b.n	8003af8 <UART_SetConfig+0x3e8>
 8003bb4:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8003bb8:	e79e      	b.n	8003af8 <UART_SetConfig+0x3e8>
 8003bba:	4e6f      	ldr	r6, [pc, #444]	; (8003d78 <UART_SetConfig+0x668>)
 8003bbc:	e79c      	b.n	8003af8 <UART_SetConfig+0x3e8>
 8003bbe:	4e6f      	ldr	r6, [pc, #444]	; (8003d7c <UART_SetConfig+0x66c>)
 8003bc0:	e79a      	b.n	8003af8 <UART_SetConfig+0x3e8>
 8003bc2:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 8003bc6:	e797      	b.n	8003af8 <UART_SetConfig+0x3e8>
 8003bc8:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8003bcc:	e794      	b.n	8003af8 <UART_SetConfig+0x3e8>
 8003bce:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8003bd2:	e791      	b.n	8003af8 <UART_SetConfig+0x3e8>
 8003bd4:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8003bd8:	e78e      	b.n	8003af8 <UART_SetConfig+0x3e8>
 8003bda:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 8003bde:	e78b      	b.n	8003af8 <UART_SetConfig+0x3e8>
            ret = HAL_ERROR;
 8003be0:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003be2:	2000      	movs	r0, #0
 8003be4:	e765      	b.n	8003ab2 <UART_SetConfig+0x3a2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003be6:	f7ff f969 	bl	8002ebc <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003bec:	2900      	cmp	r1, #0
 8003bee:	d06b      	beq.n	8003cc8 <UART_SetConfig+0x5b8>
 8003bf0:	2901      	cmp	r1, #1
 8003bf2:	d06b      	beq.n	8003ccc <UART_SetConfig+0x5bc>
 8003bf4:	2902      	cmp	r1, #2
 8003bf6:	d06b      	beq.n	8003cd0 <UART_SetConfig+0x5c0>
 8003bf8:	2903      	cmp	r1, #3
 8003bfa:	d06b      	beq.n	8003cd4 <UART_SetConfig+0x5c4>
 8003bfc:	2904      	cmp	r1, #4
 8003bfe:	d06b      	beq.n	8003cd8 <UART_SetConfig+0x5c8>
 8003c00:	2905      	cmp	r1, #5
 8003c02:	d06b      	beq.n	8003cdc <UART_SetConfig+0x5cc>
 8003c04:	2906      	cmp	r1, #6
 8003c06:	d06b      	beq.n	8003ce0 <UART_SetConfig+0x5d0>
 8003c08:	2907      	cmp	r1, #7
 8003c0a:	d06b      	beq.n	8003ce4 <UART_SetConfig+0x5d4>
 8003c0c:	2908      	cmp	r1, #8
 8003c0e:	d06b      	beq.n	8003ce8 <UART_SetConfig+0x5d8>
 8003c10:	2909      	cmp	r1, #9
 8003c12:	d06b      	beq.n	8003cec <UART_SetConfig+0x5dc>
 8003c14:	290a      	cmp	r1, #10
 8003c16:	d06b      	beq.n	8003cf0 <UART_SetConfig+0x5e0>
 8003c18:	290b      	cmp	r1, #11
 8003c1a:	bf14      	ite	ne
 8003c1c:	2201      	movne	r2, #1
 8003c1e:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8003c22:	6861      	ldr	r1, [r4, #4]
 8003c24:	fbb0 f2f2 	udiv	r2, r0, r2
 8003c28:	084b      	lsrs	r3, r1, #1
 8003c2a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c32:	e01f      	b.n	8003c74 <UART_SetConfig+0x564>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c34:	b378      	cbz	r0, 8003c96 <UART_SetConfig+0x586>
 8003c36:	2801      	cmp	r0, #1
 8003c38:	d02f      	beq.n	8003c9a <UART_SetConfig+0x58a>
 8003c3a:	2802      	cmp	r0, #2
 8003c3c:	d02f      	beq.n	8003c9e <UART_SetConfig+0x58e>
 8003c3e:	2803      	cmp	r0, #3
 8003c40:	d02f      	beq.n	8003ca2 <UART_SetConfig+0x592>
 8003c42:	2804      	cmp	r0, #4
 8003c44:	d02f      	beq.n	8003ca6 <UART_SetConfig+0x596>
 8003c46:	2805      	cmp	r0, #5
 8003c48:	d02f      	beq.n	8003caa <UART_SetConfig+0x59a>
 8003c4a:	2806      	cmp	r0, #6
 8003c4c:	d02f      	beq.n	8003cae <UART_SetConfig+0x59e>
 8003c4e:	2807      	cmp	r0, #7
 8003c50:	d02f      	beq.n	8003cb2 <UART_SetConfig+0x5a2>
 8003c52:	2808      	cmp	r0, #8
 8003c54:	d02f      	beq.n	8003cb6 <UART_SetConfig+0x5a6>
 8003c56:	2809      	cmp	r0, #9
 8003c58:	d02f      	beq.n	8003cba <UART_SetConfig+0x5aa>
 8003c5a:	280a      	cmp	r0, #10
 8003c5c:	d02f      	beq.n	8003cbe <UART_SetConfig+0x5ae>
 8003c5e:	4b43      	ldr	r3, [pc, #268]	; (8003d6c <UART_SetConfig+0x65c>)
 8003c60:	4a47      	ldr	r2, [pc, #284]	; (8003d80 <UART_SetConfig+0x670>)
 8003c62:	280b      	cmp	r0, #11
 8003c64:	bf14      	ite	ne
 8003c66:	4618      	movne	r0, r3
 8003c68:	4610      	moveq	r0, r2
 8003c6a:	6863      	ldr	r3, [r4, #4]
 8003c6c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003c70:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c74:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c76:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c78:	f1a3 0010 	sub.w	r0, r3, #16
 8003c7c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003c80:	4288      	cmp	r0, r1
 8003c82:	f63f ad9e 	bhi.w	80037c2 <UART_SetConfig+0xb2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c86:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8003c8a:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c8c:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8003c90:	430b      	orrs	r3, r1
 8003c92:	60c3      	str	r3, [r0, #12]
 8003c94:	e596      	b.n	80037c4 <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c96:	4835      	ldr	r0, [pc, #212]	; (8003d6c <UART_SetConfig+0x65c>)
 8003c98:	e7e7      	b.n	8003c6a <UART_SetConfig+0x55a>
 8003c9a:	482c      	ldr	r0, [pc, #176]	; (8003d4c <UART_SetConfig+0x63c>)
 8003c9c:	e7e5      	b.n	8003c6a <UART_SetConfig+0x55a>
 8003c9e:	4839      	ldr	r0, [pc, #228]	; (8003d84 <UART_SetConfig+0x674>)
 8003ca0:	e7e3      	b.n	8003c6a <UART_SetConfig+0x55a>
 8003ca2:	4839      	ldr	r0, [pc, #228]	; (8003d88 <UART_SetConfig+0x678>)
 8003ca4:	e7e1      	b.n	8003c6a <UART_SetConfig+0x55a>
 8003ca6:	4839      	ldr	r0, [pc, #228]	; (8003d8c <UART_SetConfig+0x67c>)
 8003ca8:	e7df      	b.n	8003c6a <UART_SetConfig+0x55a>
 8003caa:	4839      	ldr	r0, [pc, #228]	; (8003d90 <UART_SetConfig+0x680>)
 8003cac:	e7dd      	b.n	8003c6a <UART_SetConfig+0x55a>
 8003cae:	4839      	ldr	r0, [pc, #228]	; (8003d94 <UART_SetConfig+0x684>)
 8003cb0:	e7db      	b.n	8003c6a <UART_SetConfig+0x55a>
 8003cb2:	4839      	ldr	r0, [pc, #228]	; (8003d98 <UART_SetConfig+0x688>)
 8003cb4:	e7d9      	b.n	8003c6a <UART_SetConfig+0x55a>
 8003cb6:	4839      	ldr	r0, [pc, #228]	; (8003d9c <UART_SetConfig+0x68c>)
 8003cb8:	e7d7      	b.n	8003c6a <UART_SetConfig+0x55a>
 8003cba:	4839      	ldr	r0, [pc, #228]	; (8003da0 <UART_SetConfig+0x690>)
 8003cbc:	e7d5      	b.n	8003c6a <UART_SetConfig+0x55a>
 8003cbe:	4839      	ldr	r0, [pc, #228]	; (8003da4 <UART_SetConfig+0x694>)
 8003cc0:	e7d3      	b.n	8003c6a <UART_SetConfig+0x55a>
        pclk = HAL_RCC_GetSysClockFreq();
 8003cc2:	f7ff f88b 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 8003cc6:	e790      	b.n	8003bea <UART_SetConfig+0x4da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cc8:	2201      	movs	r2, #1
 8003cca:	e7aa      	b.n	8003c22 <UART_SetConfig+0x512>
 8003ccc:	2202      	movs	r2, #2
 8003cce:	e7a8      	b.n	8003c22 <UART_SetConfig+0x512>
 8003cd0:	2204      	movs	r2, #4
 8003cd2:	e7a6      	b.n	8003c22 <UART_SetConfig+0x512>
 8003cd4:	2206      	movs	r2, #6
 8003cd6:	e7a4      	b.n	8003c22 <UART_SetConfig+0x512>
 8003cd8:	2208      	movs	r2, #8
 8003cda:	e7a2      	b.n	8003c22 <UART_SetConfig+0x512>
 8003cdc:	220a      	movs	r2, #10
 8003cde:	e7a0      	b.n	8003c22 <UART_SetConfig+0x512>
 8003ce0:	220c      	movs	r2, #12
 8003ce2:	e79e      	b.n	8003c22 <UART_SetConfig+0x512>
 8003ce4:	2210      	movs	r2, #16
 8003ce6:	e79c      	b.n	8003c22 <UART_SetConfig+0x512>
 8003ce8:	2220      	movs	r2, #32
 8003cea:	e79a      	b.n	8003c22 <UART_SetConfig+0x512>
 8003cec:	2240      	movs	r2, #64	; 0x40
 8003cee:	e798      	b.n	8003c22 <UART_SetConfig+0x512>
 8003cf0:	2280      	movs	r2, #128	; 0x80
 8003cf2:	e796      	b.n	8003c22 <UART_SetConfig+0x512>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cf4:	2800      	cmp	r0, #0
 8003cf6:	d057      	beq.n	8003da8 <UART_SetConfig+0x698>
 8003cf8:	2801      	cmp	r0, #1
 8003cfa:	d058      	beq.n	8003dae <UART_SetConfig+0x69e>
 8003cfc:	2802      	cmp	r0, #2
 8003cfe:	d059      	beq.n	8003db4 <UART_SetConfig+0x6a4>
 8003d00:	2803      	cmp	r0, #3
 8003d02:	d05a      	beq.n	8003dba <UART_SetConfig+0x6aa>
 8003d04:	2804      	cmp	r0, #4
 8003d06:	d05b      	beq.n	8003dc0 <UART_SetConfig+0x6b0>
 8003d08:	2805      	cmp	r0, #5
 8003d0a:	d05c      	beq.n	8003dc6 <UART_SetConfig+0x6b6>
 8003d0c:	2806      	cmp	r0, #6
 8003d0e:	d05d      	beq.n	8003dcc <UART_SetConfig+0x6bc>
 8003d10:	2807      	cmp	r0, #7
 8003d12:	d05e      	beq.n	8003dd2 <UART_SetConfig+0x6c2>
 8003d14:	2808      	cmp	r0, #8
 8003d16:	d05f      	beq.n	8003dd8 <UART_SetConfig+0x6c8>
 8003d18:	2809      	cmp	r0, #9
 8003d1a:	d060      	beq.n	8003dde <UART_SetConfig+0x6ce>
 8003d1c:	280a      	cmp	r0, #10
 8003d1e:	d061      	beq.n	8003de4 <UART_SetConfig+0x6d4>
 8003d20:	280b      	cmp	r0, #11
 8003d22:	bf14      	ite	ne
 8003d24:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8003d28:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003d2c:	6860      	ldr	r0, [r4, #4]
 8003d2e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8003d32:	fbb3 f3f0 	udiv	r3, r3, r0
 8003d36:	e79d      	b.n	8003c74 <UART_SetConfig+0x564>
 8003d38:	28b0aa00 	.word	0x28b0aa00
 8003d3c:	00000000 	.word	0x00000000
 8003d40:	14585500 	.word	0x14585500
 8003d44:	00000000 	.word	0x00000000
 8003d48:	000ffcff 	.word	0x000ffcff
 8003d4c:	00f42400 	.word	0x00f42400
 8003d50:	7a120000 	.word	0x7a120000
 8003d54:	3d090000 	.word	0x3d090000
 8003d58:	1e848000 	.word	0x1e848000
 8003d5c:	186a0000 	.word	0x186a0000
 8003d60:	0f424000 	.word	0x0f424000
 8003d64:	07a12000 	.word	0x07a12000
 8003d68:	03d09000 	.word	0x03d09000
 8003d6c:	01e84800 	.word	0x01e84800
 8003d70:	f4240000 	.word	0xf4240000
 8003d74:	00155500 	.word	0x00155500
 8003d78:	000ccc00 	.word	0x000ccc00
 8003d7c:	000aaa00 	.word	0x000aaa00
 8003d80:	0001e848 	.word	0x0001e848
 8003d84:	007a1200 	.word	0x007a1200
 8003d88:	00516154 	.word	0x00516154
 8003d8c:	003d0900 	.word	0x003d0900
 8003d90:	0030d400 	.word	0x0030d400
 8003d94:	0028b0aa 	.word	0x0028b0aa
 8003d98:	001e8480 	.word	0x001e8480
 8003d9c:	000f4240 	.word	0x000f4240
 8003da0:	0007a120 	.word	0x0007a120
 8003da4:	0003d090 	.word	0x0003d090
 8003da8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dac:	e7be      	b.n	8003d2c <UART_SetConfig+0x61c>
 8003dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003db2:	e7bb      	b.n	8003d2c <UART_SetConfig+0x61c>
 8003db4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003db8:	e7b8      	b.n	8003d2c <UART_SetConfig+0x61c>
 8003dba:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8003dbe:	e7b5      	b.n	8003d2c <UART_SetConfig+0x61c>
 8003dc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dc4:	e7b2      	b.n	8003d2c <UART_SetConfig+0x61c>
 8003dc6:	f641 1398 	movw	r3, #6552	; 0x1998
 8003dca:	e7af      	b.n	8003d2c <UART_SetConfig+0x61c>
 8003dcc:	f241 5354 	movw	r3, #5460	; 0x1554
 8003dd0:	e7ac      	b.n	8003d2c <UART_SetConfig+0x61c>
 8003dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dd6:	e7a9      	b.n	8003d2c <UART_SetConfig+0x61c>
 8003dd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ddc:	e7a6      	b.n	8003d2c <UART_SetConfig+0x61c>
 8003dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003de2:	e7a3      	b.n	8003d2c <UART_SetConfig+0x61c>
 8003de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003de8:	e7a0      	b.n	8003d2c <UART_SetConfig+0x61c>
        ret = HAL_ERROR;
 8003dea:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	e743      	b.n	8003c78 <UART_SetConfig+0x568>
    switch (clocksource)
 8003df0:	2b07      	cmp	r3, #7
 8003df2:	f200 80cd 	bhi.w	8003f90 <UART_SetConfig+0x880>
 8003df6:	e8df f003 	tbb	[pc, r3]
 8003dfa:	2a04      	.short	0x2a04
 8003dfc:	cbcb6dcb 	.word	0xcbcb6dcb
 8003e00:	86cb      	.short	0x86cb
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e02:	f7ff f85b 	bl	8002ebc <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d066      	beq.n	8003eda <UART_SetConfig+0x7ca>
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d066      	beq.n	8003ede <UART_SetConfig+0x7ce>
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d066      	beq.n	8003ee2 <UART_SetConfig+0x7d2>
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d066      	beq.n	8003ee6 <UART_SetConfig+0x7d6>
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d066      	beq.n	8003eea <UART_SetConfig+0x7da>
 8003e1c:	2b05      	cmp	r3, #5
 8003e1e:	d066      	beq.n	8003eee <UART_SetConfig+0x7de>
 8003e20:	2b06      	cmp	r3, #6
 8003e22:	d066      	beq.n	8003ef2 <UART_SetConfig+0x7e2>
 8003e24:	2b07      	cmp	r3, #7
 8003e26:	d066      	beq.n	8003ef6 <UART_SetConfig+0x7e6>
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d066      	beq.n	8003efa <UART_SetConfig+0x7ea>
 8003e2c:	2b09      	cmp	r3, #9
 8003e2e:	d066      	beq.n	8003efe <UART_SetConfig+0x7ee>
 8003e30:	2b0a      	cmp	r3, #10
 8003e32:	d066      	beq.n	8003f02 <UART_SetConfig+0x7f2>
 8003e34:	2b0b      	cmp	r3, #11
 8003e36:	bf14      	ite	ne
 8003e38:	2301      	movne	r3, #1
 8003e3a:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003e3e:	6862      	ldr	r2, [r4, #4]
 8003e40:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e44:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8003e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e4c:	e020      	b.n	8003e90 <UART_SetConfig+0x780>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e4e:	b358      	cbz	r0, 8003ea8 <UART_SetConfig+0x798>
 8003e50:	2801      	cmp	r0, #1
 8003e52:	d02b      	beq.n	8003eac <UART_SetConfig+0x79c>
 8003e54:	2802      	cmp	r0, #2
 8003e56:	d02b      	beq.n	8003eb0 <UART_SetConfig+0x7a0>
 8003e58:	2803      	cmp	r0, #3
 8003e5a:	d02b      	beq.n	8003eb4 <UART_SetConfig+0x7a4>
 8003e5c:	2804      	cmp	r0, #4
 8003e5e:	d02b      	beq.n	8003eb8 <UART_SetConfig+0x7a8>
 8003e60:	2805      	cmp	r0, #5
 8003e62:	d02b      	beq.n	8003ebc <UART_SetConfig+0x7ac>
 8003e64:	2806      	cmp	r0, #6
 8003e66:	d02b      	beq.n	8003ec0 <UART_SetConfig+0x7b0>
 8003e68:	2807      	cmp	r0, #7
 8003e6a:	d02b      	beq.n	8003ec4 <UART_SetConfig+0x7b4>
 8003e6c:	2808      	cmp	r0, #8
 8003e6e:	d02b      	beq.n	8003ec8 <UART_SetConfig+0x7b8>
 8003e70:	2809      	cmp	r0, #9
 8003e72:	d02b      	beq.n	8003ecc <UART_SetConfig+0x7bc>
 8003e74:	280a      	cmp	r0, #10
 8003e76:	d02b      	beq.n	8003ed0 <UART_SetConfig+0x7c0>
 8003e78:	4b47      	ldr	r3, [pc, #284]	; (8003f98 <UART_SetConfig+0x888>)
 8003e7a:	f24f 4224 	movw	r2, #62500	; 0xf424
 8003e7e:	280b      	cmp	r0, #11
 8003e80:	bf14      	ite	ne
 8003e82:	4618      	movne	r0, r3
 8003e84:	4610      	moveq	r0, r2
 8003e86:	6863      	ldr	r3, [r4, #4]
 8003e88:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003e8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e90:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e92:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e94:	f1a3 0010 	sub.w	r0, r3, #16
 8003e98:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003e9c:	4288      	cmp	r0, r1
 8003e9e:	f63f ac90 	bhi.w	80037c2 <UART_SetConfig+0xb2>
      huart->Instance->BRR = usartdiv;
 8003ea2:	6821      	ldr	r1, [r4, #0]
 8003ea4:	60cb      	str	r3, [r1, #12]
 8003ea6:	e48d      	b.n	80037c4 <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ea8:	483b      	ldr	r0, [pc, #236]	; (8003f98 <UART_SetConfig+0x888>)
 8003eaa:	e7ec      	b.n	8003e86 <UART_SetConfig+0x776>
 8003eac:	483b      	ldr	r0, [pc, #236]	; (8003f9c <UART_SetConfig+0x88c>)
 8003eae:	e7ea      	b.n	8003e86 <UART_SetConfig+0x776>
 8003eb0:	483b      	ldr	r0, [pc, #236]	; (8003fa0 <UART_SetConfig+0x890>)
 8003eb2:	e7e8      	b.n	8003e86 <UART_SetConfig+0x776>
 8003eb4:	483b      	ldr	r0, [pc, #236]	; (8003fa4 <UART_SetConfig+0x894>)
 8003eb6:	e7e6      	b.n	8003e86 <UART_SetConfig+0x776>
 8003eb8:	483b      	ldr	r0, [pc, #236]	; (8003fa8 <UART_SetConfig+0x898>)
 8003eba:	e7e4      	b.n	8003e86 <UART_SetConfig+0x776>
 8003ebc:	483b      	ldr	r0, [pc, #236]	; (8003fac <UART_SetConfig+0x89c>)
 8003ebe:	e7e2      	b.n	8003e86 <UART_SetConfig+0x776>
 8003ec0:	483b      	ldr	r0, [pc, #236]	; (8003fb0 <UART_SetConfig+0x8a0>)
 8003ec2:	e7e0      	b.n	8003e86 <UART_SetConfig+0x776>
 8003ec4:	483b      	ldr	r0, [pc, #236]	; (8003fb4 <UART_SetConfig+0x8a4>)
 8003ec6:	e7de      	b.n	8003e86 <UART_SetConfig+0x776>
 8003ec8:	483b      	ldr	r0, [pc, #236]	; (8003fb8 <UART_SetConfig+0x8a8>)
 8003eca:	e7dc      	b.n	8003e86 <UART_SetConfig+0x776>
 8003ecc:	483b      	ldr	r0, [pc, #236]	; (8003fbc <UART_SetConfig+0x8ac>)
 8003ece:	e7da      	b.n	8003e86 <UART_SetConfig+0x776>
 8003ed0:	483b      	ldr	r0, [pc, #236]	; (8003fc0 <UART_SetConfig+0x8b0>)
 8003ed2:	e7d8      	b.n	8003e86 <UART_SetConfig+0x776>
        pclk = HAL_RCC_GetSysClockFreq();
 8003ed4:	f7fe ff82 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 8003ed8:	e795      	b.n	8003e06 <UART_SetConfig+0x6f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003eda:	2301      	movs	r3, #1
 8003edc:	e7af      	b.n	8003e3e <UART_SetConfig+0x72e>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e7ad      	b.n	8003e3e <UART_SetConfig+0x72e>
 8003ee2:	2304      	movs	r3, #4
 8003ee4:	e7ab      	b.n	8003e3e <UART_SetConfig+0x72e>
 8003ee6:	2306      	movs	r3, #6
 8003ee8:	e7a9      	b.n	8003e3e <UART_SetConfig+0x72e>
 8003eea:	2308      	movs	r3, #8
 8003eec:	e7a7      	b.n	8003e3e <UART_SetConfig+0x72e>
 8003eee:	230a      	movs	r3, #10
 8003ef0:	e7a5      	b.n	8003e3e <UART_SetConfig+0x72e>
 8003ef2:	230c      	movs	r3, #12
 8003ef4:	e7a3      	b.n	8003e3e <UART_SetConfig+0x72e>
 8003ef6:	2310      	movs	r3, #16
 8003ef8:	e7a1      	b.n	8003e3e <UART_SetConfig+0x72e>
 8003efa:	2320      	movs	r3, #32
 8003efc:	e79f      	b.n	8003e3e <UART_SetConfig+0x72e>
 8003efe:	2340      	movs	r3, #64	; 0x40
 8003f00:	e79d      	b.n	8003e3e <UART_SetConfig+0x72e>
 8003f02:	2380      	movs	r3, #128	; 0x80
 8003f04:	e79b      	b.n	8003e3e <UART_SetConfig+0x72e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f06:	b1f0      	cbz	r0, 8003f46 <UART_SetConfig+0x836>
 8003f08:	2801      	cmp	r0, #1
 8003f0a:	d01f      	beq.n	8003f4c <UART_SetConfig+0x83c>
 8003f0c:	2802      	cmp	r0, #2
 8003f0e:	d020      	beq.n	8003f52 <UART_SetConfig+0x842>
 8003f10:	2803      	cmp	r0, #3
 8003f12:	d021      	beq.n	8003f58 <UART_SetConfig+0x848>
 8003f14:	2804      	cmp	r0, #4
 8003f16:	d022      	beq.n	8003f5e <UART_SetConfig+0x84e>
 8003f18:	2805      	cmp	r0, #5
 8003f1a:	d023      	beq.n	8003f64 <UART_SetConfig+0x854>
 8003f1c:	2806      	cmp	r0, #6
 8003f1e:	d024      	beq.n	8003f6a <UART_SetConfig+0x85a>
 8003f20:	2807      	cmp	r0, #7
 8003f22:	d025      	beq.n	8003f70 <UART_SetConfig+0x860>
 8003f24:	2808      	cmp	r0, #8
 8003f26:	d026      	beq.n	8003f76 <UART_SetConfig+0x866>
 8003f28:	2809      	cmp	r0, #9
 8003f2a:	d027      	beq.n	8003f7c <UART_SetConfig+0x86c>
 8003f2c:	280a      	cmp	r0, #10
 8003f2e:	d028      	beq.n	8003f82 <UART_SetConfig+0x872>
 8003f30:	280b      	cmp	r0, #11
 8003f32:	bf14      	ite	ne
 8003f34:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 8003f38:	2380      	moveq	r3, #128	; 0x80
 8003f3a:	6860      	ldr	r0, [r4, #4]
 8003f3c:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8003f40:	fbb3 f3f0 	udiv	r3, r3, r0
 8003f44:	e7a4      	b.n	8003e90 <UART_SetConfig+0x780>
 8003f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f4a:	e7f6      	b.n	8003f3a <UART_SetConfig+0x82a>
 8003f4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f50:	e7f3      	b.n	8003f3a <UART_SetConfig+0x82a>
 8003f52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f56:	e7f0      	b.n	8003f3a <UART_SetConfig+0x82a>
 8003f58:	f241 5355 	movw	r3, #5461	; 0x1555
 8003f5c:	e7ed      	b.n	8003f3a <UART_SetConfig+0x82a>
 8003f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f62:	e7ea      	b.n	8003f3a <UART_SetConfig+0x82a>
 8003f64:	f640 43cc 	movw	r3, #3276	; 0xccc
 8003f68:	e7e7      	b.n	8003f3a <UART_SetConfig+0x82a>
 8003f6a:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8003f6e:	e7e4      	b.n	8003f3a <UART_SetConfig+0x82a>
 8003f70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f74:	e7e1      	b.n	8003f3a <UART_SetConfig+0x82a>
 8003f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f7a:	e7de      	b.n	8003f3a <UART_SetConfig+0x82a>
 8003f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f80:	e7db      	b.n	8003f3a <UART_SetConfig+0x82a>
 8003f82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f86:	e7d8      	b.n	8003f3a <UART_SetConfig+0x82a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f88:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003f8c:	f43f af2d 	beq.w	8003dea <UART_SetConfig+0x6da>
        ret = HAL_ERROR;
 8003f90:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	e77e      	b.n	8003e94 <UART_SetConfig+0x784>
 8003f96:	bf00      	nop
 8003f98:	00f42400 	.word	0x00f42400
 8003f9c:	007a1200 	.word	0x007a1200
 8003fa0:	003d0900 	.word	0x003d0900
 8003fa4:	0028b0aa 	.word	0x0028b0aa
 8003fa8:	001e8480 	.word	0x001e8480
 8003fac:	00186a00 	.word	0x00186a00
 8003fb0:	00145855 	.word	0x00145855
 8003fb4:	000f4240 	.word	0x000f4240
 8003fb8:	0007a120 	.word	0x0007a120
 8003fbc:	0003d090 	.word	0x0003d090
 8003fc0:	0001e848 	.word	0x0001e848

08003fc4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fc4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003fc6:	07da      	lsls	r2, r3, #31
{
 8003fc8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fca:	d506      	bpl.n	8003fda <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fcc:	6801      	ldr	r1, [r0, #0]
 8003fce:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003fd0:	684a      	ldr	r2, [r1, #4]
 8003fd2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003fd6:	4322      	orrs	r2, r4
 8003fd8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fda:	079c      	lsls	r4, r3, #30
 8003fdc:	d506      	bpl.n	8003fec <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fde:	6801      	ldr	r1, [r0, #0]
 8003fe0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003fe2:	684a      	ldr	r2, [r1, #4]
 8003fe4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003fe8:	4322      	orrs	r2, r4
 8003fea:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fec:	0759      	lsls	r1, r3, #29
 8003fee:	d506      	bpl.n	8003ffe <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ff0:	6801      	ldr	r1, [r0, #0]
 8003ff2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003ff4:	684a      	ldr	r2, [r1, #4]
 8003ff6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ffa:	4322      	orrs	r2, r4
 8003ffc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ffe:	071a      	lsls	r2, r3, #28
 8004000:	d506      	bpl.n	8004010 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004002:	6801      	ldr	r1, [r0, #0]
 8004004:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004006:	684a      	ldr	r2, [r1, #4]
 8004008:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800400c:	4322      	orrs	r2, r4
 800400e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004010:	06dc      	lsls	r4, r3, #27
 8004012:	d506      	bpl.n	8004022 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004014:	6801      	ldr	r1, [r0, #0]
 8004016:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004018:	688a      	ldr	r2, [r1, #8]
 800401a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800401e:	4322      	orrs	r2, r4
 8004020:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004022:	0699      	lsls	r1, r3, #26
 8004024:	d506      	bpl.n	8004034 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004026:	6801      	ldr	r1, [r0, #0]
 8004028:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800402a:	688a      	ldr	r2, [r1, #8]
 800402c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004030:	4322      	orrs	r2, r4
 8004032:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004034:	065a      	lsls	r2, r3, #25
 8004036:	d50f      	bpl.n	8004058 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004038:	6801      	ldr	r1, [r0, #0]
 800403a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800403c:	684a      	ldr	r2, [r1, #4]
 800403e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004042:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004044:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004048:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800404a:	d105      	bne.n	8004058 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800404c:	684a      	ldr	r2, [r1, #4]
 800404e:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8004050:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004054:	4322      	orrs	r2, r4
 8004056:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004058:	061b      	lsls	r3, r3, #24
 800405a:	d506      	bpl.n	800406a <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800405c:	6802      	ldr	r2, [r0, #0]
 800405e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004060:	6853      	ldr	r3, [r2, #4]
 8004062:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004066:	430b      	orrs	r3, r1
 8004068:	6053      	str	r3, [r2, #4]
}
 800406a:	bd10      	pop	{r4, pc}

0800406c <UART_WaitOnFlagUntilTimeout>:
{
 800406c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004070:	9d06      	ldr	r5, [sp, #24]
 8004072:	4604      	mov	r4, r0
 8004074:	460f      	mov	r7, r1
 8004076:	4616      	mov	r6, r2
 8004078:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800407a:	6821      	ldr	r1, [r4, #0]
 800407c:	69ca      	ldr	r2, [r1, #28]
 800407e:	ea37 0302 	bics.w	r3, r7, r2
 8004082:	bf0c      	ite	eq
 8004084:	2201      	moveq	r2, #1
 8004086:	2200      	movne	r2, #0
 8004088:	42b2      	cmp	r2, r6
 800408a:	d001      	beq.n	8004090 <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800408c:	2000      	movs	r0, #0
 800408e:	e01a      	b.n	80040c6 <UART_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8004090:	1c68      	adds	r0, r5, #1
 8004092:	d0f3      	beq.n	800407c <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004094:	f7fd fe74 	bl	8001d80 <HAL_GetTick>
 8004098:	eba0 0008 	sub.w	r0, r0, r8
 800409c:	42a8      	cmp	r0, r5
 800409e:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80040a0:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a2:	d800      	bhi.n	80040a6 <UART_WaitOnFlagUntilTimeout+0x3a>
 80040a4:	b98d      	cbnz	r5, 80040ca <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80040a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040aa:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ac:	6883      	ldr	r3, [r0, #8]
 80040ae:	f023 0301 	bic.w	r3, r3, #1
 80040b2:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 80040b4:	2320      	movs	r3, #32
 80040b6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80040ba:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 80040be:	2300      	movs	r3, #0
 80040c0:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 80040c4:	2003      	movs	r0, #3
}
 80040c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040ca:	075a      	lsls	r2, r3, #29
 80040cc:	d5d5      	bpl.n	800407a <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040ce:	69c3      	ldr	r3, [r0, #28]
 80040d0:	051b      	lsls	r3, r3, #20
 80040d2:	d5d2      	bpl.n	800407a <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040d8:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80040da:	6803      	ldr	r3, [r0, #0]
 80040dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040e0:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e2:	6883      	ldr	r3, [r0, #8]
 80040e4:	f023 0301 	bic.w	r3, r3, #1
 80040e8:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 80040ea:	2320      	movs	r3, #32
 80040ec:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80040f0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040f4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80040f8:	e7e1      	b.n	80040be <UART_WaitOnFlagUntilTimeout+0x52>

080040fa <UART_CheckIdleState>:
{
 80040fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80040fc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040fe:	2600      	movs	r6, #0
 8004100:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 8004104:	f7fd fe3c 	bl	8001d80 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004108:	6823      	ldr	r3, [r4, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800410e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004110:	d417      	bmi.n	8004142 <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	075b      	lsls	r3, r3, #29
 8004118:	d50a      	bpl.n	8004130 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800411a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	2200      	movs	r2, #0
 8004122:	462b      	mov	r3, r5
 8004124:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004128:	4620      	mov	r0, r4
 800412a:	f7ff ff9f 	bl	800406c <UART_WaitOnFlagUntilTimeout>
 800412e:	b9a0      	cbnz	r0, 800415a <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8004130:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004132:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004134:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8004138:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800413c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 8004140:	e00c      	b.n	800415c <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004142:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	4632      	mov	r2, r6
 800414a:	4603      	mov	r3, r0
 800414c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004150:	4620      	mov	r0, r4
 8004152:	f7ff ff8b 	bl	800406c <UART_WaitOnFlagUntilTimeout>
 8004156:	2800      	cmp	r0, #0
 8004158:	d0db      	beq.n	8004112 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800415a:	2003      	movs	r0, #3
}
 800415c:	b002      	add	sp, #8
 800415e:	bd70      	pop	{r4, r5, r6, pc}

08004160 <HAL_UART_Init>:
{
 8004160:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004162:	4604      	mov	r4, r0
 8004164:	b350      	cbz	r0, 80041bc <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004166:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800416a:	b91b      	cbnz	r3, 8004174 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800416c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8004170:	f7fd f808 	bl	8001184 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004174:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004176:	2324      	movs	r3, #36	; 0x24
 8004178:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 800417c:	6813      	ldr	r3, [r2, #0]
 800417e:	f023 0301 	bic.w	r3, r3, #1
 8004182:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004184:	4620      	mov	r0, r4
 8004186:	f7ff fac3 	bl	8003710 <UART_SetConfig>
 800418a:	2801      	cmp	r0, #1
 800418c:	d016      	beq.n	80041bc <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800418e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004190:	b113      	cbz	r3, 8004198 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8004192:	4620      	mov	r0, r4
 8004194:	f7ff ff16 	bl	8003fc4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041a8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80041b0:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80041b2:	601a      	str	r2, [r3, #0]
}
 80041b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80041b8:	f7ff bf9f 	b.w	80040fa <UART_CheckIdleState>
}
 80041bc:	2001      	movs	r0, #1
 80041be:	bd10      	pop	{r4, pc}

080041c0 <UARTEx_SetNbDataToProcess>:
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80041c0:	4a18      	ldr	r2, [pc, #96]	; (8004224 <UARTEx_SetNbDataToProcess+0x64>)
{
 80041c2:	b084      	sub	sp, #16
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80041c4:	f240 1307 	movw	r3, #263	; 0x107
 80041c8:	e9cd 2300 	strd	r2, r3, [sp]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80041cc:	4b16      	ldr	r3, [pc, #88]	; (8004228 <UARTEx_SetNbDataToProcess+0x68>)
 80041ce:	9302      	str	r3, [sp, #8]
 80041d0:	f1a3 2303 	sub.w	r3, r3, #50332416	; 0x3000300
 80041d4:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80041d8:	9303      	str	r3, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80041da:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80041dc:	b923      	cbnz	r3, 80041e8 <UARTEx_SetNbDataToProcess+0x28>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 80041de:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80041e2:	6683      	str	r3, [r0, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80041e4:	b004      	add	sp, #16
 80041e6:	4770      	bx	lr
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80041e8:	6802      	ldr	r2, [r0, #0]
 80041ea:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80041ec:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80041ee:	aa04      	add	r2, sp, #16
 80041f0:	eb02 7151 	add.w	r1, r2, r1, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80041f4:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80041f8:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 80041fc:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8004200:	00d2      	lsls	r2, r2, #3
 8004202:	fb92 f2f1 	sdiv	r2, r2, r1
 8004206:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800420a:	aa04      	add	r2, sp, #16
 800420c:	4413      	add	r3, r2
 800420e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8004212:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8004216:	00d2      	lsls	r2, r2, #3
 8004218:	fb92 f3f3 	sdiv	r3, r2, r3
 800421c:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 8004220:	e7e0      	b.n	80041e4 <UARTEx_SetNbDataToProcess+0x24>
 8004222:	bf00      	nop
 8004224:	03010101 	.word	0x03010101
 8004228:	04020408 	.word	0x04020408

0800422c <HAL_UARTEx_WakeupCallback>:
}
 800422c:	4770      	bx	lr

0800422e <HAL_UARTEx_RxFifoFullCallback>:
 800422e:	4770      	bx	lr

08004230 <HAL_UARTEx_TxFifoEmptyCallback>:
 8004230:	4770      	bx	lr

08004232 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8004232:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004236:	2b01      	cmp	r3, #1
 8004238:	d014      	beq.n	8004264 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800423a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800423c:	2324      	movs	r3, #36	; 0x24
 800423e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004242:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8004244:	6813      	ldr	r3, [r2, #0]
 8004246:	f023 0301 	bic.w	r3, r3, #1
 800424a:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800424c:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004250:	2300      	movs	r3, #0
 8004252:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004254:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004256:	2220      	movs	r2, #32
 8004258:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800425c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 8004260:	4618      	mov	r0, r3
 8004262:	4770      	bx	lr
  __HAL_LOCK(huart);
 8004264:	2002      	movs	r0, #2
}
 8004266:	4770      	bx	lr

08004268 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8004268:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800426a:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800426e:	2b01      	cmp	r3, #1
{
 8004270:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8004272:	d01b      	beq.n	80042ac <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8004274:	2301      	movs	r3, #1
 8004276:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800427a:	2324      	movs	r3, #36	; 0x24
 800427c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004280:	6803      	ldr	r3, [r0, #0]
 8004282:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	f022 0201 	bic.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8004292:	4311      	orrs	r1, r2
 8004294:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004296:	f7ff ff93 	bl	80041c0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800429a:	6803      	ldr	r3, [r0, #0]
 800429c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800429e:	2320      	movs	r3, #32
 80042a0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80042a4:	2000      	movs	r0, #0
 80042a6:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80042aa:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80042ac:	2002      	movs	r0, #2
 80042ae:	e7fc      	b.n	80042aa <HAL_UARTEx_SetTxFifoThreshold+0x42>

080042b0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80042b0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80042b2:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80042b6:	2b01      	cmp	r3, #1
{
 80042b8:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80042ba:	d01b      	beq.n	80042f4 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 80042bc:	2301      	movs	r3, #1
 80042be:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80042c2:	2324      	movs	r3, #36	; 0x24
 80042c4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042c8:	6803      	ldr	r3, [r0, #0]
 80042ca:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	f022 0201 	bic.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 80042da:	4311      	orrs	r1, r2
 80042dc:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80042de:	f7ff ff6f 	bl	80041c0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042e2:	6803      	ldr	r3, [r0, #0]
 80042e4:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80042e6:	2320      	movs	r3, #32
 80042e8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80042ec:	2000      	movs	r0, #0
 80042ee:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80042f2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80042f4:	2002      	movs	r0, #2
 80042f6:	e7fc      	b.n	80042f2 <HAL_UARTEx_SetRxFifoThreshold+0x42>

080042f8 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable(void)
{
 80042f8:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 80042fa:	2400      	movs	r4, #0
{
 80042fc:	b088      	sub	sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 80042fe:	2218      	movs	r2, #24
 8004300:	4621      	mov	r1, r4
 8004302:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8004304:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004308:	f000 fb2e 	bl	8004968 <Osal_MemSet>
  rq.ogf = 0x3f;
 800430c:	4b08      	ldr	r3, [pc, #32]	; (8004330 <aci_gap_set_non_discoverable+0x38>)
 800430e:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x081;
  rq.rparam = &status;
 8004310:	f10d 0307 	add.w	r3, sp, #7
 8004314:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 8004316:	4621      	mov	r1, r4
  rq.rlen = 1;
 8004318:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800431a:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800431c:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800431e:	f000 fa9b 	bl	8004858 <hci_send_req>
 8004322:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004324:	bfac      	ite	ge
 8004326:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800432a:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800432c:	b008      	add	sp, #32
 800432e:	bd10      	pop	{r4, pc}
 8004330:	0081003f 	.word	0x0081003f

08004334 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 8004334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004338:	b0cb      	sub	sp, #300	; 0x12c
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
  tBleStatus status = 0;
 800433a:	f04f 0900 	mov.w	r9, #0
{
 800433e:	f89d 415c 	ldrb.w	r4, [sp, #348]	; 0x15c
 8004342:	9400      	str	r4, [sp, #0]
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8004344:	9d00      	ldr	r5, [sp, #0]
{
 8004346:	f89d 6154 	ldrb.w	r6, [sp, #340]	; 0x154
  int index_input = 0;
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 800434a:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800434e:	f105 0709 	add.w	r7, r5, #9
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8004352:	ac0a      	add	r4, sp, #40	; 0x28
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8004354:	4437      	add	r7, r6
 8004356:	19e5      	adds	r5, r4, r7
  index_input += 1;
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8004358:	f8ad 1029 	strh.w	r1, [sp, #41]	; 0x29
  index_input += 2;
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800435c:	f8ad 202b 	strh.w	r2, [sp, #43]	; 0x2b
  index_input += 2;
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8004360:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  index_input += 1;
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 8004364:	4632      	mov	r2, r6
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8004366:	f89d 3150 	ldrb.w	r3, [sp, #336]	; 0x150
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 800436a:	9956      	ldr	r1, [sp, #344]	; 0x158
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800436c:	9501      	str	r5, [sp, #4]
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 800436e:	a80c      	add	r0, sp, #48	; 0x30
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8004370:	f106 0a08 	add.w	sl, r6, #8
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8004374:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8004378:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
  tBleStatus status = 0;
 800437c:	f88d 900f 	strb.w	r9, [sp, #15]
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 8004380:	f000 faf0 	bl	8004964 <Osal_MemCpy>
    index_input += Local_Name_Length;
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8004384:	9b00      	ldr	r3, [sp, #0]
 8004386:	f804 300a 	strb.w	r3, [r4, sl]
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800438a:	eb04 0b0a 	add.w	fp, r4, sl
    }
    index_input += 1;
    Osal_MemCpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length);
 800438e:	461a      	mov	r2, r3
 8004390:	9958      	ldr	r1, [sp, #352]	; 0x160
 8004392:	f10b 0001 	add.w	r0, fp, #1
 8004396:	f000 fae5 	bl	8004964 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800439a:	9b00      	ldr	r3, [sp, #0]
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
    }
    index_input += 2;
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800439c:	9a01      	ldr	r2, [sp, #4]
    index_input += 1;
 800439e:	3609      	adds	r6, #9
    index_input += Service_Uuid_length;
 80043a0:	4433      	add	r3, r6
 80043a2:	461d      	mov	r5, r3
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 80043a4:	f8bd 3164 	ldrh.w	r3, [sp, #356]	; 0x164
 80043a8:	53e3      	strh	r3, [r4, r7]
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 80043aa:	f8bd 3168 	ldrh.w	r3, [sp, #360]	; 0x168
 80043ae:	8053      	strh	r3, [r2, #2]
    }
    index_input += 2;
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 80043b0:	4649      	mov	r1, r9
 80043b2:	2218      	movs	r2, #24
 80043b4:	a804      	add	r0, sp, #16
 80043b6:	f000 fad7 	bl	8004968 <Osal_MemSet>
  rq.ogf = 0x3f;
 80043ba:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <aci_gap_set_discoverable+0xb4>)
 80043bc:	9304      	str	r3, [sp, #16]
  tBleStatus status = 0;
 80043be:	f10d 080f 	add.w	r8, sp, #15
  rq.ocf = 0x083;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 80043c2:	2301      	movs	r3, #1
    index_input += 2;
 80043c4:	3504      	adds	r5, #4
  if (hci_send_req(&rq, FALSE) < 0)
 80043c6:	4649      	mov	r1, r9
 80043c8:	a804      	add	r0, sp, #16
  rq.cparam = cmd_buffer;
 80043ca:	9406      	str	r4, [sp, #24]
  rq.rparam = &status;
 80043cc:	e9cd 5807 	strd	r5, r8, [sp, #28]
  rq.rlen = 1;
 80043d0:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 80043d2:	f000 fa41 	bl	8004858 <hci_send_req>
 80043d6:	4548      	cmp	r0, r9
    return BLE_STATUS_TIMEOUT;
  if (status) 
 80043d8:	bfac      	ite	ge
 80043da:	f898 0000 	ldrbge.w	r0, [r8]
    return BLE_STATUS_TIMEOUT;
 80043de:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 80043e0:	b04b      	add	sp, #300	; 0x12c
 80043e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043e6:	bf00      	nop
 80043e8:	0083003f 	.word	0x0083003f

080043ec <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 80043ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043f0:	b0c8      	sub	sp, #288	; 0x120
 80043f2:	4680      	mov	r8, r0
 80043f4:	460f      	mov	r7, r1
 80043f6:	4616      	mov	r6, r2
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 80043f8:	2100      	movs	r1, #0
 80043fa:	2207      	movs	r2, #7
 80043fc:	4668      	mov	r0, sp
{
 80043fe:	461d      	mov	r5, r3
  Osal_MemSet(&resp, 0, sizeof(resp));
 8004400:	f000 fab2 	bl	8004968 <Osal_MemSet>
  index_input += 1;
  cp0->privacy_enabled = htob(privacy_enabled, 1);
  index_input += 1;
  cp0->device_name_char_len = htob(device_name_char_len, 1);
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004404:	2218      	movs	r2, #24
 8004406:	2100      	movs	r1, #0
 8004408:	a802      	add	r0, sp, #8
  cp0->Role = htob(Role, 1);
 800440a:	f88d 8020 	strb.w	r8, [sp, #32]
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800440e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8004412:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004416:	f000 faa7 	bl	8004968 <Osal_MemSet>
  rq.ogf = 0x3f;
 800441a:	4b14      	ldr	r3, [pc, #80]	; (800446c <aci_gap_init+0x80>)
 800441c:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x08a;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800441e:	2303      	movs	r3, #3
 8004420:	9305      	str	r3, [sp, #20]
  cp0->Role = htob(Role, 1);
 8004422:	ac08      	add	r4, sp, #32
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 8004424:	2307      	movs	r3, #7
  if (hci_send_req(&rq, FALSE) < 0)
 8004426:	2100      	movs	r1, #0
 8004428:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 800442a:	9404      	str	r4, [sp, #16]
  rq.rparam = &resp;
 800442c:	f8cd d018 	str.w	sp, [sp, #24]
  rq.rlen = sizeof(resp);
 8004430:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004432:	f000 fa11 	bl	8004858 <hci_send_req>
 8004436:	2800      	cmp	r0, #0
 8004438:	db16      	blt.n	8004468 <aci_gap_init+0x7c>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) 
 800443a:	f89d 0000 	ldrb.w	r0, [sp]
 800443e:	b980      	cbnz	r0, 8004462 <aci_gap_init+0x76>
  {
    return resp.Status;
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8004440:	9a00      	ldr	r2, [sp, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8004442:	f89d 3003 	ldrb.w	r3, [sp, #3]
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8004446:	f3c2 220f 	ubfx	r2, r2, #8, #16
 800444a:	802a      	strh	r2, [r5, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800444c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004450:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004454:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 8004456:	8013      	strh	r3, [r2, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8004458:	9b01      	ldr	r3, [sp, #4]
 800445a:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 800445c:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8004460:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 8004462:	b048      	add	sp, #288	; 0x120
 8004464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 8004468:	20ff      	movs	r0, #255	; 0xff
 800446a:	e7fa      	b.n	8004462 <aci_gap_init+0x76>
 800446c:	008a003f 	.word	0x008a003f

08004470 <aci_gap_update_adv_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 8004470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004472:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004474:	2600      	movs	r6, #0
  int index_input = 0;
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 8004476:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 800447a:	4602      	mov	r2, r0
{
 800447c:	4604      	mov	r4, r0
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 800447e:	f10d 0021 	add.w	r0, sp, #33	; 0x21
  tBleStatus status = 0;
 8004482:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 8004486:	f000 fa6d 	bl	8004964 <Osal_MemCpy>
  index_input += AdvDataLen;
  Osal_MemSet(&rq, 0, sizeof(rq));
 800448a:	2218      	movs	r2, #24
 800448c:	4631      	mov	r1, r6
 800448e:	a802      	add	r0, sp, #8
 8004490:	f000 fa6a 	bl	8004968 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004494:	4b0a      	ldr	r3, [pc, #40]	; (80044c0 <aci_gap_update_adv_data+0x50>)
 8004496:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 8004498:	f10d 0507 	add.w	r5, sp, #7
  rq.ocf = 0x08e;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800449c:	2301      	movs	r3, #1
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 800449e:	af08      	add	r7, sp, #32
  index_input += AdvDataLen;
 80044a0:	3401      	adds	r4, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80044a2:	4631      	mov	r1, r6
 80044a4:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 80044a6:	9704      	str	r7, [sp, #16]
  rq.rparam = &status;
 80044a8:	e9cd 4505 	strd	r4, r5, [sp, #20]
  rq.rlen = 1;
 80044ac:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80044ae:	f000 f9d3 	bl	8004858 <hci_send_req>
 80044b2:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 80044b4:	bfac      	ite	ge
 80044b6:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 80044b8:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 80044ba:	b049      	add	sp, #292	; 0x124
 80044bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044be:	bf00      	nop
 80044c0:	008e003f 	.word	0x008e003f

080044c4 <aci_gap_delete_ad_type>:

tBleStatus aci_gap_delete_ad_type(uint8_t ADType)
{
 80044c4:	b570      	push	{r4, r5, r6, lr}
 80044c6:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_delete_ad_type_cp0 *cp0 = (aci_gap_delete_ad_type_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80044c8:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->ADType = htob(ADType, 1);
 80044ca:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 80044ce:	2218      	movs	r2, #24
 80044d0:	4629      	mov	r1, r5
 80044d2:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 80044d4:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 80044d8:	f000 fa46 	bl	8004968 <Osal_MemSet>
  rq.ogf = 0x3f;
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <aci_gap_delete_ad_type+0x40>)
 80044de:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 80044e0:	f10d 0407 	add.w	r4, sp, #7
  rq.ocf = 0x08f;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 80044e4:	2301      	movs	r3, #1
  cp0->ADType = htob(ADType, 1);
 80044e6:	ae08      	add	r6, sp, #32
  rq.rparam = &status;
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 80044e8:	4629      	mov	r1, r5
 80044ea:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 80044ec:	9604      	str	r6, [sp, #16]
  rq.rparam = &status;
 80044ee:	e9cd 3405 	strd	r3, r4, [sp, #20]
  rq.rlen = 1;
 80044f2:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80044f4:	f000 f9b0 	bl	8004858 <hci_send_req>
 80044f8:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) 
 80044fa:	bfac      	ite	ge
 80044fc:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 80044fe:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004500:	b048      	add	sp, #288	; 0x120
 8004502:	bd70      	pop	{r4, r5, r6, pc}
 8004504:	008f003f 	.word	0x008f003f

08004508 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 8004508:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 800450a:	2400      	movs	r4, #0
{
 800450c:	b088      	sub	sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 800450e:	2218      	movs	r2, #24
 8004510:	4621      	mov	r1, r4
 8004512:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8004514:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004518:	f000 fa26 	bl	8004968 <Osal_MemSet>
  rq.ogf = 0x3f;
 800451c:	4b08      	ldr	r3, [pc, #32]	; (8004540 <aci_gatt_init+0x38>)
 800451e:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x101;
  rq.rparam = &status;
 8004520:	f10d 0307 	add.w	r3, sp, #7
 8004524:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 8004526:	4621      	mov	r1, r4
  rq.rlen = 1;
 8004528:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800452a:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800452c:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800452e:	f000 f993 	bl	8004858 <hci_send_req>
 8004532:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004534:	bfac      	ite	ge
 8004536:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800453a:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800453c:	b008      	add	sp, #32
 800453e:	bd10      	pop	{r4, pc}
 8004540:	0101003f 	.word	0x0101003f

08004544 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8004544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004546:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004548:	2700      	movs	r7, #0
  int index_input = 0;
  cp0->Service_Handle = htob(Service_Handle, 2);
 800454a:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  cp0->Char_Handle = htob(Char_Handle, 2);
 800454e:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  index_input += 2;
  cp0->Val_Offset = htob(Val_Offset, 1);
 8004552:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  index_input += 1;
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
  index_input += 1;
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 8004556:	994e      	ldr	r1, [sp, #312]	; 0x138
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8004558:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 800455c:	461a      	mov	r2, r3
 800455e:	f10d 0026 	add.w	r0, sp, #38	; 0x26
{
 8004562:	461c      	mov	r4, r3
  tBleStatus status = 0;
 8004564:	f88d 7007 	strb.w	r7, [sp, #7]
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 8004568:	f000 f9fc 	bl	8004964 <Osal_MemCpy>
  index_input += Char_Value_Length;
  Osal_MemSet(&rq, 0, sizeof(rq));
 800456c:	2218      	movs	r2, #24
 800456e:	4639      	mov	r1, r7
 8004570:	a802      	add	r0, sp, #8
 8004572:	f000 f9f9 	bl	8004968 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004576:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <aci_gatt_update_char_value+0x5c>)
 8004578:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 800457a:	f10d 0607 	add.w	r6, sp, #7
  rq.ocf = 0x106;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800457e:	2301      	movs	r3, #1
  cp0->Service_Handle = htob(Service_Handle, 2);
 8004580:	ad08      	add	r5, sp, #32
  index_input += Char_Value_Length;
 8004582:	3406      	adds	r4, #6
  if (hci_send_req(&rq, FALSE) < 0)
 8004584:	4639      	mov	r1, r7
 8004586:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004588:	9504      	str	r5, [sp, #16]
  rq.rparam = &status;
 800458a:	e9cd 4605 	strd	r4, r6, [sp, #20]
  rq.rlen = 1;
 800458e:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004590:	f000 f962 	bl	8004858 <hci_send_req>
 8004594:	42b8      	cmp	r0, r7
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004596:	bfac      	ite	ge
 8004598:	7830      	ldrbge	r0, [r6, #0]
    return BLE_STATUS_TIMEOUT;
 800459a:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800459c:	b049      	add	sp, #292	; 0x124
 800459e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045a0:	0106003f 	.word	0x0106003f

080045a4 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 80045a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045a6:	b0c9      	sub	sp, #292	; 0x124
 80045a8:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80045aa:	2600      	movs	r6, #0
{
 80045ac:	4611      	mov	r1, r2
  int index_input = 0;
  cp0->Offset = htob(Offset, 1);
 80045ae:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  cp0->Length = htob(Length, 1);
  index_input += 1;
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 80045b2:	4622      	mov	r2, r4
 80045b4:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  cp0->Length = htob(Length, 1);
 80045b8:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  tBleStatus status = 0;
 80045bc:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 80045c0:	f000 f9d0 	bl	8004964 <Osal_MemCpy>
  index_input += Length;
  Osal_MemSet(&rq, 0, sizeof(rq));
 80045c4:	2218      	movs	r2, #24
 80045c6:	4631      	mov	r1, r6
 80045c8:	a802      	add	r0, sp, #8
 80045ca:	f000 f9cd 	bl	8004968 <Osal_MemSet>
  rq.ogf = 0x3f;
 80045ce:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <aci_hal_write_config_data+0x54>)
 80045d0:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 80045d2:	f10d 0507 	add.w	r5, sp, #7
  rq.ocf = 0x00c;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 80045d6:	2301      	movs	r3, #1
  cp0->Offset = htob(Offset, 1);
 80045d8:	af08      	add	r7, sp, #32
  index_input += Length;
 80045da:	3402      	adds	r4, #2
  if (hci_send_req(&rq, FALSE) < 0)
 80045dc:	4631      	mov	r1, r6
 80045de:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 80045e0:	9704      	str	r7, [sp, #16]
  rq.rparam = &status;
 80045e2:	e9cd 4505 	strd	r4, r5, [sp, #20]
  rq.rlen = 1;
 80045e6:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80045e8:	f000 f936 	bl	8004858 <hci_send_req>
 80045ec:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 80045ee:	bfac      	ite	ge
 80045f0:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 80045f2:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 80045f4:	b049      	add	sp, #292	; 0x124
 80045f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045f8:	000c003f 	.word	0x000c003f

080045fc <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 80045fc:	b570      	push	{r4, r5, r6, lr}
 80045fe:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004600:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->En_High_Power = htob(En_High_Power, 1);
 8004602:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  cp0->PA_Level = htob(PA_Level, 1);
 8004606:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 800460a:	2218      	movs	r2, #24
 800460c:	4629      	mov	r1, r5
 800460e:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8004610:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004614:	f000 f9a8 	bl	8004968 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004618:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <aci_hal_set_tx_power_level+0x48>)
 800461a:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 800461c:	f10d 0407 	add.w	r4, sp, #7
  rq.ocf = 0x00f;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8004620:	2302      	movs	r3, #2
  rq.rparam = &status;
 8004622:	e9cd 3405 	strd	r3, r4, [sp, #20]
  cp0->En_High_Power = htob(En_High_Power, 1);
 8004626:	ae08      	add	r6, sp, #32
  rq.rlen = 1;
 8004628:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800462a:	4629      	mov	r1, r5
 800462c:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 800462e:	9604      	str	r6, [sp, #16]
  rq.rlen = 1;
 8004630:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004632:	f000 f911 	bl	8004858 <hci_send_req>
 8004636:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004638:	bfac      	ite	ge
 800463a:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 800463c:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800463e:	b048      	add	sp, #288	; 0x120
 8004640:	bd70      	pop	{r4, r5, r6, pc}
 8004642:	bf00      	nop
 8004644:	000f003f 	.word	0x000f003f

08004648 <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 8004648:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 800464a:	2400      	movs	r4, #0
{
 800464c:	b088      	sub	sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 800464e:	2218      	movs	r2, #24
 8004650:	4621      	mov	r1, r4
 8004652:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8004654:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004658:	f000 f986 	bl	8004968 <Osal_MemSet>
  rq.ogf = 0x03;
 800465c:	f04f 1303 	mov.w	r3, #196611	; 0x30003
 8004660:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x003;
  rq.rparam = &status;
 8004662:	f10d 0307 	add.w	r3, sp, #7
 8004666:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 8004668:	4621      	mov	r1, r4
  rq.rlen = 1;
 800466a:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800466c:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800466e:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004670:	f000 f8f2 	bl	8004858 <hci_send_req>
 8004674:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004676:	bfac      	ite	ge
 8004678:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800467c:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800467e:	b008      	add	sp, #32
 8004680:	bd10      	pop	{r4, pc}
	...

08004684 <hci_le_set_scan_response_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 8004684:	b570      	push	{r4, r5, r6, lr}
 8004686:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004688:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 800468a:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  Osal_MemCpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 800468e:	221f      	movs	r2, #31
 8004690:	f10d 0021 	add.w	r0, sp, #33	; 0x21
  tBleStatus status = 0;
 8004694:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemCpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 8004698:	f000 f964 	bl	8004964 <Osal_MemCpy>
  index_input += 31;
  Osal_MemSet(&rq, 0, sizeof(rq));
 800469c:	2218      	movs	r2, #24
 800469e:	4629      	mov	r1, r5
 80046a0:	a802      	add	r0, sp, #8
 80046a2:	f000 f961 	bl	8004968 <Osal_MemSet>
  rq.ogf = 0x08;
 80046a6:	4b0a      	ldr	r3, [pc, #40]	; (80046d0 <hci_le_set_scan_response_data+0x4c>)
 80046a8:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 80046aa:	f10d 0407 	add.w	r4, sp, #7
  rq.ocf = 0x009;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 80046ae:	2320      	movs	r3, #32
  rq.rparam = &status;
 80046b0:	e9cd 3405 	strd	r3, r4, [sp, #20]
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 80046b4:	ae08      	add	r6, sp, #32
  rq.rlen = 1;
 80046b6:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80046b8:	4629      	mov	r1, r5
 80046ba:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 80046bc:	9604      	str	r6, [sp, #16]
  rq.rlen = 1;
 80046be:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80046c0:	f000 f8ca 	bl	8004858 <hci_send_req>
 80046c4:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) 
 80046c6:	bfac      	ite	ge
 80046c8:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 80046ca:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 80046cc:	b048      	add	sp, #288	; 0x120
 80046ce:	bd70      	pop	{r4, r5, r6, pc}
 80046d0:	00090008 	.word	0x00090008

080046d4 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 80046d4:	b513      	push	{r0, r1, r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046d6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80046da:	b672      	cpsid	i

  BACKUP_PRIMASK();

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 80046dc:	480c      	ldr	r0, [pc, #48]	; (8004710 <DbgTrace_TxCpltCallback+0x3c>)
 80046de:	f10d 0106 	add.w	r1, sp, #6
 80046e2:	f000 fb74 	bl	8004dce <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 80046e6:	f10d 0106 	add.w	r1, sp, #6
 80046ea:	4809      	ldr	r0, [pc, #36]	; (8004710 <DbgTrace_TxCpltCallback+0x3c>)
 80046ec:	f000 fbd0 	bl	8004e90 <CircularQueue_Sense>


  if ( buf != NULL) 
 80046f0:	b140      	cbz	r0, 8004704 <DbgTrace_TxCpltCallback+0x30>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f2:	f384 8810 	msr	PRIMASK, r4
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 80046f6:	4a07      	ldr	r2, [pc, #28]	; (8004714 <DbgTrace_TxCpltCallback+0x40>)
 80046f8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80046fc:	f7fb ffde 	bl	80006bc <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8004700:	b002      	add	sp, #8
 8004702:	bd10      	pop	{r4, pc}
    DbgTracePeripheralReady = SET;
 8004704:	4b04      	ldr	r3, [pc, #16]	; (8004718 <DbgTrace_TxCpltCallback+0x44>)
 8004706:	2201      	movs	r2, #1
 8004708:	701a      	strb	r2, [r3, #0]
 800470a:	f384 8810 	msr	PRIMASK, r4
}
 800470e:	e7f7      	b.n	8004700 <DbgTrace_TxCpltCallback+0x2c>
 8004710:	200001c0 	.word	0x200001c0
 8004714:	080046d5 	.word	0x080046d5
 8004718:	2000002c 	.word	0x2000002c

0800471c <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800471c:	b507      	push	{r0, r1, r2, lr}
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800471e:	f7fb ffcb 	bl	80006b8 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8004722:	2302      	movs	r3, #2
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800472a:	2300      	movs	r3, #0
 800472c:	4903      	ldr	r1, [pc, #12]	; (800473c <DbgTraceInit+0x20>)
 800472e:	4804      	ldr	r0, [pc, #16]	; (8004740 <DbgTraceInit+0x24>)
 8004730:	f000 fa34 	bl	8004b9c <CircularQueue_Init>
#endif 
#endif
  return;
}
 8004734:	b003      	add	sp, #12
 8004736:	f85d fb04 	ldr.w	pc, [sp], #4
 800473a:	bf00      	nop
 800473c:	200001e0 	.word	0x200001e0
 8004740:	200001c0 	.word	0x200001c0

08004744 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8004744:	b570      	push	{r4, r5, r6, lr}
 8004746:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004748:	f3ef 8510 	mrs	r5, PRIMASK
  uint8_t* buffer;

  BACKUP_PRIMASK();

  /* Ignore flushes */
  if ( handle == -1 )
 800474c:	1c43      	adds	r3, r0, #1
 800474e:	d01b      	beq.n	8004788 <DbgTraceWrite+0x44>
  {
    chars_written = ( size_t ) 0;
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8004750:	3801      	subs	r0, #1
 8004752:	2801      	cmp	r0, #1
 8004754:	d81a      	bhi.n	800478c <DbgTraceWrite+0x48>
  {
    chars_written = ( size_t ) - 1;
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8004756:	b192      	cbz	r2, 800477e <DbgTraceWrite+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8004758:	b672      	cpsid	i
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800475a:	b296      	uxth	r6, r2
 800475c:	2301      	movs	r3, #1
 800475e:	4632      	mov	r2, r6
 8004760:	480c      	ldr	r0, [pc, #48]	; (8004794 <DbgTraceWrite+0x50>)
 8004762:	f000 fa2f 	bl	8004bc4 <CircularQueue_Add>
    if (buffer && DbgTracePeripheralReady)
 8004766:	b160      	cbz	r0, 8004782 <DbgTraceWrite+0x3e>
 8004768:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <DbgTraceWrite+0x54>)
 800476a:	781a      	ldrb	r2, [r3, #0]
 800476c:	b14a      	cbz	r2, 8004782 <DbgTraceWrite+0x3e>
    {
      DbgTracePeripheralReady = RESET;
 800476e:	2200      	movs	r2, #0
 8004770:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004772:	f385 8810 	msr	PRIMASK, r5
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8004776:	4a09      	ldr	r2, [pc, #36]	; (800479c <DbgTraceWrite+0x58>)
 8004778:	4631      	mov	r1, r6
 800477a:	f7fb ff9f 	bl	80006bc <DbgOutputTraces>
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
}
 800477e:	4620      	mov	r0, r4
 8004780:	bd70      	pop	{r4, r5, r6, pc}
 8004782:	f385 8810 	msr	PRIMASK, r5
 8004786:	e7fa      	b.n	800477e <DbgTraceWrite+0x3a>
    chars_written = ( size_t ) 0;
 8004788:	2400      	movs	r4, #0
 800478a:	e7f8      	b.n	800477e <DbgTraceWrite+0x3a>
    chars_written = ( size_t ) - 1;
 800478c:	f04f 34ff 	mov.w	r4, #4294967295
 8004790:	e7f5      	b.n	800477e <DbgTraceWrite+0x3a>
 8004792:	bf00      	nop
 8004794:	200001c0 	.word	0x200001c0
 8004798:	2000002c 	.word	0x2000002c
 800479c:	080046d5 	.word	0x080046d5

080047a0 <_write>:
  return ( DbgTraceWrite(handle, buf, bufSize) );
 80047a0:	f7ff bfd0 	b.w	8004744 <DbgTraceWrite>

080047a4 <hci_init>:
static void OutputRspTrace(TL_EvtPacket_t *hcievt);
static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer);

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80047a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80047a6:	4c0f      	ldr	r4, [pc, #60]	; (80047e4 <hci_init+0x40>)
 80047a8:	684b      	ldr	r3, [r1, #4]
  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);

  pCmdBuffer = p_cmdbuffer;
 80047aa:	4e0f      	ldr	r6, [pc, #60]	; (80047e8 <hci_init+0x44>)
  hciContext.UserEvtRx = UserEvtRx;
 80047ac:	6220      	str	r0, [r4, #32]
{
 80047ae:	460d      	mov	r5, r1
  hci_register_io_bus (&hciContext.io);
 80047b0:	1d20      	adds	r0, r4, #4
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80047b2:	6023      	str	r3, [r4, #0]
  hci_register_io_bus (&hciContext.io);
 80047b4:	f000 f8cc 	bl	8004950 <hci_register_io_bus>
  LST_init_head (&HciCmdEventQueue);
 80047b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80047bc:	682d      	ldr	r5, [r5, #0]
  LST_init_head (&HciCmdEventQueue);
 80047be:	f000 f9b1 	bl	8004b24 <LST_init_head>
  pCmdBuffer = p_cmdbuffer;
 80047c2:	4630      	mov	r0, r6
 80047c4:	f840 5b04 	str.w	r5, [r0], #4

  LST_init_head (&HciAsynchEventQueue);
 80047c8:	f000 f9ac 	bl	8004b24 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80047cc:	2301      	movs	r3, #1
 80047ce:	7333      	strb	r3, [r6, #12]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80047d0:	6863      	ldr	r3, [r4, #4]
 80047d2:	b12b      	cbz	r3, 80047e0 <hci_init+0x3c>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80047d4:	a804      	add	r0, sp, #16
 80047d6:	4a05      	ldr	r2, [pc, #20]	; (80047ec <hci_init+0x48>)
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80047d8:	9502      	str	r5, [sp, #8]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80047da:	f840 2d10 	str.w	r2, [r0, #-16]!
    hciContext.io.Init(&Conf);
 80047de:	4798      	blx	r3
}
 80047e0:	b004      	add	sp, #16
 80047e2:	bd70      	pop	{r4, r5, r6, pc}
 80047e4:	200011e0 	.word	0x200011e0
 80047e8:	20000138 	.word	0x20000138
 80047ec:	0800491d 	.word	0x0800491d

080047f0 <hci_user_evt_proc>:
{
 80047f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80047f2:	4c16      	ldr	r4, [pc, #88]	; (800484c <hci_user_evt_proc+0x5c>)
 80047f4:	1d20      	adds	r0, r4, #4
 80047f6:	f000 f998 	bl	8004b2a <LST_is_empty>
 80047fa:	b9c0      	cbnz	r0, 800482e <hci_user_evt_proc+0x3e>
 80047fc:	7b23      	ldrb	r3, [r4, #12]
 80047fe:	b1b3      	cbz	r3, 800482e <hci_user_evt_proc+0x3e>
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8004800:	a901      	add	r1, sp, #4
 8004802:	1d20      	adds	r0, r4, #4
 8004804:	f000 f9be 	bl	8004b84 <LST_remove_head>
    if (hciContext.UserEvtRx != NULL)
 8004808:	4b11      	ldr	r3, [pc, #68]	; (8004850 <hci_user_evt_proc+0x60>)
    OutputEvtTrace(phcievtbuffer);
 800480a:	9901      	ldr	r1, [sp, #4]
    if (hciContext.UserEvtRx != NULL)
 800480c:	6a1a      	ldr	r2, [r3, #32]
 800480e:	2301      	movs	r3, #1
 8004810:	b132      	cbz	r2, 8004820 <hci_user_evt_proc+0x30>
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8004812:	a804      	add	r0, sp, #16
      UserEvtRxParam.pckt = phcievtbuffer;
 8004814:	9103      	str	r1, [sp, #12]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8004816:	f800 3d08 	strb.w	r3, [r0, #-8]!
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800481a:	4790      	blx	r2
      UserEventFlow = UserEvtRxParam.status;
 800481c:	f89d 3008 	ldrb.w	r3, [sp, #8]
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8004820:	7323      	strb	r3, [r4, #12]
    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8004822:	7b23      	ldrb	r3, [r4, #12]
 8004824:	9901      	ldr	r1, [sp, #4]
 8004826:	b16b      	cbz	r3, 8004844 <hci_user_evt_proc+0x54>
      TL_MM_EvtDone( phcievtbuffer );
 8004828:	4608      	mov	r0, r1
 800482a:	f000 fcc3 	bl	80051b4 <TL_MM_EvtDone>
  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800482e:	4809      	ldr	r0, [pc, #36]	; (8004854 <hci_user_evt_proc+0x64>)
 8004830:	f000 f97b 	bl	8004b2a <LST_is_empty>
 8004834:	b920      	cbnz	r0, 8004840 <hci_user_evt_proc+0x50>
 8004836:	7b23      	ldrb	r3, [r4, #12]
 8004838:	b113      	cbz	r3, 8004840 <hci_user_evt_proc+0x50>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800483a:	4806      	ldr	r0, [pc, #24]	; (8004854 <hci_user_evt_proc+0x64>)
 800483c:	f7fc fea4 	bl	8001588 <hci_notify_asynch_evt>
}
 8004840:	b004      	add	sp, #16
 8004842:	bd10      	pop	{r4, pc}
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8004844:	4803      	ldr	r0, [pc, #12]	; (8004854 <hci_user_evt_proc+0x64>)
 8004846:	f000 f97a 	bl	8004b3e <LST_insert_head>
 800484a:	e7f0      	b.n	800482e <hci_user_evt_proc+0x3e>
 800484c:	20000138 	.word	0x20000138
 8004850:	200011e0 	.word	0x200011e0
 8004854:	2000013c 	.word	0x2000013c

08004858 <hci_send_req>:
{
 8004858:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
  if(hcicmdstatus == HCI_TL_CmdBusy)
  {
    if(StatusNotCallBackFunction != 0)
 800485c:	4f2c      	ldr	r7, [pc, #176]	; (8004910 <hci_send_req+0xb8>)
 800485e:	683b      	ldr	r3, [r7, #0]
{
 8004860:	4605      	mov	r5, r0
    if(StatusNotCallBackFunction != 0)
 8004862:	b10b      	cbz	r3, 8004868 <hci_send_req+0x10>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8004864:	2000      	movs	r0, #0
 8004866:	4798      	blx	r3
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8004868:	886c      	ldrh	r4, [r5, #2]
 800486a:	882b      	ldrh	r3, [r5, #0]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800486c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8004918 <hci_send_req+0xc0>
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8004870:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004874:	ea44 2483 	orr.w	r4, r4, r3, lsl #10
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8004878:	4b26      	ldr	r3, [pc, #152]	; (8004914 <hci_send_req+0xbc>)
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800487a:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800487e:	6818      	ldr	r0, [r3, #0]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8004880:	b2a4      	uxth	r4, r4
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8004882:	72c2      	strb	r2, [r0, #11]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8004884:	f8a0 4009 	strh.w	r4, [r0, #9]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	300c      	adds	r0, #12
 800488c:	f000 fdfa 	bl	8005484 <memcpy>
  hciContext.io.Send(0,0);
 8004890:	2100      	movs	r1, #0
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	4608      	mov	r0, r1
 8004896:	4798      	blx	r3
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8004898:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800489c:	f7fc fe7b 	bl	8001596 <hci_cmd_resp_wait>
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80048a0:	f04f 0800 	mov.w	r8, #0
 80048a4:	4648      	mov	r0, r9
 80048a6:	f000 f940 	bl	8004b2a <LST_is_empty>
 80048aa:	b150      	cbz	r0, 80048c2 <hci_send_req+0x6a>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80048ac:	f1b8 0f00 	cmp.w	r8, #0
 80048b0:	d0f2      	beq.n	8004898 <hci_send_req+0x40>
    }
  }
  else
  {
    if(StatusNotCallBackFunction != 0)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	b10b      	cbz	r3, 80048ba <hci_send_req+0x62>
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80048b6:	2001      	movs	r0, #1
 80048b8:	4798      	blx	r3
}
 80048ba:	2000      	movs	r0, #0
 80048bc:	b003      	add	sp, #12
 80048be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80048c2:	a901      	add	r1, sp, #4
 80048c4:	4648      	mov	r0, r9
 80048c6:	f000 f95d 	bl	8004b84 <LST_remove_head>
      OutputRspTrace(pevtpacket);
 80048ca:	9e01      	ldr	r6, [sp, #4]
      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80048cc:	7a73      	ldrb	r3, [r6, #9]
 80048ce:	2b0f      	cmp	r3, #15
 80048d0:	d10c      	bne.n	80048ec <hci_send_req+0x94>
        if(pcommand_status_event->cmdcode == opcode)
 80048d2:	f8b6 300d 	ldrh.w	r3, [r6, #13]
 80048d6:	42a3      	cmp	r3, r4
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80048d8:	bf02      	ittt	eq
 80048da:	692b      	ldreq	r3, [r5, #16]
 80048dc:	7af2      	ldrbeq	r2, [r6, #11]
 80048de:	701a      	strbeq	r2, [r3, #0]
        if(pcommand_status_event->numcmd != 0)
 80048e0:	7b33      	ldrb	r3, [r6, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0de      	beq.n	80048a4 <hci_send_req+0x4c>
          local_cmd_status = HCI_TL_CmdAvailable;
 80048e6:	f04f 0801 	mov.w	r8, #1
 80048ea:	e7db      	b.n	80048a4 <hci_send_req+0x4c>
        if(pcommand_complete_event->cmdcode == opcode)
 80048ec:	89b3      	ldrh	r3, [r6, #12]
 80048ee:	42a3      	cmp	r3, r4
 80048f0:	d10c      	bne.n	800490c <hci_send_req+0xb4>
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80048f2:	7ab2      	ldrb	r2, [r6, #10]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80048f4:	696b      	ldr	r3, [r5, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80048f6:	6928      	ldr	r0, [r5, #16]
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80048f8:	3a03      	subs	r2, #3
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	429a      	cmp	r2, r3
 80048fe:	bfa8      	it	ge
 8004900:	461a      	movge	r2, r3
 8004902:	616a      	str	r2, [r5, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8004904:	f106 010e 	add.w	r1, r6, #14
 8004908:	f000 fdbc 	bl	8005484 <memcpy>
        if(pcommand_complete_event->numcmd != 0)
 800490c:	7af3      	ldrb	r3, [r6, #11]
 800490e:	e7e8      	b.n	80048e2 <hci_send_req+0x8a>
 8004910:	200011e0 	.word	0x200011e0
 8004914:	20000138 	.word	0x20000138
 8004918:	20001204 	.word	0x20001204

0800491c <TlEvtReceived>:

  return;
}

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800491c:	b508      	push	{r3, lr}
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800491e:	7a43      	ldrb	r3, [r0, #9]
 8004920:	3b0e      	subs	r3, #14
 8004922:	2b01      	cmp	r3, #1
{
 8004924:	4601      	mov	r1, r0
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8004926:	d806      	bhi.n	8004936 <TlEvtReceived+0x1a>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8004928:	4807      	ldr	r0, [pc, #28]	; (8004948 <TlEvtReceived+0x2c>)
 800492a:	f000 f914 	bl	8004b56 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800492e:	2000      	movs	r0, #0
 8004930:	f7fc fe2e 	bl	8001590 <hci_cmd_resp_release>
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
  }

  return;
}
 8004934:	bd08      	pop	{r3, pc}
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8004936:	4805      	ldr	r0, [pc, #20]	; (800494c <TlEvtReceived+0x30>)
 8004938:	f000 f90d 	bl	8004b56 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800493c:	4803      	ldr	r0, [pc, #12]	; (800494c <TlEvtReceived+0x30>)
}
 800493e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8004942:	f7fc be21 	b.w	8001588 <hci_notify_asynch_evt>
 8004946:	bf00      	nop
 8004948:	20001204 	.word	0x20001204
 800494c:	2000013c 	.word	0x2000013c

08004950 <hci_register_io_bus>:


void hci_register_io_bus(tHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8004950:	4b02      	ldr	r3, [pc, #8]	; (800495c <hci_register_io_bus+0xc>)
 8004952:	6003      	str	r3, [r0, #0]
  fops->Send    = TL_BLE_SendCmd;
 8004954:	4b02      	ldr	r3, [pc, #8]	; (8004960 <hci_register_io_bus+0x10>)
 8004956:	6103      	str	r3, [r0, #16]

  return;
}
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	08005059 	.word	0x08005059
 8004960:	08005099 	.word	0x08005099

08004964 <Osal_MemCpy>:
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
  return memcpy( dest, src, size ); 
 8004964:	f000 bd8e 	b.w	8005484 <memcpy>

08004968 <Osal_MemSet>:
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
  return memset( ptr, value, size );
 8004968:	f000 bd97 	b.w	800549a <memset>

0800496c <OTP_Read>:

uint8_t * OTP_Read( uint8_t id )
{
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <OTP_Read+0x18>)

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800496e:	4a06      	ldr	r2, [pc, #24]	; (8004988 <OTP_Read+0x1c>)
 8004970:	79d9      	ldrb	r1, [r3, #7]
 8004972:	4281      	cmp	r1, r0
 8004974:	d002      	beq.n	800497c <OTP_Read+0x10>
 8004976:	4293      	cmp	r3, r2
 8004978:	d102      	bne.n	8004980 <OTP_Read+0x14>
    p_id -= 8 ;
  }

  if((*( p_id + 7 )) != id)
  {
    p_id = 0 ;
 800497a:	2300      	movs	r3, #0
  }

  return p_id ;
}
 800497c:	4618      	mov	r0, r3
 800497e:	4770      	bx	lr
    p_id -= 8 ;
 8004980:	3b08      	subs	r3, #8
 8004982:	e7f5      	b.n	8004970 <OTP_Read+0x4>
 8004984:	1fff73f8 	.word	0x1fff73f8
 8004988:	1fff7000 	.word	0x1fff7000

0800498c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800498c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800498e:	f100 020c 	add.w	r2, r0, #12
 8004992:	466b      	mov	r3, sp
 8004994:	2121      	movs	r1, #33	; 0x21
 8004996:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800499a:	f000 f885 	bl	8004aa8 <shci_send>
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 800499e:	f89d 000e 	ldrb.w	r0, [sp, #14]
 80049a2:	b005      	add	sp, #20
 80049a4:	f85d fb04 	ldr.w	pc, [sp], #4

080049a8 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80049a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80049aa:	f100 020c 	add.w	r2, r0, #12
 80049ae:	466b      	mov	r3, sp
 80049b0:	210f      	movs	r1, #15
 80049b2:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80049b6:	f000 f877 	bl	8004aa8 <shci_send>
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 80049ba:	f89d 000e 	ldrb.w	r0, [sp, #14]
 80049be:	b005      	add	sp, #20
 80049c0:	f85d fb04 	ldr.w	pc, [sp], #4

080049c4 <TlUserEvtReceived>:

  return;
}

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80049c4:	b510      	push	{r4, lr}
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80049c6:	4c05      	ldr	r4, [pc, #20]	; (80049dc <TlUserEvtReceived+0x18>)
 80049c8:	4601      	mov	r1, r0
 80049ca:	4620      	mov	r0, r4
 80049cc:	f000 f8c3 	bl	8004b56 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80049d0:	4620      	mov	r0, r4

  return;
}
 80049d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80049d6:	f7fb bed8 	b.w	800078a <shci_notify_asynch_evt>
 80049da:	bf00      	nop
 80049dc:	2000016c 	.word	0x2000016c

080049e0 <Cmd_SetStatus.constprop.4>:
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80049e0:	4b03      	ldr	r3, [pc, #12]	; (80049f0 <Cmd_SetStatus.constprop.4+0x10>)
 80049e2:	2001      	movs	r0, #1
 80049e4:	7218      	strb	r0, [r3, #8]
    if(StatusNotCallBackFunction != 0)
 80049e6:	4b03      	ldr	r3, [pc, #12]	; (80049f4 <Cmd_SetStatus.constprop.4+0x14>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	b103      	cbz	r3, 80049ee <Cmd_SetStatus.constprop.4+0xe>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80049ec:	4718      	bx	r3
}
 80049ee:	4770      	bx	lr
 80049f0:	2000016c 	.word	0x2000016c
 80049f4:	20001210 	.word	0x20001210

080049f8 <shci_init>:
{
 80049f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80049fa:	4c0e      	ldr	r4, [pc, #56]	; (8004a34 <shci_init+0x3c>)
 80049fc:	684b      	ldr	r3, [r1, #4]
  shciContext.UserEvtRx = UserEvtRx;
 80049fe:	6220      	str	r0, [r4, #32]
{
 8004a00:	460d      	mov	r5, r1
  shci_register_io_bus (&shciContext.io);
 8004a02:	1d20      	adds	r0, r4, #4
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8004a04:	6023      	str	r3, [r4, #0]
  shci_register_io_bus (&shciContext.io);
 8004a06:	f000 f883 	bl	8004b10 <shci_register_io_bus>
  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8004a0a:	682e      	ldr	r6, [r5, #0]
  pCmdBuffer = p_cmdbuffer;
 8004a0c:	4d0a      	ldr	r5, [pc, #40]	; (8004a38 <shci_init+0x40>)
  LST_init_head (&SHciAsynchEventQueue);
 8004a0e:	4628      	mov	r0, r5
  pCmdBuffer = p_cmdbuffer;
 8004a10:	60ee      	str	r6, [r5, #12]
  LST_init_head (&SHciAsynchEventQueue);
 8004a12:	f000 f887 	bl	8004b24 <LST_init_head>
  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8004a16:	f7ff ffe3 	bl	80049e0 <Cmd_SetStatus.constprop.4>
  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	742b      	strb	r3, [r5, #16]
  if (shciContext.io.Init)
 8004a1e:	6863      	ldr	r3, [r4, #4]
 8004a20:	b133      	cbz	r3, 8004a30 <shci_init+0x38>
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8004a22:	4a06      	ldr	r2, [pc, #24]	; (8004a3c <shci_init+0x44>)
 8004a24:	9201      	str	r2, [sp, #4]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8004a26:	4a06      	ldr	r2, [pc, #24]	; (8004a40 <shci_init+0x48>)
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8004a28:	9603      	str	r6, [sp, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8004a2a:	9202      	str	r2, [sp, #8]
    shciContext.io.Init(&Conf);
 8004a2c:	a801      	add	r0, sp, #4
 8004a2e:	4798      	blx	r3
}
 8004a30:	b004      	add	sp, #16
 8004a32:	bd70      	pop	{r4, r5, r6, pc}
 8004a34:	20001210 	.word	0x20001210
 8004a38:	2000016c 	.word	0x2000016c
 8004a3c:	08004b05 	.word	0x08004b05
 8004a40:	080049c5 	.word	0x080049c5

08004a44 <shci_user_evt_proc>:
{
 8004a44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8004a46:	4c16      	ldr	r4, [pc, #88]	; (8004aa0 <shci_user_evt_proc+0x5c>)
 8004a48:	4620      	mov	r0, r4
 8004a4a:	f000 f86e 	bl	8004b2a <LST_is_empty>
 8004a4e:	b9c0      	cbnz	r0, 8004a82 <shci_user_evt_proc+0x3e>
 8004a50:	7c23      	ldrb	r3, [r4, #16]
 8004a52:	b1b3      	cbz	r3, 8004a82 <shci_user_evt_proc+0x3e>
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8004a54:	a901      	add	r1, sp, #4
 8004a56:	4620      	mov	r0, r4
 8004a58:	f000 f894 	bl	8004b84 <LST_remove_head>
    if (shciContext.UserEvtRx != NULL)
 8004a5c:	4b11      	ldr	r3, [pc, #68]	; (8004aa4 <shci_user_evt_proc+0x60>)
    OutputEvtTrace(phcievtbuffer);
 8004a5e:	9901      	ldr	r1, [sp, #4]
    if (shciContext.UserEvtRx != NULL)
 8004a60:	6a1a      	ldr	r2, [r3, #32]
 8004a62:	2301      	movs	r3, #1
 8004a64:	b132      	cbz	r2, 8004a74 <shci_user_evt_proc+0x30>
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8004a66:	a804      	add	r0, sp, #16
      UserEvtRxParam.pckt = phcievtbuffer;
 8004a68:	9103      	str	r1, [sp, #12]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8004a6a:	f800 3d08 	strb.w	r3, [r0, #-8]!
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8004a6e:	4790      	blx	r2
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8004a70:	f89d 3008 	ldrb.w	r3, [sp, #8]
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8004a74:	7423      	strb	r3, [r4, #16]
    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8004a76:	7c23      	ldrb	r3, [r4, #16]
 8004a78:	9901      	ldr	r1, [sp, #4]
 8004a7a:	b16b      	cbz	r3, 8004a98 <shci_user_evt_proc+0x54>
      TL_MM_EvtDone( phcievtbuffer );
 8004a7c:	4608      	mov	r0, r1
 8004a7e:	f000 fb99 	bl	80051b4 <TL_MM_EvtDone>
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8004a82:	4807      	ldr	r0, [pc, #28]	; (8004aa0 <shci_user_evt_proc+0x5c>)
 8004a84:	f000 f851 	bl	8004b2a <LST_is_empty>
 8004a88:	b920      	cbnz	r0, 8004a94 <shci_user_evt_proc+0x50>
 8004a8a:	7c23      	ldrb	r3, [r4, #16]
 8004a8c:	b113      	cbz	r3, 8004a94 <shci_user_evt_proc+0x50>
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8004a8e:	4804      	ldr	r0, [pc, #16]	; (8004aa0 <shci_user_evt_proc+0x5c>)
 8004a90:	f7fb fe7b 	bl	800078a <shci_notify_asynch_evt>
}
 8004a94:	b004      	add	sp, #16
 8004a96:	bd10      	pop	{r4, pc}
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8004a98:	4801      	ldr	r0, [pc, #4]	; (8004aa0 <shci_user_evt_proc+0x5c>)
 8004a9a:	f000 f850 	bl	8004b3e <LST_insert_head>
 8004a9e:	e7f0      	b.n	8004a82 <shci_user_evt_proc+0x3e>
 8004aa0:	2000016c 	.word	0x2000016c
 8004aa4:	20001210 	.word	0x20001210

08004aa8 <shci_send>:
{
 8004aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(StatusNotCallBackFunction != 0)
 8004aac:	4c13      	ldr	r4, [pc, #76]	; (8004afc <shci_send+0x54>)
{
 8004aae:	4698      	mov	r8, r3
    if(StatusNotCallBackFunction != 0)
 8004ab0:	6823      	ldr	r3, [r4, #0]
{
 8004ab2:	4681      	mov	r9, r0
 8004ab4:	460f      	mov	r7, r1
 8004ab6:	4692      	mov	sl, r2
    if(StatusNotCallBackFunction != 0)
 8004ab8:	b10b      	cbz	r3, 8004abe <shci_send+0x16>
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8004aba:	2000      	movs	r0, #0
 8004abc:	4798      	blx	r3
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8004abe:	4d10      	ldr	r5, [pc, #64]	; (8004b00 <shci_send+0x58>)
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8004ac0:	68e8      	ldr	r0, [r5, #12]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8004ac2:	463a      	mov	r2, r7
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8004ac4:	2600      	movs	r6, #0
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8004ac6:	f8a0 9009 	strh.w	r9, [r0, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8004aca:	72c7      	strb	r7, [r0, #11]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8004acc:	4651      	mov	r1, sl
 8004ace:	300c      	adds	r0, #12
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8004ad0:	722e      	strb	r6, [r5, #8]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8004ad2:	f000 fcd7 	bl	8005484 <memcpy>
  shciContext.io.Send(0,0);
 8004ad6:	6963      	ldr	r3, [r4, #20]
 8004ad8:	4631      	mov	r1, r6
 8004ada:	4630      	mov	r0, r6
 8004adc:	4798      	blx	r3
  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8004ade:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8004ae2:	f7fb fe59 	bl	8000798 <shci_cmd_resp_wait>
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8004ae6:	68e9      	ldr	r1, [r5, #12]
 8004ae8:	788a      	ldrb	r2, [r1, #2]
 8004aea:	f108 0008 	add.w	r0, r8, #8
 8004aee:	3203      	adds	r2, #3
 8004af0:	f000 fcc8 	bl	8005484 <memcpy>
}
 8004af4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8004af8:	f7ff bf72 	b.w	80049e0 <Cmd_SetStatus.constprop.4>
 8004afc:	20001210 	.word	0x20001210
 8004b00:	2000016c 	.word	0x2000016c

08004b04 <TlCmdEvtReceived>:
{
 8004b04:	b508      	push	{r3, lr}
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8004b06:	2000      	movs	r0, #0
 8004b08:	f7fb fe43 	bl	8000792 <shci_cmd_resp_release>
}
 8004b0c:	bd08      	pop	{r3, pc}
	...

08004b10 <shci_register_io_bus>:


void shci_register_io_bus(tSHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8004b10:	4b02      	ldr	r3, [pc, #8]	; (8004b1c <shci_register_io_bus+0xc>)
 8004b12:	6003      	str	r3, [r0, #0]
  fops->Send    = TL_SYS_SendCmd;
 8004b14:	4b02      	ldr	r3, [pc, #8]	; (8004b20 <shci_register_io_bus+0x10>)
 8004b16:	6103      	str	r3, [r0, #16]

  return;
}
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	080050e9 	.word	0x080050e9
 8004b20:	0800511d 	.word	0x0800511d

08004b24 <LST_init_head>:
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
  listHead->next = listHead;
  listHead->prev = listHead;
 8004b24:	e9c0 0000 	strd	r0, r0, [r0]
}
 8004b28:	4770      	bx	lr

08004b2a <LST_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b2a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004b2e:	b672      	cpsid	i
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8004b30:	6803      	ldr	r3, [r0, #0]
  {
    return_value = TRUE;
 8004b32:	1a1b      	subs	r3, r3, r0
 8004b34:	4258      	negs	r0, r3
 8004b36:	4158      	adcs	r0, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b38:	f382 8810 	msr	PRIMASK, r2
    return_value = FALSE;
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
}
 8004b3c:	4770      	bx	lr

08004b3e <LST_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b3e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004b42:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8004b44:	6802      	ldr	r2, [r0, #0]
  node->prev = listHead;
 8004b46:	e9c1 2000 	strd	r2, r0, [r1]
  listHead->next = node;
 8004b4a:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 8004b4c:	680a      	ldr	r2, [r1, #0]
 8004b4e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b50:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8004b54:	4770      	bx	lr

08004b56 <LST_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b56:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004b5a:	b672      	cpsid	i

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
  node->prev = listHead->prev;
 8004b5c:	6842      	ldr	r2, [r0, #4]
 8004b5e:	604a      	str	r2, [r1, #4]
  node->next = listHead;
 8004b60:	6008      	str	r0, [r1, #0]
  listHead->prev = node;
 8004b62:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8004b64:	684a      	ldr	r2, [r1, #4]
 8004b66:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b68:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8004b6c:	4770      	bx	lr

08004b6e <LST_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b6e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004b72:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8004b74:	e9d0 1300 	ldrd	r1, r3, [r0]
 8004b78:	6019      	str	r1, [r3, #0]
  (node->next)->prev = node->prev;
 8004b7a:	6801      	ldr	r1, [r0, #0]
 8004b7c:	604b      	str	r3, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b7e:	f382 8810 	msr	PRIMASK, r2

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8004b82:	4770      	bx	lr

08004b84 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8004b84:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b86:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004b8a:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8004b8c:	6803      	ldr	r3, [r0, #0]
 8004b8e:	600b      	str	r3, [r1, #0]
  LST_remove_node (listHead->next);
 8004b90:	6800      	ldr	r0, [r0, #0]
 8004b92:	f7ff ffec 	bl	8004b6e <LST_remove_node>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b96:	f384 8810 	msr	PRIMASK, r4

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8004b9a:	bd10      	pop	{r4, pc}

08004b9c <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8004b9c:	b510      	push	{r4, lr}
 8004b9e:	f89d 4008 	ldrb.w	r4, [sp, #8]
  q->qBuff = queueBuffer;
 8004ba2:	6001      	str	r1, [r0, #0]
  q->first = 0;
 8004ba4:	2100      	movs	r1, #0
  q->last = 0; /* queueSize-1; */
 8004ba6:	e9c0 1103 	strd	r1, r1, [r0, #12]
  q->byteCount = 0;
  q->elementCount = 0;
 8004baa:	e9c0 1105 	strd	r1, r1, [r0, #20]
  q->queueMaxSize = queueSize;
 8004bae:	6042      	str	r2, [r0, #4]
  q->elementSize = elementSize;
 8004bb0:	8103      	strh	r3, [r0, #8]
  q->optionFlags = optionFlags;
 8004bb2:	7704      	strb	r4, [r0, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8004bb4:	f014 0002 	ands.w	r0, r4, #2
 8004bb8:	d003      	beq.n	8004bc2 <CircularQueue_Init+0x26>
 8004bba:	1a58      	subs	r0, r3, r1
 8004bbc:	bf18      	it	ne
 8004bbe:	2001      	movne	r0, #1
 8004bc0:	4240      	negs	r0, r0
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
  }
  return 0;
}
 8004bc2:	bd10      	pop	{r4, pc}

08004bc4 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8004bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8004bc8:	8905      	ldrh	r5, [r0, #8]
{
 8004bca:	4604      	mov	r4, r0
 8004bcc:	468b      	mov	fp, r1
 8004bce:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 8004bd2:	b085      	sub	sp, #20
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8004bd4:	2d00      	cmp	r5, #0
{
 8004bd6:	9302      	str	r3, [sp, #8]
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8004bd8:	bf14      	ite	ne
 8004bda:	f04f 0800 	movne.w	r8, #0
 8004bde:	f04f 0802 	moveq.w	r8, #2
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8004be2:	2900      	cmp	r1, #0
 8004be4:	d033      	beq.n	8004c4e <CircularQueue_Add+0x8a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8004be6:	2d00      	cmp	r5, #0
 8004be8:	d134      	bne.n	8004c54 <CircularQueue_Add+0x90>
 8004bea:	6866      	ldr	r6, [r4, #4]
 8004bec:	6825      	ldr	r5, [r4, #0]
 8004bee:	1c43      	adds	r3, r0, #1
 8004bf0:	42b3      	cmp	r3, r6
 8004bf2:	bf28      	it	cs
 8004bf4:	1b9b      	subcs	r3, r3, r6
 8004bf6:	5c2f      	ldrb	r7, [r5, r0]
 8004bf8:	5ceb      	ldrb	r3, [r5, r3]
 8004bfa:	3702      	adds	r7, #2
 8004bfc:	eb07 2703 	add.w	r7, r7, r3, lsl #8
 8004c00:	b2bf      	uxth	r7, r7
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8004c02:	4615      	mov	r5, r2
  {
    elementSize = q->elementSize;
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8004c04:	68e3      	ldr	r3, [r4, #12]
 8004c06:	4283      	cmp	r3, r0
 8004c08:	bf9e      	ittt	ls
 8004c0a:	6863      	ldrls	r3, [r4, #4]
 8004c0c:	1a1b      	subls	r3, r3, r0
 8004c0e:	1bda      	subls	r2, r3, r7

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8004c10:	9b02      	ldr	r3, [sp, #8]
 8004c12:	eb05 0008 	add.w	r0, r5, r8
   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8004c16:	bf88      	it	hi
 8004c18:	2200      	movhi	r2, #0
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8004c1a:	fb03 f600 	mul.w	r6, r3, r0
 8004c1e:	4296      	cmp	r6, r2
 8004c20:	d31c      	bcc.n	8004c5c <CircularQueue_Add+0x98>
 8004c22:	fbb2 f3f0 	udiv	r3, r2, r0
 8004c26:	fb00 2313 	mls	r3, r0, r3, r2
 8004c2a:	b2db      	uxtb	r3, r3
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8004c2c:	4598      	cmp	r8, r3
 8004c2e:	d215      	bcs.n	8004c5c <CircularQueue_Add+0x98>
 8004c30:	7f22      	ldrb	r2, [r4, #28]
 8004c32:	f012 0f01 	tst.w	r2, #1
 8004c36:	bf08      	it	eq
 8004c38:	2300      	moveq	r3, #0
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8004c3a:	0790      	lsls	r0, r2, #30
 8004c3c:	bf54      	ite	pl
 8004c3e:	b29b      	uxthpl	r3, r3
 8004c40:	fa1f f388 	uxthmi.w	r3, r8
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8004c44:	b965      	cbnz	r5, 8004c60 <CircularQueue_Add+0x9c>
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
  }
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
 8004c46:	2000      	movs	r0, #0
  }
  return ptr;
}
 8004c48:	b005      	add	sp, #20
 8004c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (q->elementSize > 0)               
 8004c4e:	b91d      	cbnz	r5, 8004c58 <CircularQueue_Add+0x94>
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8004c50:	462f      	mov	r7, r5
 8004c52:	e7d6      	b.n	8004c02 <CircularQueue_Add+0x3e>
 8004c54:	462f      	mov	r7, r5
 8004c56:	e7d5      	b.n	8004c04 <CircularQueue_Add+0x40>
 8004c58:	460f      	mov	r7, r1
 8004c5a:	e7d3      	b.n	8004c04 <CircularQueue_Add+0x40>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	e7f1      	b.n	8004c44 <CircularQueue_Add+0x80>
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8004c60:	4431      	add	r1, r6
 8004c62:	6862      	ldr	r2, [r4, #4]
 8004c64:	440b      	add	r3, r1
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d8ed      	bhi.n	8004c46 <CircularQueue_Add+0x82>
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8004c6a:	0a2b      	lsrs	r3, r5, #8
 8004c6c:	9301      	str	r3, [sp, #4]
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8004c6e:	eb05 0308 	add.w	r3, r5, r8
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8004c72:	f04f 0a00 	mov.w	sl, #0
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8004c76:	b29b      	uxth	r3, r3
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8004c78:	46d1      	mov	r9, sl
    for (i=0; i < nbElements; i++) 
 8004c7a:	f8cd a000 	str.w	sl, [sp]
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8004c7e:	9303      	str	r3, [sp, #12]
    for (i=0; i < nbElements; i++) 
 8004c80:	9b00      	ldr	r3, [sp, #0]
 8004c82:	9902      	ldr	r1, [sp, #8]
 8004c84:	6920      	ldr	r0, [r4, #16]
 8004c86:	6862      	ldr	r2, [r4, #4]
 8004c88:	428b      	cmp	r3, r1
 8004c8a:	d106      	bne.n	8004c9a <CircularQueue_Add+0xd6>
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8004c8c:	4440      	add	r0, r8
 8004c8e:	4290      	cmp	r0, r2
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	bf28      	it	cs
 8004c94:	1a80      	subcs	r0, r0, r2
 8004c96:	4418      	add	r0, r3
  return ptr;
 8004c98:	e7d6      	b.n	8004c48 <CircularQueue_Add+0x84>
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8004c9a:	4438      	add	r0, r7
 8004c9c:	4290      	cmp	r0, r2
      if (q->elementSize == 0) 
 8004c9e:	8923      	ldrh	r3, [r4, #8]
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8004ca0:	bf28      	it	cs
 8004ca2:	1a80      	subcs	r0, r0, r2
 8004ca4:	6120      	str	r0, [r4, #16]
      if (q->elementSize == 0) 
 8004ca6:	b98b      	cbnz	r3, 8004ccc <CircularQueue_Add+0x108>
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8004ca8:	6822      	ldr	r2, [r4, #0]
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8004caa:	9901      	ldr	r1, [sp, #4]
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8004cac:	5415      	strb	r5, [r2, r0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8004cae:	6862      	ldr	r2, [r4, #4]
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8004cb0:	1c43      	adds	r3, r0, #1
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	bf98      	it	ls
 8004cb6:	1a9b      	subls	r3, r3, r2
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8004cb8:	6822      	ldr	r2, [r4, #0]
 8004cba:	54d1      	strb	r1, [r2, r3]
 8004cbc:	1c58      	adds	r0, r3, #1
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8004cbe:	6863      	ldr	r3, [r4, #4]
 8004cc0:	4283      	cmp	r3, r0
 8004cc2:	bf98      	it	ls
 8004cc4:	1ac0      	subls	r0, r0, r3
        q->byteCount += 2;
 8004cc6:	6963      	ldr	r3, [r4, #20]
 8004cc8:	3302      	adds	r3, #2
 8004cca:	6163      	str	r3, [r4, #20]
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8004ccc:	6863      	ldr	r3, [r4, #4]
 8004cce:	1a1b      	subs	r3, r3, r0
 8004cd0:	429d      	cmp	r5, r3
 8004cd2:	462e      	mov	r6, r5
 8004cd4:	bf28      	it	cs
 8004cd6:	461e      	movcs	r6, r3
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8004cd8:	429d      	cmp	r5, r3
 8004cda:	d903      	bls.n	8004ce4 <CircularQueue_Add+0x120>
 8004cdc:	42b5      	cmp	r5, r6
 8004cde:	7f23      	ldrb	r3, [r4, #28]
 8004ce0:	d924      	bls.n	8004d2c <CircularQueue_Add+0x168>
 8004ce2:	bb0b      	cbnz	r3, 8004d28 <CircularQueue_Add+0x164>
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	4632      	mov	r2, r6
 8004ce8:	4418      	add	r0, r3
 8004cea:	eb0b 010a 	add.w	r1, fp, sl
 8004cee:	f000 fbc9 	bl	8005484 <memcpy>
        q->byteCount += NbBytesToCopy;
 8004cf2:	6963      	ldr	r3, [r4, #20]
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8004cf4:	9f03      	ldr	r7, [sp, #12]
        q->byteCount += NbBytesToCopy;
 8004cf6:	4433      	add	r3, r6
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8004cf8:	46b1      	mov	r9, r6
        q->byteCount += NbBytesToCopy;
 8004cfa:	6163      	str	r3, [r4, #20]
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8004cfc:	1bae      	subs	r6, r5, r6
        curBuffPosition = 0; 
 8004cfe:	2000      	movs	r0, #0
      if (NbBytesToCopy)      
 8004d00:	b156      	cbz	r6, 8004d18 <CircularQueue_Add+0x154>
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	eb09 010a 	add.w	r1, r9, sl
 8004d08:	4632      	mov	r2, r6
 8004d0a:	4418      	add	r0, r3
 8004d0c:	4459      	add	r1, fp
 8004d0e:	f000 fbb9 	bl	8005484 <memcpy>
        q->byteCount += NbBytesToCopy;
 8004d12:	6963      	ldr	r3, [r4, #20]
 8004d14:	441e      	add	r6, r3
 8004d16:	6166      	str	r6, [r4, #20]
      q->elementCount++;
 8004d18:	69a3      	ldr	r3, [r4, #24]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	61a3      	str	r3, [r4, #24]
    for (i=0; i < nbElements; i++) 
 8004d1e:	9b00      	ldr	r3, [sp, #0]
 8004d20:	3301      	adds	r3, #1
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	44aa      	add	sl, r5
 8004d26:	e7ab      	b.n	8004c80 <CircularQueue_Add+0xbc>
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8004d28:	2e00      	cmp	r6, #0
 8004d2a:	d0f5      	beq.n	8004d18 <CircularQueue_Add+0x154>
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8004d2c:	07da      	lsls	r2, r3, #31
 8004d2e:	d521      	bpl.n	8004d74 <CircularQueue_Add+0x1b0>
          if (q->elementSize == 0)
 8004d30:	8923      	ldrh	r3, [r4, #8]
 8004d32:	b943      	cbnz	r3, 8004d46 <CircularQueue_Add+0x182>
             q->qBuff[curBuffPosition-2] = 0xFF;
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	4403      	add	r3, r0
 8004d38:	22ff      	movs	r2, #255	; 0xff
 8004d3a:	f803 2c02 	strb.w	r2, [r3, #-2]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	4418      	add	r0, r3
 8004d42:	f800 2c01 	strb.w	r2, [r0, #-1]
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8004d46:	6963      	ldr	r3, [r4, #20]
          if (q->elementSize == 0)
 8004d48:	8922      	ldrh	r2, [r4, #8]
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8004d4a:	441e      	add	r6, r3
 8004d4c:	6166      	str	r6, [r4, #20]
          if (q->elementSize == 0)
 8004d4e:	2a00      	cmp	r2, #0
 8004d50:	d138      	bne.n	8004dc4 <CircularQueue_Add+0x200>
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8004d52:	6823      	ldr	r3, [r4, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8004d54:	9901      	ldr	r1, [sp, #4]
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8004d56:	701d      	strb	r5, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	7059      	strb	r1, [r3, #1]
            q->byteCount += 2;   
 8004d5c:	6963      	ldr	r3, [r4, #20]
 8004d5e:	3302      	adds	r3, #2
 8004d60:	6163      	str	r3, [r4, #20]
 8004d62:	462e      	mov	r6, r5
          NbCopiedBytes = 0;
 8004d64:	4691      	mov	r9, r2
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8004d66:	2002      	movs	r0, #2
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8004d68:	eb08 0706 	add.w	r7, r8, r6
        q->last = 0;        
 8004d6c:	2300      	movs	r3, #0
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8004d6e:	b2bf      	uxth	r7, r7
        q->last = 0;        
 8004d70:	6123      	str	r3, [r4, #16]
 8004d72:	e7c5      	b.n	8004d00 <CircularQueue_Add+0x13c>
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8004d74:	079b      	lsls	r3, r3, #30
 8004d76:	d5f7      	bpl.n	8004d68 <CircularQueue_Add+0x1a4>
          if (q->elementSize == 0)
 8004d78:	8923      	ldrh	r3, [r4, #8]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f47f af63 	bne.w	8004c46 <CircularQueue_Add+0x82>
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	4403      	add	r3, r0
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8004d84:	0a32      	lsrs	r2, r6, #8
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8004d86:	f803 6c02 	strb.w	r6, [r3, #-2]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	4403      	add	r3, r0
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8004d8e:	eb0b 010a 	add.w	r1, fp, sl
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8004d92:	f803 2c01 	strb.w	r2, [r3, #-1]
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	4632      	mov	r2, r6
 8004d9a:	4418      	add	r0, r3
 8004d9c:	f000 fb72 	bl	8005484 <memcpy>
             q->elementCount++;
 8004da0:	69a2      	ldr	r2, [r4, #24]
             q->byteCount += NbBytesToCopy; 
 8004da2:	6963      	ldr	r3, [r4, #20]
             q->elementCount++;
 8004da4:	3201      	adds	r2, #1
             q->byteCount += NbBytesToCopy; 
 8004da6:	4433      	add	r3, r6
             q->elementCount++;
 8004da8:	61a2      	str	r2, [r4, #24]
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8004daa:	6822      	ldr	r2, [r4, #0]
             q->byteCount += NbBytesToCopy; 
 8004dac:	6163      	str	r3, [r4, #20]
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8004dae:	1bab      	subs	r3, r5, r6
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8004db0:	7013      	strb	r3, [r2, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8004db2:	6822      	ldr	r2, [r4, #0]
 8004db4:	0a19      	lsrs	r1, r3, #8
 8004db6:	7051      	strb	r1, [r2, #1]
             q->byteCount += 2;              
 8004db8:	6962      	ldr	r2, [r4, #20]
 8004dba:	3202      	adds	r2, #2
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8004dbc:	46b1      	mov	r9, r6
             q->byteCount += 2;              
 8004dbe:	6162      	str	r2, [r4, #20]
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8004dc0:	461e      	mov	r6, r3
 8004dc2:	e7d0      	b.n	8004d66 <CircularQueue_Add+0x1a2>
          NbCopiedBytes = 0;
 8004dc4:	f04f 0900 	mov.w	r9, #0
 8004dc8:	462e      	mov	r6, r5
          curBuffPosition = 0; 
 8004dca:	4648      	mov	r0, r9
 8004dcc:	e7cc      	b.n	8004d68 <CircularQueue_Add+0x1a4>

08004dce <CircularQueue_Remove>:
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
  uint8_t  elemSizeStorageRoom = 0;
  uint8_t* ptr= NULL;
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8004dce:	8902      	ldrh	r2, [r0, #8]
{
 8004dd0:	4603      	mov	r3, r0
  *elementSize = 0;
  if (q->byteCount > 0) 
 8004dd2:	6940      	ldr	r0, [r0, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8004dd4:	2a00      	cmp	r2, #0
  *elementSize = 0;
 8004dd6:	f04f 0200 	mov.w	r2, #0
{
 8004dda:	b5f0      	push	{r4, r5, r6, r7, lr}
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8004ddc:	bf14      	ite	ne
 8004dde:	2600      	movne	r6, #0
 8004de0:	2602      	moveq	r6, #2
  *elementSize = 0;
 8004de2:	800a      	strh	r2, [r1, #0]
  if (q->byteCount > 0) 
 8004de4:	2800      	cmp	r0, #0
 8004de6:	d052      	beq.n	8004e8e <CircularQueue_Remove+0xc0>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8004de8:	891d      	ldrh	r5, [r3, #8]
 8004dea:	681f      	ldr	r7, [r3, #0]
 8004dec:	68dc      	ldr	r4, [r3, #12]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	b95d      	cbnz	r5, 8004e0a <CircularQueue_Remove+0x3c>
 8004df2:	f104 0c01 	add.w	ip, r4, #1
 8004df6:	4594      	cmp	ip, r2
 8004df8:	bf28      	it	cs
 8004dfa:	ebac 0c02 	subcs.w	ip, ip, r2
 8004dfe:	5d3d      	ldrb	r5, [r7, r4]
 8004e00:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8004e04:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004e08:	b2ad      	uxth	r5, r5
 8004e0a:	800d      	strh	r5, [r1, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8004e0c:	f893 c01c 	ldrb.w	ip, [r3, #28]
 8004e10:	f00c 0c03 	and.w	ip, ip, #3
 8004e14:	f1bc 0f01 	cmp.w	ip, #1
 8004e18:	d120      	bne.n	8004e5c <CircularQueue_Remove+0x8e>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 8004e1a:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8004e1e:	4565      	cmp	r5, ip
 8004e20:	d101      	bne.n	8004e26 <CircularQueue_Remove+0x58>
 8004e22:	891d      	ldrh	r5, [r3, #8]
 8004e24:	b145      	cbz	r5, 8004e38 <CircularQueue_Remove+0x6a>
 8004e26:	691d      	ldr	r5, [r3, #16]
 8004e28:	42a5      	cmp	r5, r4
 8004e2a:	d217      	bcs.n	8004e5c <CircularQueue_Remove+0x8e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8004e2c:	891d      	ldrh	r5, [r3, #8]
 8004e2e:	b1ad      	cbz	r5, 8004e5c <CircularQueue_Remove+0x8e>
 8004e30:	eba2 0c04 	sub.w	ip, r2, r4
 8004e34:	45ac      	cmp	ip, r5
 8004e36:	d211      	bcs.n	8004e5c <CircularQueue_Remove+0x8e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8004e38:	4404      	add	r4, r0
 8004e3a:	1aa4      	subs	r4, r4, r2
 8004e3c:	615c      	str	r4, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8004e3e:	891c      	ldrh	r4, [r3, #8]
          q->first = 0;
 8004e40:	2000      	movs	r0, #0
 8004e42:	60d8      	str	r0, [r3, #12]
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8004e44:	b94c      	cbnz	r4, 8004e5a <CircularQueue_Remove+0x8c>
 8004e46:	2a01      	cmp	r2, #1
 8004e48:	bf94      	ite	ls
 8004e4a:	f1c2 0001 	rsbls	r0, r2, #1
 8004e4e:	2001      	movhi	r0, #1
 8004e50:	783c      	ldrb	r4, [r7, #0]
 8004e52:	5c38      	ldrb	r0, [r7, r0]
 8004e54:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 8004e58:	b2a4      	uxth	r4, r4
 8004e5a:	800c      	strh	r4, [r1, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8004e5c:	f8d3 c00c 	ldr.w	ip, [r3, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8004e60:	880c      	ldrh	r4, [r1, #0]
 8004e62:	695d      	ldr	r5, [r3, #20]
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8004e64:	eb0c 0006 	add.w	r0, ip, r6
 8004e68:	4290      	cmp	r0, r2
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8004e6a:	eb04 0106 	add.w	r1, r4, r6
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8004e6e:	bf28      	it	cs
 8004e70:	1a80      	subcs	r0, r0, r2
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8004e72:	1a6d      	subs	r5, r5, r1
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8004e74:	4438      	add	r0, r7
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8004e76:	615d      	str	r5, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8004e78:	b135      	cbz	r5, 8004e88 <CircularQueue_Remove+0xba>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 8004e7a:	eb04 010c 	add.w	r1, r4, ip
 8004e7e:	4431      	add	r1, r6
 8004e80:	4291      	cmp	r1, r2
 8004e82:	bf28      	it	cs
 8004e84:	1a89      	subcs	r1, r1, r2
 8004e86:	60d9      	str	r1, [r3, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8004e88:	699a      	ldr	r2, [r3, #24]
 8004e8a:	3a01      	subs	r2, #1
 8004e8c:	619a      	str	r2, [r3, #24]
  }
  return ptr;
}
 8004e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e90 <CircularQueue_Sense>:
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
  uint8_t  elemSizeStorageRoom = 0;
  uint8_t* x= NULL;
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8004e90:	8903      	ldrh	r3, [r0, #8]
 8004e92:	2b00      	cmp	r3, #0
  *elementSize = 0;
 8004e94:	f04f 0300 	mov.w	r3, #0
 8004e98:	800b      	strh	r3, [r1, #0]
  uint32_t FirstElemetPos = 0;
    
  if (q->byteCount > 0) 
 8004e9a:	6943      	ldr	r3, [r0, #20]
{
 8004e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8004e9e:	bf14      	ite	ne
 8004ea0:	2500      	movne	r5, #0
 8004ea2:	2502      	moveq	r5, #2
  if (q->byteCount > 0) 
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d035      	beq.n	8004f14 <CircularQueue_Sense+0x84>
  {
    FirstElemetPos = q->first;
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8004ea8:	8902      	ldrh	r2, [r0, #8]
    FirstElemetPos = q->first;
 8004eaa:	68c6      	ldr	r6, [r0, #12]
 8004eac:	e9d0 3400 	ldrd	r3, r4, [r0]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8004eb0:	b942      	cbnz	r2, 8004ec4 <CircularQueue_Sense+0x34>
 8004eb2:	1c77      	adds	r7, r6, #1
 8004eb4:	42a7      	cmp	r7, r4
 8004eb6:	bf28      	it	cs
 8004eb8:	1b3f      	subcs	r7, r7, r4
 8004eba:	5d9a      	ldrb	r2, [r3, r6]
 8004ebc:	5ddf      	ldrb	r7, [r3, r7]
 8004ebe:	eb02 2207 	add.w	r2, r2, r7, lsl #8
 8004ec2:	b292      	uxth	r2, r2
 8004ec4:	800a      	strh	r2, [r1, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8004ec6:	7f07      	ldrb	r7, [r0, #28]
 8004ec8:	f007 0703 	and.w	r7, r7, #3
 8004ecc:	2f01      	cmp	r7, #1
 8004ece:	d11b      	bne.n	8004f08 <CircularQueue_Sense+0x78>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 8004ed0:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8004ed4:	42ba      	cmp	r2, r7
 8004ed6:	d101      	bne.n	8004edc <CircularQueue_Sense+0x4c>
 8004ed8:	8902      	ldrh	r2, [r0, #8]
 8004eda:	b13a      	cbz	r2, 8004eec <CircularQueue_Sense+0x5c>
 8004edc:	6902      	ldr	r2, [r0, #16]
 8004ede:	42b2      	cmp	r2, r6
 8004ee0:	d212      	bcs.n	8004f08 <CircularQueue_Sense+0x78>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8004ee2:	8902      	ldrh	r2, [r0, #8]
 8004ee4:	b182      	cbz	r2, 8004f08 <CircularQueue_Sense+0x78>
 8004ee6:	1ba7      	subs	r7, r4, r6
 8004ee8:	4297      	cmp	r7, r2
 8004eea:	d20d      	bcs.n	8004f08 <CircularQueue_Sense+0x78>
      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8004eec:	8902      	ldrh	r2, [r0, #8]
 8004eee:	b94a      	cbnz	r2, 8004f04 <CircularQueue_Sense+0x74>
 8004ef0:	2c01      	cmp	r4, #1
 8004ef2:	bf94      	ite	ls
 8004ef4:	f1c4 0001 	rsbls	r0, r4, #1
 8004ef8:	2001      	movhi	r0, #1
 8004efa:	781a      	ldrb	r2, [r3, #0]
 8004efc:	5c18      	ldrb	r0, [r3, r0]
 8004efe:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 8004f02:	b292      	uxth	r2, r2
 8004f04:	800a      	strh	r2, [r1, #0]
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8004f06:	2600      	movs	r6, #0
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8004f08:	19a8      	adds	r0, r5, r6
 8004f0a:	42a0      	cmp	r0, r4
 8004f0c:	bf28      	it	cs
 8004f0e:	1b00      	subcs	r0, r0, r4
 8004f10:	4418      	add	r0, r3
  }
  return x;
}
 8004f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t* x= NULL;
 8004f14:	4618      	mov	r0, r3
  return x;
 8004f16:	e7fc      	b.n	8004f12 <CircularQueue_Sense+0x82>

08004f18 <BLS_Init>:
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
  return;
}
 8004f18:	4770      	bx	lr

08004f1a <CRS_STM_Init>:
 8004f1a:	4770      	bx	lr

08004f1c <DIS_Init>:
 8004f1c:	4770      	bx	lr

08004f1e <EDS_STM_Init>:
 8004f1e:	4770      	bx	lr

08004f20 <HIDS_Init>:
 8004f20:	4770      	bx	lr

08004f22 <HRS_Init>:
 8004f22:	4770      	bx	lr

08004f24 <HTS_Init>:
 8004f24:	4770      	bx	lr

08004f26 <IAS_Init>:
 8004f26:	4770      	bx	lr

08004f28 <LLS_Init>:
 8004f28:	4770      	bx	lr

08004f2a <TPS_Init>:
 8004f2a:	4770      	bx	lr

08004f2c <MOTENV_STM_Init>:
 8004f2c:	4770      	bx	lr

08004f2e <P2PS_STM_Init>:
 8004f2e:	4770      	bx	lr

08004f30 <OTAS_STM_Init>:
 8004f30:	4770      	bx	lr

08004f32 <MESH_Init>:
 8004f32:	4770      	bx	lr

08004f34 <BVOPUS_STM_Init>:
 8004f34:	4770      	bx	lr

08004f36 <SVCCTL_InitCustomSvc>:
 8004f36:	4770      	bx	lr

08004f38 <SVCCTL_SvcInit>:

  return;
}

__weak void SVCCTL_SvcInit(void)
{
 8004f38:	b508      	push	{r3, lr}
  BLS_Init();
 8004f3a:	f7ff ffed 	bl	8004f18 <BLS_Init>

  CRS_STM_Init();
 8004f3e:	f7ff ffec 	bl	8004f1a <CRS_STM_Init>

  DIS_Init();
 8004f42:	f7ff ffeb 	bl	8004f1c <DIS_Init>

  EDS_STM_Init();
 8004f46:	f7ff ffea 	bl	8004f1e <EDS_STM_Init>

  HIDS_Init();
 8004f4a:	f7ff ffe9 	bl	8004f20 <HIDS_Init>

  HRS_Init();
 8004f4e:	f7ff ffe8 	bl	8004f22 <HRS_Init>

  HTS_Init();
 8004f52:	f7ff ffe7 	bl	8004f24 <HTS_Init>

  IAS_Init();
 8004f56:	f7ff ffe6 	bl	8004f26 <IAS_Init>

  LLS_Init();
 8004f5a:	f7ff ffe5 	bl	8004f28 <LLS_Init>

  TPS_Init();
 8004f5e:	f7ff ffe4 	bl	8004f2a <TPS_Init>

  MOTENV_STM_Init();
 8004f62:	f7ff ffe3 	bl	8004f2c <MOTENV_STM_Init>

  P2PS_STM_Init();
 8004f66:	f7ff ffe2 	bl	8004f2e <P2PS_STM_Init>

  OTAS_STM_Init();
 8004f6a:	f7ff ffe1 	bl	8004f30 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8004f6e:	f7ff ffe1 	bl	8004f34 <BVOPUS_STM_Init>

  MESH_Init();
 8004f72:	f7ff ffde 	bl	8004f32 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8004f76:	f7ff ffde 	bl	8004f36 <SVCCTL_InitCustomSvc>
  
  return;
}
 8004f7a:	bd08      	pop	{r3, pc}

08004f7c <SVCCTL_Init>:
{
 8004f7c:	b508      	push	{r3, lr}
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8004f7e:	4b04      	ldr	r3, [pc, #16]	; (8004f90 <SVCCTL_Init+0x14>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8004f84:	f883 2020 	strb.w	r2, [r3, #32]
  SVCCTL_SvcInit();
 8004f88:	f7ff ffd6 	bl	8004f38 <SVCCTL_SvcInit>
}
 8004f8c:	bd08      	pop	{r3, pc}
 8004f8e:	bf00      	nop
 8004f90:	20000148 	.word	0x20000148

08004f94 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8004f94:	b570      	push	{r4, r5, r6, lr}
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
  event_notification_status = SVCCTL_EvtNotAck;

  switch (event_pckt->evt)
 8004f96:	7843      	ldrb	r3, [r0, #1]
 8004f98:	2bff      	cmp	r3, #255	; 0xff
{
 8004f9a:	4604      	mov	r4, r0
  switch (event_pckt->evt)
 8004f9c:	d106      	bne.n	8004fac <SVCCTL_UserEvtRx+0x18>
  {
    case EVT_VENDOR:
    {
      blue_evt = (evt_blue_aci*) event_pckt->data;

      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8004f9e:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 8004fa2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004fa6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004faa:	d004      	beq.n	8004fb6 <SVCCTL_UserEvtRx+0x22>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8004fac:	4620      	mov	r0, r4
      return_status = SVCCTL_UserEvtFlowEnable;
      break;
  }

  return (return_status);
}
 8004fae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return_status = SVCCTL_App_Notification(pckt);
 8004fb2:	f7fc bae7 	b.w	8001584 <SVCCTL_App_Notification>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8004fb6:	4e08      	ldr	r6, [pc, #32]	; (8004fd8 <SVCCTL_UserEvtRx+0x44>)
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8004fb8:	2500      	movs	r5, #0
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8004fba:	7f32      	ldrb	r2, [r6, #28]
 8004fbc:	b2eb      	uxtb	r3, r5
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d9f4      	bls.n	8004fac <SVCCTL_UserEvtRx+0x18>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8004fc2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	4798      	blx	r3
 8004fca:	3501      	adds	r5, #1
            if (event_notification_status != SVCCTL_EvtNotAck)
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	d0f4      	beq.n	8004fba <SVCCTL_UserEvtRx+0x26>
      return_status = SVCCTL_UserEvtFlowEnable;
 8004fd0:	3802      	subs	r0, #2
 8004fd2:	bf18      	it	ne
 8004fd4:	2001      	movne	r0, #1
}
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}
 8004fd8:	20000148 	.word	0x20000148

08004fdc <SendFreeBuf>:

  return;
}

static void SendFreeBuf( void )
{
 8004fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8004fde:	4c09      	ldr	r4, [pc, #36]	; (8005004 <SendFreeBuf+0x28>)
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8004fe0:	4d09      	ldr	r5, [pc, #36]	; (8005008 <SendFreeBuf+0x2c>)
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8004fe2:	4808      	ldr	r0, [pc, #32]	; (8005004 <SendFreeBuf+0x28>)
 8004fe4:	f7ff fda1 	bl	8004b2a <LST_is_empty>
 8004fe8:	b108      	cbz	r0, 8004fee <SendFreeBuf+0x12>
  }

  return;
}
 8004fea:	b003      	add	sp, #12
 8004fec:	bd30      	pop	{r4, r5, pc}
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8004fee:	a901      	add	r1, sp, #4
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	f7ff fdc7 	bl	8004b84 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8004ff6:	692b      	ldr	r3, [r5, #16]
 8004ff8:	9901      	ldr	r1, [sp, #4]
 8004ffa:	6918      	ldr	r0, [r3, #16]
 8004ffc:	f7ff fdab 	bl	8004b56 <LST_insert_tail>
 8005000:	e7ef      	b.n	8004fe2 <SendFreeBuf+0x6>
 8005002:	bf00      	nop
 8005004:	20001238 	.word	0x20001238
 8005008:	20030000 	.word	0x20030000

0800500c <TL_Enable>:
  HW_IPCC_Enable();
 800500c:	f7fc bc80 	b.w	8001910 <HW_IPCC_Enable>

08005010 <TL_Init>:
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8005010:	4b0f      	ldr	r3, [pc, #60]	; (8005050 <TL_Init+0x40>)
 8005012:	4a10      	ldr	r2, [pc, #64]	; (8005054 <TL_Init+0x44>)
  TL_RefTable.p_ble_table = &TL_BleTable;
 8005014:	f103 0120 	add.w	r1, r3, #32
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8005018:	6013      	str	r3, [r2, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800501a:	6051      	str	r1, [r2, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800501c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005020:	6091      	str	r1, [r2, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8005022:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005026:	6211      	str	r1, [r2, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 8005028:	f103 0144 	add.w	r1, r3, #68	; 0x44
 800502c:	6251      	str	r1, [r2, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800502e:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 8005032:	60d1      	str	r1, [r2, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8005034:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8005038:	6111      	str	r1, [r2, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800503a:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800503e:	6151      	str	r1, [r2, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8005040:	f103 0174 	add.w	r1, r3, #116	; 0x74
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8005044:	3380      	adds	r3, #128	; 0x80
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8005046:	6191      	str	r1, [r2, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8005048:	61d3      	str	r3, [r2, #28]
  HW_IPCC_Init();
 800504a:	f7fc bc79 	b.w	8001940 <HW_IPCC_Init>
 800504e:	bf00      	nop
 8005050:	20030134 	.word	0x20030134
 8005054:	20030000 	.word	0x20030000

08005058 <TL_BLE_Init>:
{
 8005058:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&EvtQueue);
 800505a:	4d0c      	ldr	r5, [pc, #48]	; (800508c <TL_BLE_Init+0x34>)
{
 800505c:	4604      	mov	r4, r0
  LST_init_head (&EvtQueue);
 800505e:	4628      	mov	r0, r5
 8005060:	f7ff fd60 	bl	8004b24 <LST_init_head>
  p_bletable = TL_RefTable.p_ble_table;
 8005064:	4b0a      	ldr	r3, [pc, #40]	; (8005090 <TL_BLE_Init+0x38>)
  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005066:	68a2      	ldr	r2, [r4, #8]
  p_bletable = TL_RefTable.p_ble_table;
 8005068:	685b      	ldr	r3, [r3, #4]
  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800506a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800506c:	68e2      	ldr	r2, [r4, #12]
 800506e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8005070:	f105 0208 	add.w	r2, r5, #8
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8005074:	e9c3 2501 	strd	r2, r5, [r3, #4]
  HW_IPCC_BLE_Init();
 8005078:	f7fc fc82 	bl	8001980 <HW_IPCC_BLE_Init>
  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800507c:	4b05      	ldr	r3, [pc, #20]	; (8005094 <TL_BLE_Init+0x3c>)
 800507e:	6822      	ldr	r2, [r4, #0]
 8005080:	609a      	str	r2, [r3, #8]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8005082:	6862      	ldr	r2, [r4, #4]
 8005084:	60da      	str	r2, [r3, #12]
}
 8005086:	2000      	movs	r0, #0
 8005088:	bd38      	pop	{r3, r4, r5, pc}
 800508a:	bf00      	nop
 800508c:	20030a38 	.word	0x20030a38
 8005090:	20030000 	.word	0x20030000
 8005094:	20001238 	.word	0x20001238

08005098 <TL_BLE_SendCmd>:
{
 8005098:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800509a:	4b04      	ldr	r3, [pc, #16]	; (80050ac <TL_BLE_SendCmd+0x14>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2201      	movs	r2, #1
 80050a2:	721a      	strb	r2, [r3, #8]
  HW_IPCC_BLE_SendCmd();
 80050a4:	f7fc fc74 	bl	8001990 <HW_IPCC_BLE_SendCmd>
}
 80050a8:	2000      	movs	r0, #0
 80050aa:	bd08      	pop	{r3, pc}
 80050ac:	20030000 	.word	0x20030000

080050b0 <HW_IPCC_BLE_RxEvtNot>:
{
 80050b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  while(LST_is_empty(&EvtQueue) == FALSE)
 80050b2:	4c08      	ldr	r4, [pc, #32]	; (80050d4 <HW_IPCC_BLE_RxEvtNot+0x24>)
    BLE_IoBusEvtCallBackFunction(phcievt);
 80050b4:	4d08      	ldr	r5, [pc, #32]	; (80050d8 <HW_IPCC_BLE_RxEvtNot+0x28>)
  while(LST_is_empty(&EvtQueue) == FALSE)
 80050b6:	4807      	ldr	r0, [pc, #28]	; (80050d4 <HW_IPCC_BLE_RxEvtNot+0x24>)
 80050b8:	f7ff fd37 	bl	8004b2a <LST_is_empty>
 80050bc:	b108      	cbz	r0, 80050c2 <HW_IPCC_BLE_RxEvtNot+0x12>
}
 80050be:	b003      	add	sp, #12
 80050c0:	bd30      	pop	{r4, r5, pc}
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80050c2:	4620      	mov	r0, r4
 80050c4:	a901      	add	r1, sp, #4
 80050c6:	f7ff fd5d 	bl	8004b84 <LST_remove_head>
    BLE_IoBusEvtCallBackFunction(phcievt);
 80050ca:	68ab      	ldr	r3, [r5, #8]
 80050cc:	9801      	ldr	r0, [sp, #4]
 80050ce:	4798      	blx	r3
 80050d0:	e7f1      	b.n	80050b6 <HW_IPCC_BLE_RxEvtNot+0x6>
 80050d2:	bf00      	nop
 80050d4:	20030a38 	.word	0x20030a38
 80050d8:	20001238 	.word	0x20001238

080050dc <HW_IPCC_BLE_AclDataAckNot>:
  BLE_IoBusAclDataTxAck( );
 80050dc:	4b01      	ldr	r3, [pc, #4]	; (80050e4 <HW_IPCC_BLE_AclDataAckNot+0x8>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	4718      	bx	r3
 80050e2:	bf00      	nop
 80050e4:	20001238 	.word	0x20001238

080050e8 <TL_SYS_Init>:
{
 80050e8:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&SystemEvtQueue);
 80050ea:	4d09      	ldr	r5, [pc, #36]	; (8005110 <TL_SYS_Init+0x28>)
{
 80050ec:	4604      	mov	r4, r0
  LST_init_head (&SystemEvtQueue);
 80050ee:	4628      	mov	r0, r5
 80050f0:	f7ff fd18 	bl	8004b24 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80050f4:	4b07      	ldr	r3, [pc, #28]	; (8005114 <TL_SYS_Init+0x2c>)
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80050f6:	68a2      	ldr	r2, [r4, #8]
  p_systable = TL_RefTable.p_sys_table;
 80050f8:	68db      	ldr	r3, [r3, #12]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80050fa:	e9c3 2500 	strd	r2, r5, [r3]
  HW_IPCC_SYS_Init();
 80050fe:	f7fc fc4f 	bl	80019a0 <HW_IPCC_SYS_Init>
  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8005102:	4b05      	ldr	r3, [pc, #20]	; (8005118 <TL_SYS_Init+0x30>)
 8005104:	6822      	ldr	r2, [r4, #0]
 8005106:	611a      	str	r2, [r3, #16]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8005108:	6862      	ldr	r2, [r4, #4]
 800510a:	615a      	str	r2, [r3, #20]
}
 800510c:	2000      	movs	r0, #0
 800510e:	bd38      	pop	{r3, r4, r5, pc}
 8005110:	20030a50 	.word	0x20030a50
 8005114:	20030000 	.word	0x20030000
 8005118:	20001238 	.word	0x20001238

0800511c <TL_SYS_SendCmd>:
{
 800511c:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800511e:	4b04      	ldr	r3, [pc, #16]	; (8005130 <TL_SYS_SendCmd+0x14>)
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2210      	movs	r2, #16
 8005126:	721a      	strb	r2, [r3, #8]
  HW_IPCC_SYS_SendCmd();
 8005128:	f7fc fc42 	bl	80019b0 <HW_IPCC_SYS_SendCmd>
}
 800512c:	2000      	movs	r0, #0
 800512e:	bd08      	pop	{r3, pc}
 8005130:	20030000 	.word	0x20030000

08005134 <HW_IPCC_SYS_CmdEvtNot>:
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005134:	4b02      	ldr	r3, [pc, #8]	; (8005140 <HW_IPCC_SYS_CmdEvtNot+0xc>)
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	4b02      	ldr	r3, [pc, #8]	; (8005144 <HW_IPCC_SYS_CmdEvtNot+0x10>)
 800513a:	6810      	ldr	r0, [r2, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	4718      	bx	r3
 8005140:	20030000 	.word	0x20030000
 8005144:	20001238 	.word	0x20001238

08005148 <HW_IPCC_SYS_EvtNot>:
{
 8005148:	b537      	push	{r0, r1, r2, r4, r5, lr}
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800514a:	4c08      	ldr	r4, [pc, #32]	; (800516c <HW_IPCC_SYS_EvtNot+0x24>)
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800514c:	4d08      	ldr	r5, [pc, #32]	; (8005170 <HW_IPCC_SYS_EvtNot+0x28>)
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800514e:	4807      	ldr	r0, [pc, #28]	; (800516c <HW_IPCC_SYS_EvtNot+0x24>)
 8005150:	f7ff fceb 	bl	8004b2a <LST_is_empty>
 8005154:	b108      	cbz	r0, 800515a <HW_IPCC_SYS_EvtNot+0x12>
}
 8005156:	b003      	add	sp, #12
 8005158:	bd30      	pop	{r4, r5, pc}
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800515a:	4620      	mov	r0, r4
 800515c:	a901      	add	r1, sp, #4
 800515e:	f7ff fd11 	bl	8004b84 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8005162:	696b      	ldr	r3, [r5, #20]
 8005164:	9801      	ldr	r0, [sp, #4]
 8005166:	4798      	blx	r3
 8005168:	e7f1      	b.n	800514e <HW_IPCC_SYS_EvtNot+0x6>
 800516a:	bf00      	nop
 800516c:	20030a50 	.word	0x20030a50
 8005170:	20001238 	.word	0x20001238

08005174 <TL_MM_Init>:
{
 8005174:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&FreeBufQueue);
 8005176:	4d0c      	ldr	r5, [pc, #48]	; (80051a8 <TL_MM_Init+0x34>)
{
 8005178:	4604      	mov	r4, r0
  LST_init_head (&FreeBufQueue);
 800517a:	4628      	mov	r0, r5
 800517c:	f7ff fcd2 	bl	8004b24 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8005180:	480a      	ldr	r0, [pc, #40]	; (80051ac <TL_MM_Init+0x38>)
 8005182:	f7ff fccf 	bl	8004b24 <LST_init_head>
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8005186:	4b0a      	ldr	r3, [pc, #40]	; (80051b0 <TL_MM_Init+0x3c>)
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8005188:	68a2      	ldr	r2, [r4, #8]
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800518a:	691b      	ldr	r3, [r3, #16]
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800518c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800518e:	68e2      	ldr	r2, [r4, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8005190:	e9c3 2503 	strd	r2, r5, [r3, #12]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8005194:	6822      	ldr	r2, [r4, #0]
 8005196:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8005198:	6862      	ldr	r2, [r4, #4]
 800519a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800519c:	6922      	ldr	r2, [r4, #16]
 800519e:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80051a0:	6962      	ldr	r2, [r4, #20]
 80051a2:	619a      	str	r2, [r3, #24]
}
 80051a4:	bd38      	pop	{r3, r4, r5, pc}
 80051a6:	bf00      	nop
 80051a8:	200301c0 	.word	0x200301c0
 80051ac:	20001238 	.word	0x20001238
 80051b0:	20030000 	.word	0x20030000

080051b4 <TL_MM_EvtDone>:
{
 80051b4:	b508      	push	{r3, lr}
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80051b6:	4601      	mov	r1, r0
 80051b8:	4803      	ldr	r0, [pc, #12]	; (80051c8 <TL_MM_EvtDone+0x14>)
 80051ba:	f7ff fccc 	bl	8004b56 <LST_insert_tail>
  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80051be:	4803      	ldr	r0, [pc, #12]	; (80051cc <TL_MM_EvtDone+0x18>)
}
 80051c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80051c4:	f7fc bc42 	b.w	8001a4c <HW_IPCC_MM_SendFreeBuf>
 80051c8:	20001238 	.word	0x20001238
 80051cc:	08004fdd 	.word	0x08004fdd

080051d0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80051d0:	b510      	push	{r4, lr}
  LST_init_head (&TracesEvtQueue);
 80051d2:	4c05      	ldr	r4, [pc, #20]	; (80051e8 <TL_TRACES_Init+0x18>)
 80051d4:	4620      	mov	r0, r4
 80051d6:	f7ff fca5 	bl	8004b24 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80051da:	4b04      	ldr	r3, [pc, #16]	; (80051ec <TL_TRACES_Init+0x1c>)
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	601c      	str	r4, [r3, #0]

  HW_IPCC_TRACES_Init();

  return;
}
 80051e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HW_IPCC_TRACES_Init();
 80051e4:	f7fc bc48 	b.w	8001a78 <HW_IPCC_TRACES_Init>
 80051e8:	200301c8 	.word	0x200301c8
 80051ec:	20030000 	.word	0x20030000

080051f0 <TL_TRACES_EvtReceived>:
}

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
  (void)(hcievt);
}
 80051f0:	4770      	bx	lr
	...

080051f4 <HW_IPCC_TRACES_EvtNot>:
{
 80051f4:	b513      	push	{r0, r1, r4, lr}
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80051f6:	4c07      	ldr	r4, [pc, #28]	; (8005214 <HW_IPCC_TRACES_EvtNot+0x20>)
 80051f8:	4806      	ldr	r0, [pc, #24]	; (8005214 <HW_IPCC_TRACES_EvtNot+0x20>)
 80051fa:	f7ff fc96 	bl	8004b2a <LST_is_empty>
 80051fe:	b108      	cbz	r0, 8005204 <HW_IPCC_TRACES_EvtNot+0x10>
}
 8005200:	b002      	add	sp, #8
 8005202:	bd10      	pop	{r4, pc}
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8005204:	4620      	mov	r0, r4
 8005206:	a901      	add	r1, sp, #4
 8005208:	f7ff fcbc 	bl	8004b84 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800520c:	9801      	ldr	r0, [sp, #4]
 800520e:	f7ff ffef 	bl	80051f0 <TL_TRACES_EvtReceived>
 8005212:	e7f1      	b.n	80051f8 <HW_IPCC_TRACES_EvtNot+0x4>
 8005214:	200301c8 	.word	0x200301c8

08005218 <UTIL_LPM_Init>:
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8005218:	4b02      	ldr	r3, [pc, #8]	; (8005224 <UTIL_LPM_Init+0xc>)
 800521a:	2200      	movs	r2, #0
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800521c:	e9c3 2200 	strd	r2, r2, [r3]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	20001250 	.word	0x20001250

08005228 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8005228:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800522a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800522e:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8005230:	b141      	cbz	r1, 8005244 <UTIL_LPM_SetOffMode+0x1c>
 8005232:	2901      	cmp	r1, #1
 8005234:	d103      	bne.n	800523e <UTIL_LPM_SetOffMode+0x16>
  {
    case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8005236:	4b06      	ldr	r3, [pc, #24]	; (8005250 <UTIL_LPM_SetOffMode+0x28>)
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	4302      	orrs	r2, r0
 800523c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800523e:	f384 8810 	msr	PRIMASK, r4
    default:
      break;
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8005242:	bd10      	pop	{r4, pc}
      OffModeDisable &= ( ~lpm_id_bm );
 8005244:	4902      	ldr	r1, [pc, #8]	; (8005250 <UTIL_LPM_SetOffMode+0x28>)
 8005246:	684b      	ldr	r3, [r1, #4]
 8005248:	ea23 0300 	bic.w	r3, r3, r0
 800524c:	604b      	str	r3, [r1, #4]
      break;
 800524e:	e7f6      	b.n	800523e <UTIL_LPM_SetOffMode+0x16>
 8005250:	20001250 	.word	0x20001250

08005254 <bit_position>:
static uint32_t bit_position(uint32_t value)
{

  uint32_t n = 0;

  if ((value & 0xFFFF0000) == 0)  { n  = 16; value <<= 16;  }
 8005254:	0c03      	lsrs	r3, r0, #16
 8005256:	041b      	lsls	r3, r3, #16
 8005258:	b9a3      	cbnz	r3, 8005284 <bit_position+0x30>
 800525a:	0400      	lsls	r0, r0, #16
 800525c:	2310      	movs	r3, #16
  if ((value & 0xFF000000) == 0)  { n +=  8; value <<=  8;  }
 800525e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005262:	bf04      	itt	eq
 8005264:	0200      	lsleq	r0, r0, #8
 8005266:	3308      	addeq	r3, #8
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 8005268:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800526c:	bf08      	it	eq
 800526e:	0100      	lsleq	r0, r0, #4

  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 8005270:	4a05      	ldr	r2, [pc, #20]	; (8005288 <bit_position+0x34>)
 8005272:	ea4f 7010 	mov.w	r0, r0, lsr #28
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 8005276:	bf08      	it	eq
 8005278:	3304      	addeq	r3, #4
  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 800527a:	5c10      	ldrb	r0, [r2, r0]

  return (31-n);
 800527c:	f1c3 031f 	rsb	r3, r3, #31
}
 8005280:	1a18      	subs	r0, r3, r0
 8005282:	4770      	bx	lr
  uint32_t n = 0;
 8005284:	2300      	movs	r3, #0
 8005286:	e7ea      	b.n	800525e <bit_position+0xa>
 8005288:	08006060 	.word	0x08006060

0800528c <UTIL_SEQ_RegTask>:
{
 800528c:	b510      	push	{r4, lr}
 800528e:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005290:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005294:	b672      	cpsid	i
  TaskCb[bit_position(task_id_bm)] = task;
 8005296:	f7ff ffdd 	bl	8005254 <bit_position>
 800529a:	4b03      	ldr	r3, [pc, #12]	; (80052a8 <UTIL_SEQ_RegTask+0x1c>)
 800529c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80052a0:	6104      	str	r4, [r0, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a2:	f381 8810 	msr	PRIMASK, r1
}
 80052a6:	bd10      	pop	{r4, pc}
 80052a8:	20001258 	.word	0x20001258

080052ac <UTIL_SEQ_SetTask>:
{
 80052ac:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ae:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80052b2:	b672      	cpsid	i
  TaskSet |= task_id_bm;
 80052b4:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <UTIL_SEQ_SetTask+0x24>)
 80052b6:	681c      	ldr	r4, [r3, #0]
 80052b8:	4304      	orrs	r4, r0
 80052ba:	601c      	str	r4, [r3, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 80052bc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80052c0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80052c4:	4302      	orrs	r2, r0
 80052c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ca:	f385 8810 	msr	PRIMASK, r5
}
 80052ce:	bd30      	pop	{r4, r5, pc}
 80052d0:	20001258 	.word	0x20001258

080052d4 <UTIL_SEQ_PauseTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052d4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80052d8:	b672      	cpsid	i
  TaskMask &= (~task_id_bm);
 80052da:	4a04      	ldr	r2, [pc, #16]	; (80052ec <UTIL_SEQ_PauseTask+0x18>)
 80052dc:	6813      	ldr	r3, [r2, #0]
 80052de:	ea23 0300 	bic.w	r3, r3, r0
 80052e2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e4:	f381 8810 	msr	PRIMASK, r1
}
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	20000030 	.word	0x20000030

080052f0 <UTIL_SEQ_ResumeTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052f0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80052f4:	b672      	cpsid	i
  TaskMask |= task_id_bm;
 80052f6:	4a03      	ldr	r2, [pc, #12]	; (8005304 <UTIL_SEQ_ResumeTask+0x14>)
 80052f8:	6813      	ldr	r3, [r2, #0]
 80052fa:	4303      	orrs	r3, r0
 80052fc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052fe:	f381 8810 	msr	PRIMASK, r1
}
 8005302:	4770      	bx	lr
 8005304:	20000030 	.word	0x20000030

08005308 <UTIL_SEQ_SetEvt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005308:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800530c:	b672      	cpsid	i
  EvtSet |= evt_id_bm;
 800530e:	4a03      	ldr	r2, [pc, #12]	; (800531c <UTIL_SEQ_SetEvt+0x14>)
 8005310:	6853      	ldr	r3, [r2, #4]
 8005312:	4303      	orrs	r3, r0
 8005314:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005316:	f381 8810 	msr	PRIMASK, r1
}
 800531a:	4770      	bx	lr
 800531c:	20001258 	.word	0x20001258

08005320 <UTIL_SEQ_PreIdle>:
 8005320:	4770      	bx	lr

08005322 <UTIL_SEQ_PostIdle>:
 8005322:	4770      	bx	lr

08005324 <UTIL_SEQ_Run>:
{
 8005324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  super_mask_backup = SuperMask;
 8005328:	4d32      	ldr	r5, [pc, #200]	; (80053f4 <UTIL_SEQ_Run+0xd0>)
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 800532a:	4f33      	ldr	r7, [pc, #204]	; (80053f8 <UTIL_SEQ_Run+0xd4>)
  super_mask_backup = SuperMask;
 800532c:	686e      	ldr	r6, [r5, #4]
  SuperMask &= mask_bm;
 800532e:	4030      	ands	r0, r6
 8005330:	6068      	str	r0, [r5, #4]
 8005332:	463c      	mov	r4, r7
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 8005334:	e9d5 2000 	ldrd	r2, r0, [r5]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	4013      	ands	r3, r2
 800533c:	4203      	tst	r3, r0
 800533e:	d040      	beq.n	80053c2 <UTIL_SEQ_Run+0x9e>
 8005340:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 8005344:	400b      	ands	r3, r1
 8005346:	d13c      	bne.n	80053c2 <UTIL_SEQ_Run+0x9e>
 8005348:	4002      	ands	r2, r0
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 800534a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800534e:	4010      	ands	r0, r2
 8005350:	d103      	bne.n	800535a <UTIL_SEQ_Run+0x36>
 8005352:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
      counter++;
 8005356:	2301      	movs	r3, #1
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 8005358:	4010      	ands	r0, r2
    if (!(TaskPrio[counter].round_robin & current_task_set))
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	18e2      	adds	r2, r4, r3
 800535e:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
 8005362:	4208      	tst	r0, r1
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8005364:	bf04      	itt	eq
 8005366:	f04f 31ff 	moveq.w	r1, #4294967295
 800536a:	f8c2 1094 	streq.w	r1, [r2, #148]	; 0x94
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 800536e:	18e1      	adds	r1, r4, r3
 8005370:	f8d1 8094 	ldr.w	r8, [r1, #148]	; 0x94
 8005374:	ea08 0000 	and.w	r0, r8, r0
 8005378:	f7ff ff6c 	bl	8005254 <bit_position>
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 800537c:	2301      	movs	r3, #1
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 800537e:	60e0      	str	r0, [r4, #12]
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 8005380:	fa03 f000 	lsl.w	r0, r3, r0
 8005384:	ea28 0000 	bic.w	r0, r8, r0
 8005388:	f8c1 0094 	str.w	r0, [r1, #148]	; 0x94
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800538c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005390:	b672      	cpsid	i
    TaskSet &= ~(1 << (CurrentTaskIdx));
 8005392:	68e2      	ldr	r2, [r4, #12]
 8005394:	4093      	lsls	r3, r2
 8005396:	6822      	ldr	r2, [r4, #0]
 8005398:	43db      	mvns	r3, r3
 800539a:	401a      	ands	r2, r3
 800539c:	6022      	str	r2, [r4, #0]
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 800539e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80053a2:	401a      	ands	r2, r3
 80053a4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 80053a8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80053ac:	4013      	ands	r3, r2
 80053ae:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b2:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 80053b6:	68e3      	ldr	r3, [r4, #12]
 80053b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	4798      	blx	r3
 80053c0:	e7b8      	b.n	8005334 <UTIL_SEQ_Run+0x10>
  UTIL_SEQ_PreIdle( );
 80053c2:	f7ff ffad 	bl	8005320 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053c6:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80053ca:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 80053cc:	682a      	ldr	r2, [r5, #0]
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	4013      	ands	r3, r2
 80053d2:	686a      	ldr	r2, [r5, #4]
 80053d4:	4213      	tst	r3, r2
 80053d6:	d105      	bne.n	80053e4 <UTIL_SEQ_Run+0xc0>
 80053d8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80053dc:	421a      	tst	r2, r3
 80053de:	d101      	bne.n	80053e4 <UTIL_SEQ_Run+0xc0>
    UTIL_SEQ_Idle( );
 80053e0:	f7fb f9ce 	bl	8000780 <UTIL_SEQ_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e4:	f387 8810 	msr	PRIMASK, r7
  UTIL_SEQ_PostIdle( );
 80053e8:	f7ff ff9b 	bl	8005322 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 80053ec:	606e      	str	r6, [r5, #4]
}
 80053ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053f2:	bf00      	nop
 80053f4:	20000030 	.word	0x20000030
 80053f8:	20001258 	.word	0x20001258

080053fc <UTIL_SEQ_WaitEvt>:
{
 80053fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  current_task_id_bm = (1 << CurrentTaskIdx);
 80053fe:	4c0b      	ldr	r4, [pc, #44]	; (800542c <UTIL_SEQ_WaitEvt+0x30>)
 8005400:	68e3      	ldr	r3, [r4, #12]
  event_waited_id_backup = EvtWaited;
 8005402:	68a7      	ldr	r7, [r4, #8]
  EvtWaited = evt_id_bm;
 8005404:	60a0      	str	r0, [r4, #8]
  current_task_id_bm = (1 << CurrentTaskIdx);
 8005406:	2601      	movs	r6, #1
 8005408:	409e      	lsls	r6, r3
  while((EvtSet & EvtWaited) == 0)
 800540a:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
 800540e:	420d      	tst	r5, r1
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 8005410:	4630      	mov	r0, r6
  while((EvtSet & EvtWaited) == 0)
 8005412:	d007      	beq.n	8005424 <UTIL_SEQ_WaitEvt+0x28>
  CurrentTaskIdx = bit_position(current_task_id_bm);
 8005414:	f7ff ff1e 	bl	8005254 <bit_position>
  EvtSet &= (~EvtWaited);
 8005418:	ea25 0501 	bic.w	r5, r5, r1
  CurrentTaskIdx = bit_position(current_task_id_bm);
 800541c:	60e0      	str	r0, [r4, #12]
  EvtWaited = event_waited_id_backup;
 800541e:	e9c4 5701 	strd	r5, r7, [r4, #4]
}
 8005422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 8005424:	f7fb f9ad 	bl	8000782 <UTIL_SEQ_EvtIdle>
 8005428:	e7ef      	b.n	800540a <UTIL_SEQ_WaitEvt+0xe>
 800542a:	bf00      	nop
 800542c:	20001258 	.word	0x20001258

08005430 <__errno>:
 8005430:	4b01      	ldr	r3, [pc, #4]	; (8005438 <__errno+0x8>)
 8005432:	6818      	ldr	r0, [r3, #0]
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	20000038 	.word	0x20000038

0800543c <__libc_init_array>:
 800543c:	b570      	push	{r4, r5, r6, lr}
 800543e:	4e0d      	ldr	r6, [pc, #52]	; (8005474 <__libc_init_array+0x38>)
 8005440:	4c0d      	ldr	r4, [pc, #52]	; (8005478 <__libc_init_array+0x3c>)
 8005442:	1ba4      	subs	r4, r4, r6
 8005444:	10a4      	asrs	r4, r4, #2
 8005446:	2500      	movs	r5, #0
 8005448:	42a5      	cmp	r5, r4
 800544a:	d109      	bne.n	8005460 <__libc_init_array+0x24>
 800544c:	4e0b      	ldr	r6, [pc, #44]	; (800547c <__libc_init_array+0x40>)
 800544e:	4c0c      	ldr	r4, [pc, #48]	; (8005480 <__libc_init_array+0x44>)
 8005450:	f000 fc94 	bl	8005d7c <_init>
 8005454:	1ba4      	subs	r4, r4, r6
 8005456:	10a4      	asrs	r4, r4, #2
 8005458:	2500      	movs	r5, #0
 800545a:	42a5      	cmp	r5, r4
 800545c:	d105      	bne.n	800546a <__libc_init_array+0x2e>
 800545e:	bd70      	pop	{r4, r5, r6, pc}
 8005460:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005464:	4798      	blx	r3
 8005466:	3501      	adds	r5, #1
 8005468:	e7ee      	b.n	8005448 <__libc_init_array+0xc>
 800546a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800546e:	4798      	blx	r3
 8005470:	3501      	adds	r5, #1
 8005472:	e7f2      	b.n	800545a <__libc_init_array+0x1e>
 8005474:	0800616c 	.word	0x0800616c
 8005478:	0800616c 	.word	0x0800616c
 800547c:	0800616c 	.word	0x0800616c
 8005480:	08006170 	.word	0x08006170

08005484 <memcpy>:
 8005484:	b510      	push	{r4, lr}
 8005486:	1e43      	subs	r3, r0, #1
 8005488:	440a      	add	r2, r1
 800548a:	4291      	cmp	r1, r2
 800548c:	d100      	bne.n	8005490 <memcpy+0xc>
 800548e:	bd10      	pop	{r4, pc}
 8005490:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005494:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005498:	e7f7      	b.n	800548a <memcpy+0x6>

0800549a <memset>:
 800549a:	4402      	add	r2, r0
 800549c:	4603      	mov	r3, r0
 800549e:	4293      	cmp	r3, r2
 80054a0:	d100      	bne.n	80054a4 <memset+0xa>
 80054a2:	4770      	bx	lr
 80054a4:	f803 1b01 	strb.w	r1, [r3], #1
 80054a8:	e7f9      	b.n	800549e <memset+0x4>
	...

080054ac <_puts_r>:
 80054ac:	b570      	push	{r4, r5, r6, lr}
 80054ae:	460e      	mov	r6, r1
 80054b0:	4605      	mov	r5, r0
 80054b2:	b118      	cbz	r0, 80054bc <_puts_r+0x10>
 80054b4:	6983      	ldr	r3, [r0, #24]
 80054b6:	b90b      	cbnz	r3, 80054bc <_puts_r+0x10>
 80054b8:	f000 fa0c 	bl	80058d4 <__sinit>
 80054bc:	69ab      	ldr	r3, [r5, #24]
 80054be:	68ac      	ldr	r4, [r5, #8]
 80054c0:	b913      	cbnz	r3, 80054c8 <_puts_r+0x1c>
 80054c2:	4628      	mov	r0, r5
 80054c4:	f000 fa06 	bl	80058d4 <__sinit>
 80054c8:	4b23      	ldr	r3, [pc, #140]	; (8005558 <_puts_r+0xac>)
 80054ca:	429c      	cmp	r4, r3
 80054cc:	d117      	bne.n	80054fe <_puts_r+0x52>
 80054ce:	686c      	ldr	r4, [r5, #4]
 80054d0:	89a3      	ldrh	r3, [r4, #12]
 80054d2:	071b      	lsls	r3, r3, #28
 80054d4:	d51d      	bpl.n	8005512 <_puts_r+0x66>
 80054d6:	6923      	ldr	r3, [r4, #16]
 80054d8:	b1db      	cbz	r3, 8005512 <_puts_r+0x66>
 80054da:	3e01      	subs	r6, #1
 80054dc:	68a3      	ldr	r3, [r4, #8]
 80054de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054e2:	3b01      	subs	r3, #1
 80054e4:	60a3      	str	r3, [r4, #8]
 80054e6:	b9e9      	cbnz	r1, 8005524 <_puts_r+0x78>
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	da2e      	bge.n	800554a <_puts_r+0x9e>
 80054ec:	4622      	mov	r2, r4
 80054ee:	210a      	movs	r1, #10
 80054f0:	4628      	mov	r0, r5
 80054f2:	f000 f83f 	bl	8005574 <__swbuf_r>
 80054f6:	3001      	adds	r0, #1
 80054f8:	d011      	beq.n	800551e <_puts_r+0x72>
 80054fa:	200a      	movs	r0, #10
 80054fc:	e011      	b.n	8005522 <_puts_r+0x76>
 80054fe:	4b17      	ldr	r3, [pc, #92]	; (800555c <_puts_r+0xb0>)
 8005500:	429c      	cmp	r4, r3
 8005502:	d101      	bne.n	8005508 <_puts_r+0x5c>
 8005504:	68ac      	ldr	r4, [r5, #8]
 8005506:	e7e3      	b.n	80054d0 <_puts_r+0x24>
 8005508:	4b15      	ldr	r3, [pc, #84]	; (8005560 <_puts_r+0xb4>)
 800550a:	429c      	cmp	r4, r3
 800550c:	bf08      	it	eq
 800550e:	68ec      	ldreq	r4, [r5, #12]
 8005510:	e7de      	b.n	80054d0 <_puts_r+0x24>
 8005512:	4621      	mov	r1, r4
 8005514:	4628      	mov	r0, r5
 8005516:	f000 f87f 	bl	8005618 <__swsetup_r>
 800551a:	2800      	cmp	r0, #0
 800551c:	d0dd      	beq.n	80054da <_puts_r+0x2e>
 800551e:	f04f 30ff 	mov.w	r0, #4294967295
 8005522:	bd70      	pop	{r4, r5, r6, pc}
 8005524:	2b00      	cmp	r3, #0
 8005526:	da04      	bge.n	8005532 <_puts_r+0x86>
 8005528:	69a2      	ldr	r2, [r4, #24]
 800552a:	429a      	cmp	r2, r3
 800552c:	dc06      	bgt.n	800553c <_puts_r+0x90>
 800552e:	290a      	cmp	r1, #10
 8005530:	d004      	beq.n	800553c <_puts_r+0x90>
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	6022      	str	r2, [r4, #0]
 8005538:	7019      	strb	r1, [r3, #0]
 800553a:	e7cf      	b.n	80054dc <_puts_r+0x30>
 800553c:	4622      	mov	r2, r4
 800553e:	4628      	mov	r0, r5
 8005540:	f000 f818 	bl	8005574 <__swbuf_r>
 8005544:	3001      	adds	r0, #1
 8005546:	d1c9      	bne.n	80054dc <_puts_r+0x30>
 8005548:	e7e9      	b.n	800551e <_puts_r+0x72>
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	200a      	movs	r0, #10
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	6022      	str	r2, [r4, #0]
 8005552:	7018      	strb	r0, [r3, #0]
 8005554:	e7e5      	b.n	8005522 <_puts_r+0x76>
 8005556:	bf00      	nop
 8005558:	08006124 	.word	0x08006124
 800555c:	08006144 	.word	0x08006144
 8005560:	08006104 	.word	0x08006104

08005564 <puts>:
 8005564:	4b02      	ldr	r3, [pc, #8]	; (8005570 <puts+0xc>)
 8005566:	4601      	mov	r1, r0
 8005568:	6818      	ldr	r0, [r3, #0]
 800556a:	f7ff bf9f 	b.w	80054ac <_puts_r>
 800556e:	bf00      	nop
 8005570:	20000038 	.word	0x20000038

08005574 <__swbuf_r>:
 8005574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005576:	460e      	mov	r6, r1
 8005578:	4614      	mov	r4, r2
 800557a:	4605      	mov	r5, r0
 800557c:	b118      	cbz	r0, 8005586 <__swbuf_r+0x12>
 800557e:	6983      	ldr	r3, [r0, #24]
 8005580:	b90b      	cbnz	r3, 8005586 <__swbuf_r+0x12>
 8005582:	f000 f9a7 	bl	80058d4 <__sinit>
 8005586:	4b21      	ldr	r3, [pc, #132]	; (800560c <__swbuf_r+0x98>)
 8005588:	429c      	cmp	r4, r3
 800558a:	d12a      	bne.n	80055e2 <__swbuf_r+0x6e>
 800558c:	686c      	ldr	r4, [r5, #4]
 800558e:	69a3      	ldr	r3, [r4, #24]
 8005590:	60a3      	str	r3, [r4, #8]
 8005592:	89a3      	ldrh	r3, [r4, #12]
 8005594:	071a      	lsls	r2, r3, #28
 8005596:	d52e      	bpl.n	80055f6 <__swbuf_r+0x82>
 8005598:	6923      	ldr	r3, [r4, #16]
 800559a:	b363      	cbz	r3, 80055f6 <__swbuf_r+0x82>
 800559c:	6923      	ldr	r3, [r4, #16]
 800559e:	6820      	ldr	r0, [r4, #0]
 80055a0:	1ac0      	subs	r0, r0, r3
 80055a2:	6963      	ldr	r3, [r4, #20]
 80055a4:	b2f6      	uxtb	r6, r6
 80055a6:	4283      	cmp	r3, r0
 80055a8:	4637      	mov	r7, r6
 80055aa:	dc04      	bgt.n	80055b6 <__swbuf_r+0x42>
 80055ac:	4621      	mov	r1, r4
 80055ae:	4628      	mov	r0, r5
 80055b0:	f000 f926 	bl	8005800 <_fflush_r>
 80055b4:	bb28      	cbnz	r0, 8005602 <__swbuf_r+0x8e>
 80055b6:	68a3      	ldr	r3, [r4, #8]
 80055b8:	3b01      	subs	r3, #1
 80055ba:	60a3      	str	r3, [r4, #8]
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	1c5a      	adds	r2, r3, #1
 80055c0:	6022      	str	r2, [r4, #0]
 80055c2:	701e      	strb	r6, [r3, #0]
 80055c4:	6963      	ldr	r3, [r4, #20]
 80055c6:	3001      	adds	r0, #1
 80055c8:	4283      	cmp	r3, r0
 80055ca:	d004      	beq.n	80055d6 <__swbuf_r+0x62>
 80055cc:	89a3      	ldrh	r3, [r4, #12]
 80055ce:	07db      	lsls	r3, r3, #31
 80055d0:	d519      	bpl.n	8005606 <__swbuf_r+0x92>
 80055d2:	2e0a      	cmp	r6, #10
 80055d4:	d117      	bne.n	8005606 <__swbuf_r+0x92>
 80055d6:	4621      	mov	r1, r4
 80055d8:	4628      	mov	r0, r5
 80055da:	f000 f911 	bl	8005800 <_fflush_r>
 80055de:	b190      	cbz	r0, 8005606 <__swbuf_r+0x92>
 80055e0:	e00f      	b.n	8005602 <__swbuf_r+0x8e>
 80055e2:	4b0b      	ldr	r3, [pc, #44]	; (8005610 <__swbuf_r+0x9c>)
 80055e4:	429c      	cmp	r4, r3
 80055e6:	d101      	bne.n	80055ec <__swbuf_r+0x78>
 80055e8:	68ac      	ldr	r4, [r5, #8]
 80055ea:	e7d0      	b.n	800558e <__swbuf_r+0x1a>
 80055ec:	4b09      	ldr	r3, [pc, #36]	; (8005614 <__swbuf_r+0xa0>)
 80055ee:	429c      	cmp	r4, r3
 80055f0:	bf08      	it	eq
 80055f2:	68ec      	ldreq	r4, [r5, #12]
 80055f4:	e7cb      	b.n	800558e <__swbuf_r+0x1a>
 80055f6:	4621      	mov	r1, r4
 80055f8:	4628      	mov	r0, r5
 80055fa:	f000 f80d 	bl	8005618 <__swsetup_r>
 80055fe:	2800      	cmp	r0, #0
 8005600:	d0cc      	beq.n	800559c <__swbuf_r+0x28>
 8005602:	f04f 37ff 	mov.w	r7, #4294967295
 8005606:	4638      	mov	r0, r7
 8005608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800560a:	bf00      	nop
 800560c:	08006124 	.word	0x08006124
 8005610:	08006144 	.word	0x08006144
 8005614:	08006104 	.word	0x08006104

08005618 <__swsetup_r>:
 8005618:	4b32      	ldr	r3, [pc, #200]	; (80056e4 <__swsetup_r+0xcc>)
 800561a:	b570      	push	{r4, r5, r6, lr}
 800561c:	681d      	ldr	r5, [r3, #0]
 800561e:	4606      	mov	r6, r0
 8005620:	460c      	mov	r4, r1
 8005622:	b125      	cbz	r5, 800562e <__swsetup_r+0x16>
 8005624:	69ab      	ldr	r3, [r5, #24]
 8005626:	b913      	cbnz	r3, 800562e <__swsetup_r+0x16>
 8005628:	4628      	mov	r0, r5
 800562a:	f000 f953 	bl	80058d4 <__sinit>
 800562e:	4b2e      	ldr	r3, [pc, #184]	; (80056e8 <__swsetup_r+0xd0>)
 8005630:	429c      	cmp	r4, r3
 8005632:	d10f      	bne.n	8005654 <__swsetup_r+0x3c>
 8005634:	686c      	ldr	r4, [r5, #4]
 8005636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800563a:	b29a      	uxth	r2, r3
 800563c:	0715      	lsls	r5, r2, #28
 800563e:	d42c      	bmi.n	800569a <__swsetup_r+0x82>
 8005640:	06d0      	lsls	r0, r2, #27
 8005642:	d411      	bmi.n	8005668 <__swsetup_r+0x50>
 8005644:	2209      	movs	r2, #9
 8005646:	6032      	str	r2, [r6, #0]
 8005648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800564c:	81a3      	strh	r3, [r4, #12]
 800564e:	f04f 30ff 	mov.w	r0, #4294967295
 8005652:	e03e      	b.n	80056d2 <__swsetup_r+0xba>
 8005654:	4b25      	ldr	r3, [pc, #148]	; (80056ec <__swsetup_r+0xd4>)
 8005656:	429c      	cmp	r4, r3
 8005658:	d101      	bne.n	800565e <__swsetup_r+0x46>
 800565a:	68ac      	ldr	r4, [r5, #8]
 800565c:	e7eb      	b.n	8005636 <__swsetup_r+0x1e>
 800565e:	4b24      	ldr	r3, [pc, #144]	; (80056f0 <__swsetup_r+0xd8>)
 8005660:	429c      	cmp	r4, r3
 8005662:	bf08      	it	eq
 8005664:	68ec      	ldreq	r4, [r5, #12]
 8005666:	e7e6      	b.n	8005636 <__swsetup_r+0x1e>
 8005668:	0751      	lsls	r1, r2, #29
 800566a:	d512      	bpl.n	8005692 <__swsetup_r+0x7a>
 800566c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800566e:	b141      	cbz	r1, 8005682 <__swsetup_r+0x6a>
 8005670:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005674:	4299      	cmp	r1, r3
 8005676:	d002      	beq.n	800567e <__swsetup_r+0x66>
 8005678:	4630      	mov	r0, r6
 800567a:	f000 fa19 	bl	8005ab0 <_free_r>
 800567e:	2300      	movs	r3, #0
 8005680:	6363      	str	r3, [r4, #52]	; 0x34
 8005682:	89a3      	ldrh	r3, [r4, #12]
 8005684:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005688:	81a3      	strh	r3, [r4, #12]
 800568a:	2300      	movs	r3, #0
 800568c:	6063      	str	r3, [r4, #4]
 800568e:	6923      	ldr	r3, [r4, #16]
 8005690:	6023      	str	r3, [r4, #0]
 8005692:	89a3      	ldrh	r3, [r4, #12]
 8005694:	f043 0308 	orr.w	r3, r3, #8
 8005698:	81a3      	strh	r3, [r4, #12]
 800569a:	6923      	ldr	r3, [r4, #16]
 800569c:	b94b      	cbnz	r3, 80056b2 <__swsetup_r+0x9a>
 800569e:	89a3      	ldrh	r3, [r4, #12]
 80056a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056a8:	d003      	beq.n	80056b2 <__swsetup_r+0x9a>
 80056aa:	4621      	mov	r1, r4
 80056ac:	4630      	mov	r0, r6
 80056ae:	f000 f9bf 	bl	8005a30 <__smakebuf_r>
 80056b2:	89a2      	ldrh	r2, [r4, #12]
 80056b4:	f012 0301 	ands.w	r3, r2, #1
 80056b8:	d00c      	beq.n	80056d4 <__swsetup_r+0xbc>
 80056ba:	2300      	movs	r3, #0
 80056bc:	60a3      	str	r3, [r4, #8]
 80056be:	6963      	ldr	r3, [r4, #20]
 80056c0:	425b      	negs	r3, r3
 80056c2:	61a3      	str	r3, [r4, #24]
 80056c4:	6923      	ldr	r3, [r4, #16]
 80056c6:	b953      	cbnz	r3, 80056de <__swsetup_r+0xc6>
 80056c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056cc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80056d0:	d1ba      	bne.n	8005648 <__swsetup_r+0x30>
 80056d2:	bd70      	pop	{r4, r5, r6, pc}
 80056d4:	0792      	lsls	r2, r2, #30
 80056d6:	bf58      	it	pl
 80056d8:	6963      	ldrpl	r3, [r4, #20]
 80056da:	60a3      	str	r3, [r4, #8]
 80056dc:	e7f2      	b.n	80056c4 <__swsetup_r+0xac>
 80056de:	2000      	movs	r0, #0
 80056e0:	e7f7      	b.n	80056d2 <__swsetup_r+0xba>
 80056e2:	bf00      	nop
 80056e4:	20000038 	.word	0x20000038
 80056e8:	08006124 	.word	0x08006124
 80056ec:	08006144 	.word	0x08006144
 80056f0:	08006104 	.word	0x08006104

080056f4 <__sflush_r>:
 80056f4:	898a      	ldrh	r2, [r1, #12]
 80056f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056fa:	4605      	mov	r5, r0
 80056fc:	0710      	lsls	r0, r2, #28
 80056fe:	460c      	mov	r4, r1
 8005700:	d458      	bmi.n	80057b4 <__sflush_r+0xc0>
 8005702:	684b      	ldr	r3, [r1, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	dc05      	bgt.n	8005714 <__sflush_r+0x20>
 8005708:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800570a:	2b00      	cmp	r3, #0
 800570c:	dc02      	bgt.n	8005714 <__sflush_r+0x20>
 800570e:	2000      	movs	r0, #0
 8005710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005714:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005716:	2e00      	cmp	r6, #0
 8005718:	d0f9      	beq.n	800570e <__sflush_r+0x1a>
 800571a:	2300      	movs	r3, #0
 800571c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005720:	682f      	ldr	r7, [r5, #0]
 8005722:	6a21      	ldr	r1, [r4, #32]
 8005724:	602b      	str	r3, [r5, #0]
 8005726:	d032      	beq.n	800578e <__sflush_r+0x9a>
 8005728:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800572a:	89a3      	ldrh	r3, [r4, #12]
 800572c:	075a      	lsls	r2, r3, #29
 800572e:	d505      	bpl.n	800573c <__sflush_r+0x48>
 8005730:	6863      	ldr	r3, [r4, #4]
 8005732:	1ac0      	subs	r0, r0, r3
 8005734:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005736:	b10b      	cbz	r3, 800573c <__sflush_r+0x48>
 8005738:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800573a:	1ac0      	subs	r0, r0, r3
 800573c:	2300      	movs	r3, #0
 800573e:	4602      	mov	r2, r0
 8005740:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005742:	6a21      	ldr	r1, [r4, #32]
 8005744:	4628      	mov	r0, r5
 8005746:	47b0      	blx	r6
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	89a3      	ldrh	r3, [r4, #12]
 800574c:	d106      	bne.n	800575c <__sflush_r+0x68>
 800574e:	6829      	ldr	r1, [r5, #0]
 8005750:	291d      	cmp	r1, #29
 8005752:	d848      	bhi.n	80057e6 <__sflush_r+0xf2>
 8005754:	4a29      	ldr	r2, [pc, #164]	; (80057fc <__sflush_r+0x108>)
 8005756:	40ca      	lsrs	r2, r1
 8005758:	07d6      	lsls	r6, r2, #31
 800575a:	d544      	bpl.n	80057e6 <__sflush_r+0xf2>
 800575c:	2200      	movs	r2, #0
 800575e:	6062      	str	r2, [r4, #4]
 8005760:	04d9      	lsls	r1, r3, #19
 8005762:	6922      	ldr	r2, [r4, #16]
 8005764:	6022      	str	r2, [r4, #0]
 8005766:	d504      	bpl.n	8005772 <__sflush_r+0x7e>
 8005768:	1c42      	adds	r2, r0, #1
 800576a:	d101      	bne.n	8005770 <__sflush_r+0x7c>
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	b903      	cbnz	r3, 8005772 <__sflush_r+0x7e>
 8005770:	6560      	str	r0, [r4, #84]	; 0x54
 8005772:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005774:	602f      	str	r7, [r5, #0]
 8005776:	2900      	cmp	r1, #0
 8005778:	d0c9      	beq.n	800570e <__sflush_r+0x1a>
 800577a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800577e:	4299      	cmp	r1, r3
 8005780:	d002      	beq.n	8005788 <__sflush_r+0x94>
 8005782:	4628      	mov	r0, r5
 8005784:	f000 f994 	bl	8005ab0 <_free_r>
 8005788:	2000      	movs	r0, #0
 800578a:	6360      	str	r0, [r4, #52]	; 0x34
 800578c:	e7c0      	b.n	8005710 <__sflush_r+0x1c>
 800578e:	2301      	movs	r3, #1
 8005790:	4628      	mov	r0, r5
 8005792:	47b0      	blx	r6
 8005794:	1c41      	adds	r1, r0, #1
 8005796:	d1c8      	bne.n	800572a <__sflush_r+0x36>
 8005798:	682b      	ldr	r3, [r5, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0c5      	beq.n	800572a <__sflush_r+0x36>
 800579e:	2b1d      	cmp	r3, #29
 80057a0:	d001      	beq.n	80057a6 <__sflush_r+0xb2>
 80057a2:	2b16      	cmp	r3, #22
 80057a4:	d101      	bne.n	80057aa <__sflush_r+0xb6>
 80057a6:	602f      	str	r7, [r5, #0]
 80057a8:	e7b1      	b.n	800570e <__sflush_r+0x1a>
 80057aa:	89a3      	ldrh	r3, [r4, #12]
 80057ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057b0:	81a3      	strh	r3, [r4, #12]
 80057b2:	e7ad      	b.n	8005710 <__sflush_r+0x1c>
 80057b4:	690f      	ldr	r7, [r1, #16]
 80057b6:	2f00      	cmp	r7, #0
 80057b8:	d0a9      	beq.n	800570e <__sflush_r+0x1a>
 80057ba:	0793      	lsls	r3, r2, #30
 80057bc:	680e      	ldr	r6, [r1, #0]
 80057be:	bf08      	it	eq
 80057c0:	694b      	ldreq	r3, [r1, #20]
 80057c2:	600f      	str	r7, [r1, #0]
 80057c4:	bf18      	it	ne
 80057c6:	2300      	movne	r3, #0
 80057c8:	eba6 0807 	sub.w	r8, r6, r7
 80057cc:	608b      	str	r3, [r1, #8]
 80057ce:	f1b8 0f00 	cmp.w	r8, #0
 80057d2:	dd9c      	ble.n	800570e <__sflush_r+0x1a>
 80057d4:	4643      	mov	r3, r8
 80057d6:	463a      	mov	r2, r7
 80057d8:	6a21      	ldr	r1, [r4, #32]
 80057da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057dc:	4628      	mov	r0, r5
 80057de:	47b0      	blx	r6
 80057e0:	2800      	cmp	r0, #0
 80057e2:	dc06      	bgt.n	80057f2 <__sflush_r+0xfe>
 80057e4:	89a3      	ldrh	r3, [r4, #12]
 80057e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057ea:	81a3      	strh	r3, [r4, #12]
 80057ec:	f04f 30ff 	mov.w	r0, #4294967295
 80057f0:	e78e      	b.n	8005710 <__sflush_r+0x1c>
 80057f2:	4407      	add	r7, r0
 80057f4:	eba8 0800 	sub.w	r8, r8, r0
 80057f8:	e7e9      	b.n	80057ce <__sflush_r+0xda>
 80057fa:	bf00      	nop
 80057fc:	20400001 	.word	0x20400001

08005800 <_fflush_r>:
 8005800:	b538      	push	{r3, r4, r5, lr}
 8005802:	690b      	ldr	r3, [r1, #16]
 8005804:	4605      	mov	r5, r0
 8005806:	460c      	mov	r4, r1
 8005808:	b1db      	cbz	r3, 8005842 <_fflush_r+0x42>
 800580a:	b118      	cbz	r0, 8005814 <_fflush_r+0x14>
 800580c:	6983      	ldr	r3, [r0, #24]
 800580e:	b90b      	cbnz	r3, 8005814 <_fflush_r+0x14>
 8005810:	f000 f860 	bl	80058d4 <__sinit>
 8005814:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <_fflush_r+0x48>)
 8005816:	429c      	cmp	r4, r3
 8005818:	d109      	bne.n	800582e <_fflush_r+0x2e>
 800581a:	686c      	ldr	r4, [r5, #4]
 800581c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005820:	b17b      	cbz	r3, 8005842 <_fflush_r+0x42>
 8005822:	4621      	mov	r1, r4
 8005824:	4628      	mov	r0, r5
 8005826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800582a:	f7ff bf63 	b.w	80056f4 <__sflush_r>
 800582e:	4b07      	ldr	r3, [pc, #28]	; (800584c <_fflush_r+0x4c>)
 8005830:	429c      	cmp	r4, r3
 8005832:	d101      	bne.n	8005838 <_fflush_r+0x38>
 8005834:	68ac      	ldr	r4, [r5, #8]
 8005836:	e7f1      	b.n	800581c <_fflush_r+0x1c>
 8005838:	4b05      	ldr	r3, [pc, #20]	; (8005850 <_fflush_r+0x50>)
 800583a:	429c      	cmp	r4, r3
 800583c:	bf08      	it	eq
 800583e:	68ec      	ldreq	r4, [r5, #12]
 8005840:	e7ec      	b.n	800581c <_fflush_r+0x1c>
 8005842:	2000      	movs	r0, #0
 8005844:	bd38      	pop	{r3, r4, r5, pc}
 8005846:	bf00      	nop
 8005848:	08006124 	.word	0x08006124
 800584c:	08006144 	.word	0x08006144
 8005850:	08006104 	.word	0x08006104

08005854 <std>:
 8005854:	2300      	movs	r3, #0
 8005856:	b510      	push	{r4, lr}
 8005858:	4604      	mov	r4, r0
 800585a:	e9c0 3300 	strd	r3, r3, [r0]
 800585e:	6083      	str	r3, [r0, #8]
 8005860:	8181      	strh	r1, [r0, #12]
 8005862:	6643      	str	r3, [r0, #100]	; 0x64
 8005864:	81c2      	strh	r2, [r0, #14]
 8005866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800586a:	6183      	str	r3, [r0, #24]
 800586c:	4619      	mov	r1, r3
 800586e:	2208      	movs	r2, #8
 8005870:	305c      	adds	r0, #92	; 0x5c
 8005872:	f7ff fe12 	bl	800549a <memset>
 8005876:	4b05      	ldr	r3, [pc, #20]	; (800588c <std+0x38>)
 8005878:	6263      	str	r3, [r4, #36]	; 0x24
 800587a:	4b05      	ldr	r3, [pc, #20]	; (8005890 <std+0x3c>)
 800587c:	62a3      	str	r3, [r4, #40]	; 0x28
 800587e:	4b05      	ldr	r3, [pc, #20]	; (8005894 <std+0x40>)
 8005880:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005882:	4b05      	ldr	r3, [pc, #20]	; (8005898 <std+0x44>)
 8005884:	6224      	str	r4, [r4, #32]
 8005886:	6323      	str	r3, [r4, #48]	; 0x30
 8005888:	bd10      	pop	{r4, pc}
 800588a:	bf00      	nop
 800588c:	08005c21 	.word	0x08005c21
 8005890:	08005c43 	.word	0x08005c43
 8005894:	08005c7b 	.word	0x08005c7b
 8005898:	08005c9f 	.word	0x08005c9f

0800589c <_cleanup_r>:
 800589c:	4901      	ldr	r1, [pc, #4]	; (80058a4 <_cleanup_r+0x8>)
 800589e:	f000 b885 	b.w	80059ac <_fwalk_reent>
 80058a2:	bf00      	nop
 80058a4:	08005801 	.word	0x08005801

080058a8 <__sfmoreglue>:
 80058a8:	b570      	push	{r4, r5, r6, lr}
 80058aa:	1e4a      	subs	r2, r1, #1
 80058ac:	2568      	movs	r5, #104	; 0x68
 80058ae:	4355      	muls	r5, r2
 80058b0:	460e      	mov	r6, r1
 80058b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80058b6:	f000 f949 	bl	8005b4c <_malloc_r>
 80058ba:	4604      	mov	r4, r0
 80058bc:	b140      	cbz	r0, 80058d0 <__sfmoreglue+0x28>
 80058be:	2100      	movs	r1, #0
 80058c0:	e9c0 1600 	strd	r1, r6, [r0]
 80058c4:	300c      	adds	r0, #12
 80058c6:	60a0      	str	r0, [r4, #8]
 80058c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80058cc:	f7ff fde5 	bl	800549a <memset>
 80058d0:	4620      	mov	r0, r4
 80058d2:	bd70      	pop	{r4, r5, r6, pc}

080058d4 <__sinit>:
 80058d4:	6983      	ldr	r3, [r0, #24]
 80058d6:	b510      	push	{r4, lr}
 80058d8:	4604      	mov	r4, r0
 80058da:	bb33      	cbnz	r3, 800592a <__sinit+0x56>
 80058dc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80058e0:	6503      	str	r3, [r0, #80]	; 0x50
 80058e2:	4b12      	ldr	r3, [pc, #72]	; (800592c <__sinit+0x58>)
 80058e4:	4a12      	ldr	r2, [pc, #72]	; (8005930 <__sinit+0x5c>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6282      	str	r2, [r0, #40]	; 0x28
 80058ea:	4298      	cmp	r0, r3
 80058ec:	bf04      	itt	eq
 80058ee:	2301      	moveq	r3, #1
 80058f0:	6183      	streq	r3, [r0, #24]
 80058f2:	f000 f81f 	bl	8005934 <__sfp>
 80058f6:	6060      	str	r0, [r4, #4]
 80058f8:	4620      	mov	r0, r4
 80058fa:	f000 f81b 	bl	8005934 <__sfp>
 80058fe:	60a0      	str	r0, [r4, #8]
 8005900:	4620      	mov	r0, r4
 8005902:	f000 f817 	bl	8005934 <__sfp>
 8005906:	2200      	movs	r2, #0
 8005908:	60e0      	str	r0, [r4, #12]
 800590a:	2104      	movs	r1, #4
 800590c:	6860      	ldr	r0, [r4, #4]
 800590e:	f7ff ffa1 	bl	8005854 <std>
 8005912:	2201      	movs	r2, #1
 8005914:	2109      	movs	r1, #9
 8005916:	68a0      	ldr	r0, [r4, #8]
 8005918:	f7ff ff9c 	bl	8005854 <std>
 800591c:	2202      	movs	r2, #2
 800591e:	2112      	movs	r1, #18
 8005920:	68e0      	ldr	r0, [r4, #12]
 8005922:	f7ff ff97 	bl	8005854 <std>
 8005926:	2301      	movs	r3, #1
 8005928:	61a3      	str	r3, [r4, #24]
 800592a:	bd10      	pop	{r4, pc}
 800592c:	08006100 	.word	0x08006100
 8005930:	0800589d 	.word	0x0800589d

08005934 <__sfp>:
 8005934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005936:	4b1b      	ldr	r3, [pc, #108]	; (80059a4 <__sfp+0x70>)
 8005938:	681e      	ldr	r6, [r3, #0]
 800593a:	69b3      	ldr	r3, [r6, #24]
 800593c:	4607      	mov	r7, r0
 800593e:	b913      	cbnz	r3, 8005946 <__sfp+0x12>
 8005940:	4630      	mov	r0, r6
 8005942:	f7ff ffc7 	bl	80058d4 <__sinit>
 8005946:	3648      	adds	r6, #72	; 0x48
 8005948:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800594c:	3b01      	subs	r3, #1
 800594e:	d503      	bpl.n	8005958 <__sfp+0x24>
 8005950:	6833      	ldr	r3, [r6, #0]
 8005952:	b133      	cbz	r3, 8005962 <__sfp+0x2e>
 8005954:	6836      	ldr	r6, [r6, #0]
 8005956:	e7f7      	b.n	8005948 <__sfp+0x14>
 8005958:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800595c:	b16d      	cbz	r5, 800597a <__sfp+0x46>
 800595e:	3468      	adds	r4, #104	; 0x68
 8005960:	e7f4      	b.n	800594c <__sfp+0x18>
 8005962:	2104      	movs	r1, #4
 8005964:	4638      	mov	r0, r7
 8005966:	f7ff ff9f 	bl	80058a8 <__sfmoreglue>
 800596a:	6030      	str	r0, [r6, #0]
 800596c:	2800      	cmp	r0, #0
 800596e:	d1f1      	bne.n	8005954 <__sfp+0x20>
 8005970:	230c      	movs	r3, #12
 8005972:	603b      	str	r3, [r7, #0]
 8005974:	4604      	mov	r4, r0
 8005976:	4620      	mov	r0, r4
 8005978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800597a:	4b0b      	ldr	r3, [pc, #44]	; (80059a8 <__sfp+0x74>)
 800597c:	6665      	str	r5, [r4, #100]	; 0x64
 800597e:	e9c4 5500 	strd	r5, r5, [r4]
 8005982:	60a5      	str	r5, [r4, #8]
 8005984:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005988:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800598c:	2208      	movs	r2, #8
 800598e:	4629      	mov	r1, r5
 8005990:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005994:	f7ff fd81 	bl	800549a <memset>
 8005998:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800599c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80059a0:	e7e9      	b.n	8005976 <__sfp+0x42>
 80059a2:	bf00      	nop
 80059a4:	08006100 	.word	0x08006100
 80059a8:	ffff0001 	.word	0xffff0001

080059ac <_fwalk_reent>:
 80059ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059b0:	4680      	mov	r8, r0
 80059b2:	4689      	mov	r9, r1
 80059b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80059b8:	2600      	movs	r6, #0
 80059ba:	b914      	cbnz	r4, 80059c2 <_fwalk_reent+0x16>
 80059bc:	4630      	mov	r0, r6
 80059be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059c2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80059c6:	3f01      	subs	r7, #1
 80059c8:	d501      	bpl.n	80059ce <_fwalk_reent+0x22>
 80059ca:	6824      	ldr	r4, [r4, #0]
 80059cc:	e7f5      	b.n	80059ba <_fwalk_reent+0xe>
 80059ce:	89ab      	ldrh	r3, [r5, #12]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d907      	bls.n	80059e4 <_fwalk_reent+0x38>
 80059d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059d8:	3301      	adds	r3, #1
 80059da:	d003      	beq.n	80059e4 <_fwalk_reent+0x38>
 80059dc:	4629      	mov	r1, r5
 80059de:	4640      	mov	r0, r8
 80059e0:	47c8      	blx	r9
 80059e2:	4306      	orrs	r6, r0
 80059e4:	3568      	adds	r5, #104	; 0x68
 80059e6:	e7ee      	b.n	80059c6 <_fwalk_reent+0x1a>

080059e8 <__swhatbuf_r>:
 80059e8:	b570      	push	{r4, r5, r6, lr}
 80059ea:	460e      	mov	r6, r1
 80059ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059f0:	2900      	cmp	r1, #0
 80059f2:	b096      	sub	sp, #88	; 0x58
 80059f4:	4614      	mov	r4, r2
 80059f6:	461d      	mov	r5, r3
 80059f8:	da07      	bge.n	8005a0a <__swhatbuf_r+0x22>
 80059fa:	2300      	movs	r3, #0
 80059fc:	602b      	str	r3, [r5, #0]
 80059fe:	89b3      	ldrh	r3, [r6, #12]
 8005a00:	061a      	lsls	r2, r3, #24
 8005a02:	d410      	bmi.n	8005a26 <__swhatbuf_r+0x3e>
 8005a04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a08:	e00e      	b.n	8005a28 <__swhatbuf_r+0x40>
 8005a0a:	466a      	mov	r2, sp
 8005a0c:	f000 f96e 	bl	8005cec <_fstat_r>
 8005a10:	2800      	cmp	r0, #0
 8005a12:	dbf2      	blt.n	80059fa <__swhatbuf_r+0x12>
 8005a14:	9a01      	ldr	r2, [sp, #4]
 8005a16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a1e:	425a      	negs	r2, r3
 8005a20:	415a      	adcs	r2, r3
 8005a22:	602a      	str	r2, [r5, #0]
 8005a24:	e7ee      	b.n	8005a04 <__swhatbuf_r+0x1c>
 8005a26:	2340      	movs	r3, #64	; 0x40
 8005a28:	2000      	movs	r0, #0
 8005a2a:	6023      	str	r3, [r4, #0]
 8005a2c:	b016      	add	sp, #88	; 0x58
 8005a2e:	bd70      	pop	{r4, r5, r6, pc}

08005a30 <__smakebuf_r>:
 8005a30:	898b      	ldrh	r3, [r1, #12]
 8005a32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a34:	079d      	lsls	r5, r3, #30
 8005a36:	4606      	mov	r6, r0
 8005a38:	460c      	mov	r4, r1
 8005a3a:	d507      	bpl.n	8005a4c <__smakebuf_r+0x1c>
 8005a3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a40:	6023      	str	r3, [r4, #0]
 8005a42:	6123      	str	r3, [r4, #16]
 8005a44:	2301      	movs	r3, #1
 8005a46:	6163      	str	r3, [r4, #20]
 8005a48:	b002      	add	sp, #8
 8005a4a:	bd70      	pop	{r4, r5, r6, pc}
 8005a4c:	ab01      	add	r3, sp, #4
 8005a4e:	466a      	mov	r2, sp
 8005a50:	f7ff ffca 	bl	80059e8 <__swhatbuf_r>
 8005a54:	9900      	ldr	r1, [sp, #0]
 8005a56:	4605      	mov	r5, r0
 8005a58:	4630      	mov	r0, r6
 8005a5a:	f000 f877 	bl	8005b4c <_malloc_r>
 8005a5e:	b948      	cbnz	r0, 8005a74 <__smakebuf_r+0x44>
 8005a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a64:	059a      	lsls	r2, r3, #22
 8005a66:	d4ef      	bmi.n	8005a48 <__smakebuf_r+0x18>
 8005a68:	f023 0303 	bic.w	r3, r3, #3
 8005a6c:	f043 0302 	orr.w	r3, r3, #2
 8005a70:	81a3      	strh	r3, [r4, #12]
 8005a72:	e7e3      	b.n	8005a3c <__smakebuf_r+0xc>
 8005a74:	4b0d      	ldr	r3, [pc, #52]	; (8005aac <__smakebuf_r+0x7c>)
 8005a76:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a78:	89a3      	ldrh	r3, [r4, #12]
 8005a7a:	6020      	str	r0, [r4, #0]
 8005a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a80:	81a3      	strh	r3, [r4, #12]
 8005a82:	9b00      	ldr	r3, [sp, #0]
 8005a84:	6163      	str	r3, [r4, #20]
 8005a86:	9b01      	ldr	r3, [sp, #4]
 8005a88:	6120      	str	r0, [r4, #16]
 8005a8a:	b15b      	cbz	r3, 8005aa4 <__smakebuf_r+0x74>
 8005a8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a90:	4630      	mov	r0, r6
 8005a92:	f000 f93d 	bl	8005d10 <_isatty_r>
 8005a96:	b128      	cbz	r0, 8005aa4 <__smakebuf_r+0x74>
 8005a98:	89a3      	ldrh	r3, [r4, #12]
 8005a9a:	f023 0303 	bic.w	r3, r3, #3
 8005a9e:	f043 0301 	orr.w	r3, r3, #1
 8005aa2:	81a3      	strh	r3, [r4, #12]
 8005aa4:	89a3      	ldrh	r3, [r4, #12]
 8005aa6:	431d      	orrs	r5, r3
 8005aa8:	81a5      	strh	r5, [r4, #12]
 8005aaa:	e7cd      	b.n	8005a48 <__smakebuf_r+0x18>
 8005aac:	0800589d 	.word	0x0800589d

08005ab0 <_free_r>:
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	4605      	mov	r5, r0
 8005ab4:	2900      	cmp	r1, #0
 8005ab6:	d045      	beq.n	8005b44 <_free_r+0x94>
 8005ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005abc:	1f0c      	subs	r4, r1, #4
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	bfb8      	it	lt
 8005ac2:	18e4      	addlt	r4, r4, r3
 8005ac4:	f000 f946 	bl	8005d54 <__malloc_lock>
 8005ac8:	4a1f      	ldr	r2, [pc, #124]	; (8005b48 <_free_r+0x98>)
 8005aca:	6813      	ldr	r3, [r2, #0]
 8005acc:	4610      	mov	r0, r2
 8005ace:	b933      	cbnz	r3, 8005ade <_free_r+0x2e>
 8005ad0:	6063      	str	r3, [r4, #4]
 8005ad2:	6014      	str	r4, [r2, #0]
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ada:	f000 b93c 	b.w	8005d56 <__malloc_unlock>
 8005ade:	42a3      	cmp	r3, r4
 8005ae0:	d90c      	bls.n	8005afc <_free_r+0x4c>
 8005ae2:	6821      	ldr	r1, [r4, #0]
 8005ae4:	1862      	adds	r2, r4, r1
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	bf04      	itt	eq
 8005aea:	681a      	ldreq	r2, [r3, #0]
 8005aec:	685b      	ldreq	r3, [r3, #4]
 8005aee:	6063      	str	r3, [r4, #4]
 8005af0:	bf04      	itt	eq
 8005af2:	1852      	addeq	r2, r2, r1
 8005af4:	6022      	streq	r2, [r4, #0]
 8005af6:	6004      	str	r4, [r0, #0]
 8005af8:	e7ec      	b.n	8005ad4 <_free_r+0x24>
 8005afa:	4613      	mov	r3, r2
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	b10a      	cbz	r2, 8005b04 <_free_r+0x54>
 8005b00:	42a2      	cmp	r2, r4
 8005b02:	d9fa      	bls.n	8005afa <_free_r+0x4a>
 8005b04:	6819      	ldr	r1, [r3, #0]
 8005b06:	1858      	adds	r0, r3, r1
 8005b08:	42a0      	cmp	r0, r4
 8005b0a:	d10b      	bne.n	8005b24 <_free_r+0x74>
 8005b0c:	6820      	ldr	r0, [r4, #0]
 8005b0e:	4401      	add	r1, r0
 8005b10:	1858      	adds	r0, r3, r1
 8005b12:	4282      	cmp	r2, r0
 8005b14:	6019      	str	r1, [r3, #0]
 8005b16:	d1dd      	bne.n	8005ad4 <_free_r+0x24>
 8005b18:	6810      	ldr	r0, [r2, #0]
 8005b1a:	6852      	ldr	r2, [r2, #4]
 8005b1c:	605a      	str	r2, [r3, #4]
 8005b1e:	4401      	add	r1, r0
 8005b20:	6019      	str	r1, [r3, #0]
 8005b22:	e7d7      	b.n	8005ad4 <_free_r+0x24>
 8005b24:	d902      	bls.n	8005b2c <_free_r+0x7c>
 8005b26:	230c      	movs	r3, #12
 8005b28:	602b      	str	r3, [r5, #0]
 8005b2a:	e7d3      	b.n	8005ad4 <_free_r+0x24>
 8005b2c:	6820      	ldr	r0, [r4, #0]
 8005b2e:	1821      	adds	r1, r4, r0
 8005b30:	428a      	cmp	r2, r1
 8005b32:	bf04      	itt	eq
 8005b34:	6811      	ldreq	r1, [r2, #0]
 8005b36:	6852      	ldreq	r2, [r2, #4]
 8005b38:	6062      	str	r2, [r4, #4]
 8005b3a:	bf04      	itt	eq
 8005b3c:	1809      	addeq	r1, r1, r0
 8005b3e:	6021      	streq	r1, [r4, #0]
 8005b40:	605c      	str	r4, [r3, #4]
 8005b42:	e7c7      	b.n	8005ad4 <_free_r+0x24>
 8005b44:	bd38      	pop	{r3, r4, r5, pc}
 8005b46:	bf00      	nop
 8005b48:	200012f8 	.word	0x200012f8

08005b4c <_malloc_r>:
 8005b4c:	b570      	push	{r4, r5, r6, lr}
 8005b4e:	1ccd      	adds	r5, r1, #3
 8005b50:	f025 0503 	bic.w	r5, r5, #3
 8005b54:	3508      	adds	r5, #8
 8005b56:	2d0c      	cmp	r5, #12
 8005b58:	bf38      	it	cc
 8005b5a:	250c      	movcc	r5, #12
 8005b5c:	2d00      	cmp	r5, #0
 8005b5e:	4606      	mov	r6, r0
 8005b60:	db01      	blt.n	8005b66 <_malloc_r+0x1a>
 8005b62:	42a9      	cmp	r1, r5
 8005b64:	d903      	bls.n	8005b6e <_malloc_r+0x22>
 8005b66:	230c      	movs	r3, #12
 8005b68:	6033      	str	r3, [r6, #0]
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	bd70      	pop	{r4, r5, r6, pc}
 8005b6e:	f000 f8f1 	bl	8005d54 <__malloc_lock>
 8005b72:	4a21      	ldr	r2, [pc, #132]	; (8005bf8 <_malloc_r+0xac>)
 8005b74:	6814      	ldr	r4, [r2, #0]
 8005b76:	4621      	mov	r1, r4
 8005b78:	b991      	cbnz	r1, 8005ba0 <_malloc_r+0x54>
 8005b7a:	4c20      	ldr	r4, [pc, #128]	; (8005bfc <_malloc_r+0xb0>)
 8005b7c:	6823      	ldr	r3, [r4, #0]
 8005b7e:	b91b      	cbnz	r3, 8005b88 <_malloc_r+0x3c>
 8005b80:	4630      	mov	r0, r6
 8005b82:	f000 f83d 	bl	8005c00 <_sbrk_r>
 8005b86:	6020      	str	r0, [r4, #0]
 8005b88:	4629      	mov	r1, r5
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	f000 f838 	bl	8005c00 <_sbrk_r>
 8005b90:	1c43      	adds	r3, r0, #1
 8005b92:	d124      	bne.n	8005bde <_malloc_r+0x92>
 8005b94:	230c      	movs	r3, #12
 8005b96:	6033      	str	r3, [r6, #0]
 8005b98:	4630      	mov	r0, r6
 8005b9a:	f000 f8dc 	bl	8005d56 <__malloc_unlock>
 8005b9e:	e7e4      	b.n	8005b6a <_malloc_r+0x1e>
 8005ba0:	680b      	ldr	r3, [r1, #0]
 8005ba2:	1b5b      	subs	r3, r3, r5
 8005ba4:	d418      	bmi.n	8005bd8 <_malloc_r+0x8c>
 8005ba6:	2b0b      	cmp	r3, #11
 8005ba8:	d90f      	bls.n	8005bca <_malloc_r+0x7e>
 8005baa:	600b      	str	r3, [r1, #0]
 8005bac:	50cd      	str	r5, [r1, r3]
 8005bae:	18cc      	adds	r4, r1, r3
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	f000 f8d0 	bl	8005d56 <__malloc_unlock>
 8005bb6:	f104 000b 	add.w	r0, r4, #11
 8005bba:	1d23      	adds	r3, r4, #4
 8005bbc:	f020 0007 	bic.w	r0, r0, #7
 8005bc0:	1ac3      	subs	r3, r0, r3
 8005bc2:	d0d3      	beq.n	8005b6c <_malloc_r+0x20>
 8005bc4:	425a      	negs	r2, r3
 8005bc6:	50e2      	str	r2, [r4, r3]
 8005bc8:	e7d0      	b.n	8005b6c <_malloc_r+0x20>
 8005bca:	428c      	cmp	r4, r1
 8005bcc:	684b      	ldr	r3, [r1, #4]
 8005bce:	bf16      	itet	ne
 8005bd0:	6063      	strne	r3, [r4, #4]
 8005bd2:	6013      	streq	r3, [r2, #0]
 8005bd4:	460c      	movne	r4, r1
 8005bd6:	e7eb      	b.n	8005bb0 <_malloc_r+0x64>
 8005bd8:	460c      	mov	r4, r1
 8005bda:	6849      	ldr	r1, [r1, #4]
 8005bdc:	e7cc      	b.n	8005b78 <_malloc_r+0x2c>
 8005bde:	1cc4      	adds	r4, r0, #3
 8005be0:	f024 0403 	bic.w	r4, r4, #3
 8005be4:	42a0      	cmp	r0, r4
 8005be6:	d005      	beq.n	8005bf4 <_malloc_r+0xa8>
 8005be8:	1a21      	subs	r1, r4, r0
 8005bea:	4630      	mov	r0, r6
 8005bec:	f000 f808 	bl	8005c00 <_sbrk_r>
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	d0cf      	beq.n	8005b94 <_malloc_r+0x48>
 8005bf4:	6025      	str	r5, [r4, #0]
 8005bf6:	e7db      	b.n	8005bb0 <_malloc_r+0x64>
 8005bf8:	200012f8 	.word	0x200012f8
 8005bfc:	200012fc 	.word	0x200012fc

08005c00 <_sbrk_r>:
 8005c00:	b538      	push	{r3, r4, r5, lr}
 8005c02:	4c06      	ldr	r4, [pc, #24]	; (8005c1c <_sbrk_r+0x1c>)
 8005c04:	2300      	movs	r3, #0
 8005c06:	4605      	mov	r5, r0
 8005c08:	4608      	mov	r0, r1
 8005c0a:	6023      	str	r3, [r4, #0]
 8005c0c:	f7fa fc7e 	bl	800050c <_sbrk>
 8005c10:	1c43      	adds	r3, r0, #1
 8005c12:	d102      	bne.n	8005c1a <_sbrk_r+0x1a>
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	b103      	cbz	r3, 8005c1a <_sbrk_r+0x1a>
 8005c18:	602b      	str	r3, [r5, #0]
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}
 8005c1c:	200015cc 	.word	0x200015cc

08005c20 <__sread>:
 8005c20:	b510      	push	{r4, lr}
 8005c22:	460c      	mov	r4, r1
 8005c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c28:	f000 f896 	bl	8005d58 <_read_r>
 8005c2c:	2800      	cmp	r0, #0
 8005c2e:	bfab      	itete	ge
 8005c30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c32:	89a3      	ldrhlt	r3, [r4, #12]
 8005c34:	181b      	addge	r3, r3, r0
 8005c36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c3a:	bfac      	ite	ge
 8005c3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c3e:	81a3      	strhlt	r3, [r4, #12]
 8005c40:	bd10      	pop	{r4, pc}

08005c42 <__swrite>:
 8005c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c46:	461f      	mov	r7, r3
 8005c48:	898b      	ldrh	r3, [r1, #12]
 8005c4a:	05db      	lsls	r3, r3, #23
 8005c4c:	4605      	mov	r5, r0
 8005c4e:	460c      	mov	r4, r1
 8005c50:	4616      	mov	r6, r2
 8005c52:	d505      	bpl.n	8005c60 <__swrite+0x1e>
 8005c54:	2302      	movs	r3, #2
 8005c56:	2200      	movs	r2, #0
 8005c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c5c:	f000 f868 	bl	8005d30 <_lseek_r>
 8005c60:	89a3      	ldrh	r3, [r4, #12]
 8005c62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c6a:	81a3      	strh	r3, [r4, #12]
 8005c6c:	4632      	mov	r2, r6
 8005c6e:	463b      	mov	r3, r7
 8005c70:	4628      	mov	r0, r5
 8005c72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c76:	f000 b817 	b.w	8005ca8 <_write_r>

08005c7a <__sseek>:
 8005c7a:	b510      	push	{r4, lr}
 8005c7c:	460c      	mov	r4, r1
 8005c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c82:	f000 f855 	bl	8005d30 <_lseek_r>
 8005c86:	1c43      	adds	r3, r0, #1
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	bf15      	itete	ne
 8005c8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c96:	81a3      	strheq	r3, [r4, #12]
 8005c98:	bf18      	it	ne
 8005c9a:	81a3      	strhne	r3, [r4, #12]
 8005c9c:	bd10      	pop	{r4, pc}

08005c9e <__sclose>:
 8005c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ca2:	f000 b813 	b.w	8005ccc <_close_r>
	...

08005ca8 <_write_r>:
 8005ca8:	b538      	push	{r3, r4, r5, lr}
 8005caa:	4c07      	ldr	r4, [pc, #28]	; (8005cc8 <_write_r+0x20>)
 8005cac:	4605      	mov	r5, r0
 8005cae:	4608      	mov	r0, r1
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	6022      	str	r2, [r4, #0]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	f7fe fd72 	bl	80047a0 <_write>
 8005cbc:	1c43      	adds	r3, r0, #1
 8005cbe:	d102      	bne.n	8005cc6 <_write_r+0x1e>
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	b103      	cbz	r3, 8005cc6 <_write_r+0x1e>
 8005cc4:	602b      	str	r3, [r5, #0]
 8005cc6:	bd38      	pop	{r3, r4, r5, pc}
 8005cc8:	200015cc 	.word	0x200015cc

08005ccc <_close_r>:
 8005ccc:	b538      	push	{r3, r4, r5, lr}
 8005cce:	4c06      	ldr	r4, [pc, #24]	; (8005ce8 <_close_r+0x1c>)
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	4605      	mov	r5, r0
 8005cd4:	4608      	mov	r0, r1
 8005cd6:	6023      	str	r3, [r4, #0]
 8005cd8:	f7fa fc32 	bl	8000540 <_close>
 8005cdc:	1c43      	adds	r3, r0, #1
 8005cde:	d102      	bne.n	8005ce6 <_close_r+0x1a>
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	b103      	cbz	r3, 8005ce6 <_close_r+0x1a>
 8005ce4:	602b      	str	r3, [r5, #0]
 8005ce6:	bd38      	pop	{r3, r4, r5, pc}
 8005ce8:	200015cc 	.word	0x200015cc

08005cec <_fstat_r>:
 8005cec:	b538      	push	{r3, r4, r5, lr}
 8005cee:	4c07      	ldr	r4, [pc, #28]	; (8005d0c <_fstat_r+0x20>)
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	4605      	mov	r5, r0
 8005cf4:	4608      	mov	r0, r1
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	6023      	str	r3, [r4, #0]
 8005cfa:	f7fa fc24 	bl	8000546 <_fstat>
 8005cfe:	1c43      	adds	r3, r0, #1
 8005d00:	d102      	bne.n	8005d08 <_fstat_r+0x1c>
 8005d02:	6823      	ldr	r3, [r4, #0]
 8005d04:	b103      	cbz	r3, 8005d08 <_fstat_r+0x1c>
 8005d06:	602b      	str	r3, [r5, #0]
 8005d08:	bd38      	pop	{r3, r4, r5, pc}
 8005d0a:	bf00      	nop
 8005d0c:	200015cc 	.word	0x200015cc

08005d10 <_isatty_r>:
 8005d10:	b538      	push	{r3, r4, r5, lr}
 8005d12:	4c06      	ldr	r4, [pc, #24]	; (8005d2c <_isatty_r+0x1c>)
 8005d14:	2300      	movs	r3, #0
 8005d16:	4605      	mov	r5, r0
 8005d18:	4608      	mov	r0, r1
 8005d1a:	6023      	str	r3, [r4, #0]
 8005d1c:	f7fa fc18 	bl	8000550 <_isatty>
 8005d20:	1c43      	adds	r3, r0, #1
 8005d22:	d102      	bne.n	8005d2a <_isatty_r+0x1a>
 8005d24:	6823      	ldr	r3, [r4, #0]
 8005d26:	b103      	cbz	r3, 8005d2a <_isatty_r+0x1a>
 8005d28:	602b      	str	r3, [r5, #0]
 8005d2a:	bd38      	pop	{r3, r4, r5, pc}
 8005d2c:	200015cc 	.word	0x200015cc

08005d30 <_lseek_r>:
 8005d30:	b538      	push	{r3, r4, r5, lr}
 8005d32:	4c07      	ldr	r4, [pc, #28]	; (8005d50 <_lseek_r+0x20>)
 8005d34:	4605      	mov	r5, r0
 8005d36:	4608      	mov	r0, r1
 8005d38:	4611      	mov	r1, r2
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	6022      	str	r2, [r4, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f7fa fc08 	bl	8000554 <_lseek>
 8005d44:	1c43      	adds	r3, r0, #1
 8005d46:	d102      	bne.n	8005d4e <_lseek_r+0x1e>
 8005d48:	6823      	ldr	r3, [r4, #0]
 8005d4a:	b103      	cbz	r3, 8005d4e <_lseek_r+0x1e>
 8005d4c:	602b      	str	r3, [r5, #0]
 8005d4e:	bd38      	pop	{r3, r4, r5, pc}
 8005d50:	200015cc 	.word	0x200015cc

08005d54 <__malloc_lock>:
 8005d54:	4770      	bx	lr

08005d56 <__malloc_unlock>:
 8005d56:	4770      	bx	lr

08005d58 <_read_r>:
 8005d58:	b538      	push	{r3, r4, r5, lr}
 8005d5a:	4c07      	ldr	r4, [pc, #28]	; (8005d78 <_read_r+0x20>)
 8005d5c:	4605      	mov	r5, r0
 8005d5e:	4608      	mov	r0, r1
 8005d60:	4611      	mov	r1, r2
 8005d62:	2200      	movs	r2, #0
 8005d64:	6022      	str	r2, [r4, #0]
 8005d66:	461a      	mov	r2, r3
 8005d68:	f7fa fbc1 	bl	80004ee <_read>
 8005d6c:	1c43      	adds	r3, r0, #1
 8005d6e:	d102      	bne.n	8005d76 <_read_r+0x1e>
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	b103      	cbz	r3, 8005d76 <_read_r+0x1e>
 8005d74:	602b      	str	r3, [r5, #0]
 8005d76:	bd38      	pop	{r3, r4, r5, pc}
 8005d78:	200015cc 	.word	0x200015cc

08005d7c <_init>:
 8005d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7e:	bf00      	nop
 8005d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d82:	bc08      	pop	{r3}
 8005d84:	469e      	mov	lr, r3
 8005d86:	4770      	bx	lr

08005d88 <_fini>:
 8005d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8a:	bf00      	nop
 8005d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d8e:	bc08      	pop	{r3}
 8005d90:	469e      	mov	lr, r3
 8005d92:	4770      	bx	lr
